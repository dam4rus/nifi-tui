/*
NiFi Rest API

The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.

API version: 2.0.0
Contact: dev@nifi.apache.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nifiapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ProvenanceAPIService ProvenanceAPI service
type ProvenanceAPIService service

type ProvenanceAPIDeleteLineageRequest struct {
	ctx context.Context
	ApiService *ProvenanceAPIService
	id string
	clusterNodeId *string
}

// The id of the node where this query exists if clustered.
func (r ProvenanceAPIDeleteLineageRequest) ClusterNodeId(clusterNodeId string) ProvenanceAPIDeleteLineageRequest {
	r.clusterNodeId = &clusterNodeId
	return r
}

func (r ProvenanceAPIDeleteLineageRequest) Execute() (*LineageEntity, *http.Response, error) {
	return r.ApiService.DeleteLineageExecute(r)
}

/*
DeleteLineage Deletes a lineage query

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The id of the lineage query.
 @return ProvenanceAPIDeleteLineageRequest
*/
func (a *ProvenanceAPIService) DeleteLineage(ctx context.Context, id string) ProvenanceAPIDeleteLineageRequest {
	return ProvenanceAPIDeleteLineageRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return LineageEntity
func (a *ProvenanceAPIService) DeleteLineageExecute(r ProvenanceAPIDeleteLineageRequest) (*LineageEntity, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LineageEntity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProvenanceAPIService.DeleteLineage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/provenance/lineage/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.clusterNodeId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "clusterNodeId", r.clusterNodeId, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProvenanceAPIDeleteProvenanceRequest struct {
	ctx context.Context
	ApiService *ProvenanceAPIService
	id string
	clusterNodeId *string
}

// The id of the node where this query exists if clustered.
func (r ProvenanceAPIDeleteProvenanceRequest) ClusterNodeId(clusterNodeId string) ProvenanceAPIDeleteProvenanceRequest {
	r.clusterNodeId = &clusterNodeId
	return r
}

func (r ProvenanceAPIDeleteProvenanceRequest) Execute() (*ProvenanceEntity, *http.Response, error) {
	return r.ApiService.DeleteProvenanceExecute(r)
}

/*
DeleteProvenance Deletes a provenance query

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The id of the provenance query.
 @return ProvenanceAPIDeleteProvenanceRequest
*/
func (a *ProvenanceAPIService) DeleteProvenance(ctx context.Context, id string) ProvenanceAPIDeleteProvenanceRequest {
	return ProvenanceAPIDeleteProvenanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ProvenanceEntity
func (a *ProvenanceAPIService) DeleteProvenanceExecute(r ProvenanceAPIDeleteProvenanceRequest) (*ProvenanceEntity, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProvenanceEntity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProvenanceAPIService.DeleteProvenance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/provenance/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.clusterNodeId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "clusterNodeId", r.clusterNodeId, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProvenanceAPIGetLineageRequest struct {
	ctx context.Context
	ApiService *ProvenanceAPIService
	id string
	clusterNodeId *string
}

// The id of the node where this query exists if clustered.
func (r ProvenanceAPIGetLineageRequest) ClusterNodeId(clusterNodeId string) ProvenanceAPIGetLineageRequest {
	r.clusterNodeId = &clusterNodeId
	return r
}

func (r ProvenanceAPIGetLineageRequest) Execute() (*LineageEntity, *http.Response, error) {
	return r.ApiService.GetLineageExecute(r)
}

/*
GetLineage Gets a lineage query

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The id of the lineage query.
 @return ProvenanceAPIGetLineageRequest
*/
func (a *ProvenanceAPIService) GetLineage(ctx context.Context, id string) ProvenanceAPIGetLineageRequest {
	return ProvenanceAPIGetLineageRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return LineageEntity
func (a *ProvenanceAPIService) GetLineageExecute(r ProvenanceAPIGetLineageRequest) (*LineageEntity, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LineageEntity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProvenanceAPIService.GetLineage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/provenance/lineage/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.clusterNodeId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "clusterNodeId", r.clusterNodeId, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProvenanceAPIGetProvenanceRequest struct {
	ctx context.Context
	ApiService *ProvenanceAPIService
	id string
	clusterNodeId *string
	summarize *bool
	incrementalResults *bool
}

// The id of the node where this query exists if clustered.
func (r ProvenanceAPIGetProvenanceRequest) ClusterNodeId(clusterNodeId string) ProvenanceAPIGetProvenanceRequest {
	r.clusterNodeId = &clusterNodeId
	return r
}

// Whether or not incremental results are returned. If false, provenance events are only returned once the query completes. This property is true by default.
func (r ProvenanceAPIGetProvenanceRequest) Summarize(summarize bool) ProvenanceAPIGetProvenanceRequest {
	r.summarize = &summarize
	return r
}

// Whether or not to summarize provenance events returned. This property is false by default.
func (r ProvenanceAPIGetProvenanceRequest) IncrementalResults(incrementalResults bool) ProvenanceAPIGetProvenanceRequest {
	r.incrementalResults = &incrementalResults
	return r
}

func (r ProvenanceAPIGetProvenanceRequest) Execute() (*ProvenanceEntity, *http.Response, error) {
	return r.ApiService.GetProvenanceExecute(r)
}

/*
GetProvenance Gets a provenance query

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The id of the provenance query.
 @return ProvenanceAPIGetProvenanceRequest
*/
func (a *ProvenanceAPIService) GetProvenance(ctx context.Context, id string) ProvenanceAPIGetProvenanceRequest {
	return ProvenanceAPIGetProvenanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ProvenanceEntity
func (a *ProvenanceAPIService) GetProvenanceExecute(r ProvenanceAPIGetProvenanceRequest) (*ProvenanceEntity, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProvenanceEntity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProvenanceAPIService.GetProvenance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/provenance/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.clusterNodeId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "clusterNodeId", r.clusterNodeId, "")
	}
	if r.summarize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "summarize", r.summarize, "")
	}
	if r.incrementalResults != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "incrementalResults", r.incrementalResults, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProvenanceAPIGetSearchOptionsRequest struct {
	ctx context.Context
	ApiService *ProvenanceAPIService
}

func (r ProvenanceAPIGetSearchOptionsRequest) Execute() (*ProvenanceOptionsEntity, *http.Response, error) {
	return r.ApiService.GetSearchOptionsExecute(r)
}

/*
GetSearchOptions Gets the searchable attributes for provenance events

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ProvenanceAPIGetSearchOptionsRequest
*/
func (a *ProvenanceAPIService) GetSearchOptions(ctx context.Context) ProvenanceAPIGetSearchOptionsRequest {
	return ProvenanceAPIGetSearchOptionsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ProvenanceOptionsEntity
func (a *ProvenanceAPIService) GetSearchOptionsExecute(r ProvenanceAPIGetSearchOptionsRequest) (*ProvenanceOptionsEntity, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProvenanceOptionsEntity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProvenanceAPIService.GetSearchOptions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/provenance/search-options"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProvenanceAPISubmitLineageRequestRequest struct {
	ctx context.Context
	ApiService *ProvenanceAPIService
	body *LineageEntity
}

// The lineage query details.
func (r ProvenanceAPISubmitLineageRequestRequest) Body(body LineageEntity) ProvenanceAPISubmitLineageRequestRequest {
	r.body = &body
	return r
}

func (r ProvenanceAPISubmitLineageRequestRequest) Execute() (*LineageEntity, *http.Response, error) {
	return r.ApiService.SubmitLineageRequestExecute(r)
}

/*
SubmitLineageRequest Submits a lineage query

Lineage queries may be long running so this endpoint submits a request. The response will include the current state of the query. If the request is not completed the URI in the response can be used at a later time to get the updated state of the query. Once the query has completed the lineage request should be deleted by the client who originally submitted it.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ProvenanceAPISubmitLineageRequestRequest
*/
func (a *ProvenanceAPIService) SubmitLineageRequest(ctx context.Context) ProvenanceAPISubmitLineageRequestRequest {
	return ProvenanceAPISubmitLineageRequestRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return LineageEntity
func (a *ProvenanceAPIService) SubmitLineageRequestExecute(r ProvenanceAPISubmitLineageRequestRequest) (*LineageEntity, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LineageEntity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProvenanceAPIService.SubmitLineageRequest")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/provenance/lineage"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProvenanceAPISubmitProvenanceRequestRequest struct {
	ctx context.Context
	ApiService *ProvenanceAPIService
	body *ProvenanceEntity
}

// The provenance query details.
func (r ProvenanceAPISubmitProvenanceRequestRequest) Body(body ProvenanceEntity) ProvenanceAPISubmitProvenanceRequestRequest {
	r.body = &body
	return r
}

func (r ProvenanceAPISubmitProvenanceRequestRequest) Execute() (*ProvenanceEntity, *http.Response, error) {
	return r.ApiService.SubmitProvenanceRequestExecute(r)
}

/*
SubmitProvenanceRequest Submits a provenance query

Provenance queries may be long running so this endpoint submits a request. The response will include the current state of the query. If the request is not completed the URI in the response can be used at a later time to get the updated state of the query. Once the query has completed the provenance request should be deleted by the client who originally submitted it.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ProvenanceAPISubmitProvenanceRequestRequest
*/
func (a *ProvenanceAPIService) SubmitProvenanceRequest(ctx context.Context) ProvenanceAPISubmitProvenanceRequestRequest {
	return ProvenanceAPISubmitProvenanceRequestRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ProvenanceEntity
func (a *ProvenanceAPIService) SubmitProvenanceRequestExecute(r ProvenanceAPISubmitProvenanceRequestRequest) (*ProvenanceEntity, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProvenanceEntity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProvenanceAPIService.SubmitProvenanceRequest")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/provenance"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
