/*
NiFi Rest API

The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.

API version: 2.0.0
Contact: dev@nifi.apache.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nifiapi

import (
	"encoding/json"
)

// checks if the NodeIdentifier type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NodeIdentifier{}

// NodeIdentifier struct for NodeIdentifier
type NodeIdentifier struct {
	Id *string `json:"id,omitempty"`
	ApiAddress *string `json:"apiAddress,omitempty"`
	ApiPort *int32 `json:"apiPort,omitempty"`
	SocketAddress *string `json:"socketAddress,omitempty"`
	SocketPort *int32 `json:"socketPort,omitempty"`
	LoadBalanceAddress *string `json:"loadBalanceAddress,omitempty"`
	LoadBalancePort *int32 `json:"loadBalancePort,omitempty"`
	SiteToSiteAddress *string `json:"siteToSiteAddress,omitempty"`
	SiteToSitePort *int32 `json:"siteToSitePort,omitempty"`
	SiteToSiteHttpApiPort *int32 `json:"siteToSiteHttpApiPort,omitempty"`
	SiteToSiteSecure *bool `json:"siteToSiteSecure,omitempty"`
	NodeIdentities []string `json:"nodeIdentities,omitempty"`
	FullDescription *string `json:"fullDescription,omitempty"`
}

// NewNodeIdentifier instantiates a new NodeIdentifier object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodeIdentifier() *NodeIdentifier {
	this := NodeIdentifier{}
	return &this
}

// NewNodeIdentifierWithDefaults instantiates a new NodeIdentifier object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodeIdentifierWithDefaults() *NodeIdentifier {
	this := NodeIdentifier{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *NodeIdentifier) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeIdentifier) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *NodeIdentifier) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *NodeIdentifier) SetId(v string) {
	o.Id = &v
}

// GetApiAddress returns the ApiAddress field value if set, zero value otherwise.
func (o *NodeIdentifier) GetApiAddress() string {
	if o == nil || IsNil(o.ApiAddress) {
		var ret string
		return ret
	}
	return *o.ApiAddress
}

// GetApiAddressOk returns a tuple with the ApiAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeIdentifier) GetApiAddressOk() (*string, bool) {
	if o == nil || IsNil(o.ApiAddress) {
		return nil, false
	}
	return o.ApiAddress, true
}

// HasApiAddress returns a boolean if a field has been set.
func (o *NodeIdentifier) HasApiAddress() bool {
	if o != nil && !IsNil(o.ApiAddress) {
		return true
	}

	return false
}

// SetApiAddress gets a reference to the given string and assigns it to the ApiAddress field.
func (o *NodeIdentifier) SetApiAddress(v string) {
	o.ApiAddress = &v
}

// GetApiPort returns the ApiPort field value if set, zero value otherwise.
func (o *NodeIdentifier) GetApiPort() int32 {
	if o == nil || IsNil(o.ApiPort) {
		var ret int32
		return ret
	}
	return *o.ApiPort
}

// GetApiPortOk returns a tuple with the ApiPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeIdentifier) GetApiPortOk() (*int32, bool) {
	if o == nil || IsNil(o.ApiPort) {
		return nil, false
	}
	return o.ApiPort, true
}

// HasApiPort returns a boolean if a field has been set.
func (o *NodeIdentifier) HasApiPort() bool {
	if o != nil && !IsNil(o.ApiPort) {
		return true
	}

	return false
}

// SetApiPort gets a reference to the given int32 and assigns it to the ApiPort field.
func (o *NodeIdentifier) SetApiPort(v int32) {
	o.ApiPort = &v
}

// GetSocketAddress returns the SocketAddress field value if set, zero value otherwise.
func (o *NodeIdentifier) GetSocketAddress() string {
	if o == nil || IsNil(o.SocketAddress) {
		var ret string
		return ret
	}
	return *o.SocketAddress
}

// GetSocketAddressOk returns a tuple with the SocketAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeIdentifier) GetSocketAddressOk() (*string, bool) {
	if o == nil || IsNil(o.SocketAddress) {
		return nil, false
	}
	return o.SocketAddress, true
}

// HasSocketAddress returns a boolean if a field has been set.
func (o *NodeIdentifier) HasSocketAddress() bool {
	if o != nil && !IsNil(o.SocketAddress) {
		return true
	}

	return false
}

// SetSocketAddress gets a reference to the given string and assigns it to the SocketAddress field.
func (o *NodeIdentifier) SetSocketAddress(v string) {
	o.SocketAddress = &v
}

// GetSocketPort returns the SocketPort field value if set, zero value otherwise.
func (o *NodeIdentifier) GetSocketPort() int32 {
	if o == nil || IsNil(o.SocketPort) {
		var ret int32
		return ret
	}
	return *o.SocketPort
}

// GetSocketPortOk returns a tuple with the SocketPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeIdentifier) GetSocketPortOk() (*int32, bool) {
	if o == nil || IsNil(o.SocketPort) {
		return nil, false
	}
	return o.SocketPort, true
}

// HasSocketPort returns a boolean if a field has been set.
func (o *NodeIdentifier) HasSocketPort() bool {
	if o != nil && !IsNil(o.SocketPort) {
		return true
	}

	return false
}

// SetSocketPort gets a reference to the given int32 and assigns it to the SocketPort field.
func (o *NodeIdentifier) SetSocketPort(v int32) {
	o.SocketPort = &v
}

// GetLoadBalanceAddress returns the LoadBalanceAddress field value if set, zero value otherwise.
func (o *NodeIdentifier) GetLoadBalanceAddress() string {
	if o == nil || IsNil(o.LoadBalanceAddress) {
		var ret string
		return ret
	}
	return *o.LoadBalanceAddress
}

// GetLoadBalanceAddressOk returns a tuple with the LoadBalanceAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeIdentifier) GetLoadBalanceAddressOk() (*string, bool) {
	if o == nil || IsNil(o.LoadBalanceAddress) {
		return nil, false
	}
	return o.LoadBalanceAddress, true
}

// HasLoadBalanceAddress returns a boolean if a field has been set.
func (o *NodeIdentifier) HasLoadBalanceAddress() bool {
	if o != nil && !IsNil(o.LoadBalanceAddress) {
		return true
	}

	return false
}

// SetLoadBalanceAddress gets a reference to the given string and assigns it to the LoadBalanceAddress field.
func (o *NodeIdentifier) SetLoadBalanceAddress(v string) {
	o.LoadBalanceAddress = &v
}

// GetLoadBalancePort returns the LoadBalancePort field value if set, zero value otherwise.
func (o *NodeIdentifier) GetLoadBalancePort() int32 {
	if o == nil || IsNil(o.LoadBalancePort) {
		var ret int32
		return ret
	}
	return *o.LoadBalancePort
}

// GetLoadBalancePortOk returns a tuple with the LoadBalancePort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeIdentifier) GetLoadBalancePortOk() (*int32, bool) {
	if o == nil || IsNil(o.LoadBalancePort) {
		return nil, false
	}
	return o.LoadBalancePort, true
}

// HasLoadBalancePort returns a boolean if a field has been set.
func (o *NodeIdentifier) HasLoadBalancePort() bool {
	if o != nil && !IsNil(o.LoadBalancePort) {
		return true
	}

	return false
}

// SetLoadBalancePort gets a reference to the given int32 and assigns it to the LoadBalancePort field.
func (o *NodeIdentifier) SetLoadBalancePort(v int32) {
	o.LoadBalancePort = &v
}

// GetSiteToSiteAddress returns the SiteToSiteAddress field value if set, zero value otherwise.
func (o *NodeIdentifier) GetSiteToSiteAddress() string {
	if o == nil || IsNil(o.SiteToSiteAddress) {
		var ret string
		return ret
	}
	return *o.SiteToSiteAddress
}

// GetSiteToSiteAddressOk returns a tuple with the SiteToSiteAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeIdentifier) GetSiteToSiteAddressOk() (*string, bool) {
	if o == nil || IsNil(o.SiteToSiteAddress) {
		return nil, false
	}
	return o.SiteToSiteAddress, true
}

// HasSiteToSiteAddress returns a boolean if a field has been set.
func (o *NodeIdentifier) HasSiteToSiteAddress() bool {
	if o != nil && !IsNil(o.SiteToSiteAddress) {
		return true
	}

	return false
}

// SetSiteToSiteAddress gets a reference to the given string and assigns it to the SiteToSiteAddress field.
func (o *NodeIdentifier) SetSiteToSiteAddress(v string) {
	o.SiteToSiteAddress = &v
}

// GetSiteToSitePort returns the SiteToSitePort field value if set, zero value otherwise.
func (o *NodeIdentifier) GetSiteToSitePort() int32 {
	if o == nil || IsNil(o.SiteToSitePort) {
		var ret int32
		return ret
	}
	return *o.SiteToSitePort
}

// GetSiteToSitePortOk returns a tuple with the SiteToSitePort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeIdentifier) GetSiteToSitePortOk() (*int32, bool) {
	if o == nil || IsNil(o.SiteToSitePort) {
		return nil, false
	}
	return o.SiteToSitePort, true
}

// HasSiteToSitePort returns a boolean if a field has been set.
func (o *NodeIdentifier) HasSiteToSitePort() bool {
	if o != nil && !IsNil(o.SiteToSitePort) {
		return true
	}

	return false
}

// SetSiteToSitePort gets a reference to the given int32 and assigns it to the SiteToSitePort field.
func (o *NodeIdentifier) SetSiteToSitePort(v int32) {
	o.SiteToSitePort = &v
}

// GetSiteToSiteHttpApiPort returns the SiteToSiteHttpApiPort field value if set, zero value otherwise.
func (o *NodeIdentifier) GetSiteToSiteHttpApiPort() int32 {
	if o == nil || IsNil(o.SiteToSiteHttpApiPort) {
		var ret int32
		return ret
	}
	return *o.SiteToSiteHttpApiPort
}

// GetSiteToSiteHttpApiPortOk returns a tuple with the SiteToSiteHttpApiPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeIdentifier) GetSiteToSiteHttpApiPortOk() (*int32, bool) {
	if o == nil || IsNil(o.SiteToSiteHttpApiPort) {
		return nil, false
	}
	return o.SiteToSiteHttpApiPort, true
}

// HasSiteToSiteHttpApiPort returns a boolean if a field has been set.
func (o *NodeIdentifier) HasSiteToSiteHttpApiPort() bool {
	if o != nil && !IsNil(o.SiteToSiteHttpApiPort) {
		return true
	}

	return false
}

// SetSiteToSiteHttpApiPort gets a reference to the given int32 and assigns it to the SiteToSiteHttpApiPort field.
func (o *NodeIdentifier) SetSiteToSiteHttpApiPort(v int32) {
	o.SiteToSiteHttpApiPort = &v
}

// GetSiteToSiteSecure returns the SiteToSiteSecure field value if set, zero value otherwise.
func (o *NodeIdentifier) GetSiteToSiteSecure() bool {
	if o == nil || IsNil(o.SiteToSiteSecure) {
		var ret bool
		return ret
	}
	return *o.SiteToSiteSecure
}

// GetSiteToSiteSecureOk returns a tuple with the SiteToSiteSecure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeIdentifier) GetSiteToSiteSecureOk() (*bool, bool) {
	if o == nil || IsNil(o.SiteToSiteSecure) {
		return nil, false
	}
	return o.SiteToSiteSecure, true
}

// HasSiteToSiteSecure returns a boolean if a field has been set.
func (o *NodeIdentifier) HasSiteToSiteSecure() bool {
	if o != nil && !IsNil(o.SiteToSiteSecure) {
		return true
	}

	return false
}

// SetSiteToSiteSecure gets a reference to the given bool and assigns it to the SiteToSiteSecure field.
func (o *NodeIdentifier) SetSiteToSiteSecure(v bool) {
	o.SiteToSiteSecure = &v
}

// GetNodeIdentities returns the NodeIdentities field value if set, zero value otherwise.
func (o *NodeIdentifier) GetNodeIdentities() []string {
	if o == nil || IsNil(o.NodeIdentities) {
		var ret []string
		return ret
	}
	return o.NodeIdentities
}

// GetNodeIdentitiesOk returns a tuple with the NodeIdentities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeIdentifier) GetNodeIdentitiesOk() ([]string, bool) {
	if o == nil || IsNil(o.NodeIdentities) {
		return nil, false
	}
	return o.NodeIdentities, true
}

// HasNodeIdentities returns a boolean if a field has been set.
func (o *NodeIdentifier) HasNodeIdentities() bool {
	if o != nil && !IsNil(o.NodeIdentities) {
		return true
	}

	return false
}

// SetNodeIdentities gets a reference to the given []string and assigns it to the NodeIdentities field.
func (o *NodeIdentifier) SetNodeIdentities(v []string) {
	o.NodeIdentities = v
}

// GetFullDescription returns the FullDescription field value if set, zero value otherwise.
func (o *NodeIdentifier) GetFullDescription() string {
	if o == nil || IsNil(o.FullDescription) {
		var ret string
		return ret
	}
	return *o.FullDescription
}

// GetFullDescriptionOk returns a tuple with the FullDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeIdentifier) GetFullDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.FullDescription) {
		return nil, false
	}
	return o.FullDescription, true
}

// HasFullDescription returns a boolean if a field has been set.
func (o *NodeIdentifier) HasFullDescription() bool {
	if o != nil && !IsNil(o.FullDescription) {
		return true
	}

	return false
}

// SetFullDescription gets a reference to the given string and assigns it to the FullDescription field.
func (o *NodeIdentifier) SetFullDescription(v string) {
	o.FullDescription = &v
}

func (o NodeIdentifier) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NodeIdentifier) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ApiAddress) {
		toSerialize["apiAddress"] = o.ApiAddress
	}
	if !IsNil(o.ApiPort) {
		toSerialize["apiPort"] = o.ApiPort
	}
	if !IsNil(o.SocketAddress) {
		toSerialize["socketAddress"] = o.SocketAddress
	}
	if !IsNil(o.SocketPort) {
		toSerialize["socketPort"] = o.SocketPort
	}
	if !IsNil(o.LoadBalanceAddress) {
		toSerialize["loadBalanceAddress"] = o.LoadBalanceAddress
	}
	if !IsNil(o.LoadBalancePort) {
		toSerialize["loadBalancePort"] = o.LoadBalancePort
	}
	if !IsNil(o.SiteToSiteAddress) {
		toSerialize["siteToSiteAddress"] = o.SiteToSiteAddress
	}
	if !IsNil(o.SiteToSitePort) {
		toSerialize["siteToSitePort"] = o.SiteToSitePort
	}
	if !IsNil(o.SiteToSiteHttpApiPort) {
		toSerialize["siteToSiteHttpApiPort"] = o.SiteToSiteHttpApiPort
	}
	if !IsNil(o.SiteToSiteSecure) {
		toSerialize["siteToSiteSecure"] = o.SiteToSiteSecure
	}
	if !IsNil(o.NodeIdentities) {
		toSerialize["nodeIdentities"] = o.NodeIdentities
	}
	if !IsNil(o.FullDescription) {
		toSerialize["fullDescription"] = o.FullDescription
	}
	return toSerialize, nil
}

type NullableNodeIdentifier struct {
	value *NodeIdentifier
	isSet bool
}

func (v NullableNodeIdentifier) Get() *NodeIdentifier {
	return v.value
}

func (v *NullableNodeIdentifier) Set(val *NodeIdentifier) {
	v.value = val
	v.isSet = true
}

func (v NullableNodeIdentifier) IsSet() bool {
	return v.isSet
}

func (v *NullableNodeIdentifier) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodeIdentifier(val *NodeIdentifier) *NullableNodeIdentifier {
	return &NullableNodeIdentifier{value: val, isSet: true}
}

func (v NullableNodeIdentifier) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodeIdentifier) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


