/*
NiFi Rest API

The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.

API version: 2.0.0
Contact: dev@nifi.apache.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nifiapi

import (
	"encoding/json"
)

// checks if the ProcessorDiagnosticsDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProcessorDiagnosticsDTO{}

// ProcessorDiagnosticsDTO struct for ProcessorDiagnosticsDTO
type ProcessorDiagnosticsDTO struct {
	Processor *ProcessorDTO `json:"processor,omitempty"`
	ProcessorStatus *ProcessorStatusDTO `json:"processorStatus,omitempty"`
	// Diagnostic Information about all Controller Services that the Processor is referencing
	ReferencedControllerServices []ControllerServiceDiagnosticsDTO `json:"referencedControllerServices,omitempty"`
	// Diagnostic Information about all incoming Connections
	IncomingConnections []ConnectionDiagnosticsDTO `json:"incomingConnections,omitempty"`
	// Diagnostic Information about all outgoing Connections
	OutgoingConnections []ConnectionDiagnosticsDTO `json:"outgoingConnections,omitempty"`
	JvmDiagnostics *JVMDiagnosticsDTO `json:"jvmDiagnostics,omitempty"`
	// Thread Dumps that were taken of the threads that are active in the Processor
	ThreadDumps []ThreadDumpDTO `json:"threadDumps,omitempty"`
	ClassLoaderDiagnostics *ClassLoaderDiagnosticsDTO `json:"classLoaderDiagnostics,omitempty"`
}

// NewProcessorDiagnosticsDTO instantiates a new ProcessorDiagnosticsDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProcessorDiagnosticsDTO() *ProcessorDiagnosticsDTO {
	this := ProcessorDiagnosticsDTO{}
	return &this
}

// NewProcessorDiagnosticsDTOWithDefaults instantiates a new ProcessorDiagnosticsDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProcessorDiagnosticsDTOWithDefaults() *ProcessorDiagnosticsDTO {
	this := ProcessorDiagnosticsDTO{}
	return &this
}

// GetProcessor returns the Processor field value if set, zero value otherwise.
func (o *ProcessorDiagnosticsDTO) GetProcessor() ProcessorDTO {
	if o == nil || IsNil(o.Processor) {
		var ret ProcessorDTO
		return ret
	}
	return *o.Processor
}

// GetProcessorOk returns a tuple with the Processor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessorDiagnosticsDTO) GetProcessorOk() (*ProcessorDTO, bool) {
	if o == nil || IsNil(o.Processor) {
		return nil, false
	}
	return o.Processor, true
}

// HasProcessor returns a boolean if a field has been set.
func (o *ProcessorDiagnosticsDTO) HasProcessor() bool {
	if o != nil && !IsNil(o.Processor) {
		return true
	}

	return false
}

// SetProcessor gets a reference to the given ProcessorDTO and assigns it to the Processor field.
func (o *ProcessorDiagnosticsDTO) SetProcessor(v ProcessorDTO) {
	o.Processor = &v
}

// GetProcessorStatus returns the ProcessorStatus field value if set, zero value otherwise.
func (o *ProcessorDiagnosticsDTO) GetProcessorStatus() ProcessorStatusDTO {
	if o == nil || IsNil(o.ProcessorStatus) {
		var ret ProcessorStatusDTO
		return ret
	}
	return *o.ProcessorStatus
}

// GetProcessorStatusOk returns a tuple with the ProcessorStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessorDiagnosticsDTO) GetProcessorStatusOk() (*ProcessorStatusDTO, bool) {
	if o == nil || IsNil(o.ProcessorStatus) {
		return nil, false
	}
	return o.ProcessorStatus, true
}

// HasProcessorStatus returns a boolean if a field has been set.
func (o *ProcessorDiagnosticsDTO) HasProcessorStatus() bool {
	if o != nil && !IsNil(o.ProcessorStatus) {
		return true
	}

	return false
}

// SetProcessorStatus gets a reference to the given ProcessorStatusDTO and assigns it to the ProcessorStatus field.
func (o *ProcessorDiagnosticsDTO) SetProcessorStatus(v ProcessorStatusDTO) {
	o.ProcessorStatus = &v
}

// GetReferencedControllerServices returns the ReferencedControllerServices field value if set, zero value otherwise.
func (o *ProcessorDiagnosticsDTO) GetReferencedControllerServices() []ControllerServiceDiagnosticsDTO {
	if o == nil || IsNil(o.ReferencedControllerServices) {
		var ret []ControllerServiceDiagnosticsDTO
		return ret
	}
	return o.ReferencedControllerServices
}

// GetReferencedControllerServicesOk returns a tuple with the ReferencedControllerServices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessorDiagnosticsDTO) GetReferencedControllerServicesOk() ([]ControllerServiceDiagnosticsDTO, bool) {
	if o == nil || IsNil(o.ReferencedControllerServices) {
		return nil, false
	}
	return o.ReferencedControllerServices, true
}

// HasReferencedControllerServices returns a boolean if a field has been set.
func (o *ProcessorDiagnosticsDTO) HasReferencedControllerServices() bool {
	if o != nil && !IsNil(o.ReferencedControllerServices) {
		return true
	}

	return false
}

// SetReferencedControllerServices gets a reference to the given []ControllerServiceDiagnosticsDTO and assigns it to the ReferencedControllerServices field.
func (o *ProcessorDiagnosticsDTO) SetReferencedControllerServices(v []ControllerServiceDiagnosticsDTO) {
	o.ReferencedControllerServices = v
}

// GetIncomingConnections returns the IncomingConnections field value if set, zero value otherwise.
func (o *ProcessorDiagnosticsDTO) GetIncomingConnections() []ConnectionDiagnosticsDTO {
	if o == nil || IsNil(o.IncomingConnections) {
		var ret []ConnectionDiagnosticsDTO
		return ret
	}
	return o.IncomingConnections
}

// GetIncomingConnectionsOk returns a tuple with the IncomingConnections field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessorDiagnosticsDTO) GetIncomingConnectionsOk() ([]ConnectionDiagnosticsDTO, bool) {
	if o == nil || IsNil(o.IncomingConnections) {
		return nil, false
	}
	return o.IncomingConnections, true
}

// HasIncomingConnections returns a boolean if a field has been set.
func (o *ProcessorDiagnosticsDTO) HasIncomingConnections() bool {
	if o != nil && !IsNil(o.IncomingConnections) {
		return true
	}

	return false
}

// SetIncomingConnections gets a reference to the given []ConnectionDiagnosticsDTO and assigns it to the IncomingConnections field.
func (o *ProcessorDiagnosticsDTO) SetIncomingConnections(v []ConnectionDiagnosticsDTO) {
	o.IncomingConnections = v
}

// GetOutgoingConnections returns the OutgoingConnections field value if set, zero value otherwise.
func (o *ProcessorDiagnosticsDTO) GetOutgoingConnections() []ConnectionDiagnosticsDTO {
	if o == nil || IsNil(o.OutgoingConnections) {
		var ret []ConnectionDiagnosticsDTO
		return ret
	}
	return o.OutgoingConnections
}

// GetOutgoingConnectionsOk returns a tuple with the OutgoingConnections field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessorDiagnosticsDTO) GetOutgoingConnectionsOk() ([]ConnectionDiagnosticsDTO, bool) {
	if o == nil || IsNil(o.OutgoingConnections) {
		return nil, false
	}
	return o.OutgoingConnections, true
}

// HasOutgoingConnections returns a boolean if a field has been set.
func (o *ProcessorDiagnosticsDTO) HasOutgoingConnections() bool {
	if o != nil && !IsNil(o.OutgoingConnections) {
		return true
	}

	return false
}

// SetOutgoingConnections gets a reference to the given []ConnectionDiagnosticsDTO and assigns it to the OutgoingConnections field.
func (o *ProcessorDiagnosticsDTO) SetOutgoingConnections(v []ConnectionDiagnosticsDTO) {
	o.OutgoingConnections = v
}

// GetJvmDiagnostics returns the JvmDiagnostics field value if set, zero value otherwise.
func (o *ProcessorDiagnosticsDTO) GetJvmDiagnostics() JVMDiagnosticsDTO {
	if o == nil || IsNil(o.JvmDiagnostics) {
		var ret JVMDiagnosticsDTO
		return ret
	}
	return *o.JvmDiagnostics
}

// GetJvmDiagnosticsOk returns a tuple with the JvmDiagnostics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessorDiagnosticsDTO) GetJvmDiagnosticsOk() (*JVMDiagnosticsDTO, bool) {
	if o == nil || IsNil(o.JvmDiagnostics) {
		return nil, false
	}
	return o.JvmDiagnostics, true
}

// HasJvmDiagnostics returns a boolean if a field has been set.
func (o *ProcessorDiagnosticsDTO) HasJvmDiagnostics() bool {
	if o != nil && !IsNil(o.JvmDiagnostics) {
		return true
	}

	return false
}

// SetJvmDiagnostics gets a reference to the given JVMDiagnosticsDTO and assigns it to the JvmDiagnostics field.
func (o *ProcessorDiagnosticsDTO) SetJvmDiagnostics(v JVMDiagnosticsDTO) {
	o.JvmDiagnostics = &v
}

// GetThreadDumps returns the ThreadDumps field value if set, zero value otherwise.
func (o *ProcessorDiagnosticsDTO) GetThreadDumps() []ThreadDumpDTO {
	if o == nil || IsNil(o.ThreadDumps) {
		var ret []ThreadDumpDTO
		return ret
	}
	return o.ThreadDumps
}

// GetThreadDumpsOk returns a tuple with the ThreadDumps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessorDiagnosticsDTO) GetThreadDumpsOk() ([]ThreadDumpDTO, bool) {
	if o == nil || IsNil(o.ThreadDumps) {
		return nil, false
	}
	return o.ThreadDumps, true
}

// HasThreadDumps returns a boolean if a field has been set.
func (o *ProcessorDiagnosticsDTO) HasThreadDumps() bool {
	if o != nil && !IsNil(o.ThreadDumps) {
		return true
	}

	return false
}

// SetThreadDumps gets a reference to the given []ThreadDumpDTO and assigns it to the ThreadDumps field.
func (o *ProcessorDiagnosticsDTO) SetThreadDumps(v []ThreadDumpDTO) {
	o.ThreadDumps = v
}

// GetClassLoaderDiagnostics returns the ClassLoaderDiagnostics field value if set, zero value otherwise.
func (o *ProcessorDiagnosticsDTO) GetClassLoaderDiagnostics() ClassLoaderDiagnosticsDTO {
	if o == nil || IsNil(o.ClassLoaderDiagnostics) {
		var ret ClassLoaderDiagnosticsDTO
		return ret
	}
	return *o.ClassLoaderDiagnostics
}

// GetClassLoaderDiagnosticsOk returns a tuple with the ClassLoaderDiagnostics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessorDiagnosticsDTO) GetClassLoaderDiagnosticsOk() (*ClassLoaderDiagnosticsDTO, bool) {
	if o == nil || IsNil(o.ClassLoaderDiagnostics) {
		return nil, false
	}
	return o.ClassLoaderDiagnostics, true
}

// HasClassLoaderDiagnostics returns a boolean if a field has been set.
func (o *ProcessorDiagnosticsDTO) HasClassLoaderDiagnostics() bool {
	if o != nil && !IsNil(o.ClassLoaderDiagnostics) {
		return true
	}

	return false
}

// SetClassLoaderDiagnostics gets a reference to the given ClassLoaderDiagnosticsDTO and assigns it to the ClassLoaderDiagnostics field.
func (o *ProcessorDiagnosticsDTO) SetClassLoaderDiagnostics(v ClassLoaderDiagnosticsDTO) {
	o.ClassLoaderDiagnostics = &v
}

func (o ProcessorDiagnosticsDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProcessorDiagnosticsDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Processor) {
		toSerialize["processor"] = o.Processor
	}
	if !IsNil(o.ProcessorStatus) {
		toSerialize["processorStatus"] = o.ProcessorStatus
	}
	if !IsNil(o.ReferencedControllerServices) {
		toSerialize["referencedControllerServices"] = o.ReferencedControllerServices
	}
	if !IsNil(o.IncomingConnections) {
		toSerialize["incomingConnections"] = o.IncomingConnections
	}
	if !IsNil(o.OutgoingConnections) {
		toSerialize["outgoingConnections"] = o.OutgoingConnections
	}
	if !IsNil(o.JvmDiagnostics) {
		toSerialize["jvmDiagnostics"] = o.JvmDiagnostics
	}
	if !IsNil(o.ThreadDumps) {
		toSerialize["threadDumps"] = o.ThreadDumps
	}
	if !IsNil(o.ClassLoaderDiagnostics) {
		toSerialize["classLoaderDiagnostics"] = o.ClassLoaderDiagnostics
	}
	return toSerialize, nil
}

type NullableProcessorDiagnosticsDTO struct {
	value *ProcessorDiagnosticsDTO
	isSet bool
}

func (v NullableProcessorDiagnosticsDTO) Get() *ProcessorDiagnosticsDTO {
	return v.value
}

func (v *NullableProcessorDiagnosticsDTO) Set(val *ProcessorDiagnosticsDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableProcessorDiagnosticsDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableProcessorDiagnosticsDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProcessorDiagnosticsDTO(val *ProcessorDiagnosticsDTO) *NullableProcessorDiagnosticsDTO {
	return &NullableProcessorDiagnosticsDTO{value: val, isSet: true}
}

func (v NullableProcessorDiagnosticsDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProcessorDiagnosticsDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


