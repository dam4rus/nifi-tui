/*
NiFi Rest API

The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.

API version: 2.0.0
Contact: dev@nifi.apache.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nifiapi

import (
	"encoding/json"
)

// checks if the ClassLoaderDiagnosticsDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClassLoaderDiagnosticsDTO{}

// ClassLoaderDiagnosticsDTO struct for ClassLoaderDiagnosticsDTO
type ClassLoaderDiagnosticsDTO struct {
	Bundle *BundleDTO `json:"bundle,omitempty"`
	ParentClassLoader *ClassLoaderDiagnosticsDTO `json:"parentClassLoader,omitempty"`
}

// NewClassLoaderDiagnosticsDTO instantiates a new ClassLoaderDiagnosticsDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClassLoaderDiagnosticsDTO() *ClassLoaderDiagnosticsDTO {
	this := ClassLoaderDiagnosticsDTO{}
	return &this
}

// NewClassLoaderDiagnosticsDTOWithDefaults instantiates a new ClassLoaderDiagnosticsDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClassLoaderDiagnosticsDTOWithDefaults() *ClassLoaderDiagnosticsDTO {
	this := ClassLoaderDiagnosticsDTO{}
	return &this
}

// GetBundle returns the Bundle field value if set, zero value otherwise.
func (o *ClassLoaderDiagnosticsDTO) GetBundle() BundleDTO {
	if o == nil || IsNil(o.Bundle) {
		var ret BundleDTO
		return ret
	}
	return *o.Bundle
}

// GetBundleOk returns a tuple with the Bundle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClassLoaderDiagnosticsDTO) GetBundleOk() (*BundleDTO, bool) {
	if o == nil || IsNil(o.Bundle) {
		return nil, false
	}
	return o.Bundle, true
}

// HasBundle returns a boolean if a field has been set.
func (o *ClassLoaderDiagnosticsDTO) HasBundle() bool {
	if o != nil && !IsNil(o.Bundle) {
		return true
	}

	return false
}

// SetBundle gets a reference to the given BundleDTO and assigns it to the Bundle field.
func (o *ClassLoaderDiagnosticsDTO) SetBundle(v BundleDTO) {
	o.Bundle = &v
}

// GetParentClassLoader returns the ParentClassLoader field value if set, zero value otherwise.
func (o *ClassLoaderDiagnosticsDTO) GetParentClassLoader() ClassLoaderDiagnosticsDTO {
	if o == nil || IsNil(o.ParentClassLoader) {
		var ret ClassLoaderDiagnosticsDTO
		return ret
	}
	return *o.ParentClassLoader
}

// GetParentClassLoaderOk returns a tuple with the ParentClassLoader field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClassLoaderDiagnosticsDTO) GetParentClassLoaderOk() (*ClassLoaderDiagnosticsDTO, bool) {
	if o == nil || IsNil(o.ParentClassLoader) {
		return nil, false
	}
	return o.ParentClassLoader, true
}

// HasParentClassLoader returns a boolean if a field has been set.
func (o *ClassLoaderDiagnosticsDTO) HasParentClassLoader() bool {
	if o != nil && !IsNil(o.ParentClassLoader) {
		return true
	}

	return false
}

// SetParentClassLoader gets a reference to the given ClassLoaderDiagnosticsDTO and assigns it to the ParentClassLoader field.
func (o *ClassLoaderDiagnosticsDTO) SetParentClassLoader(v ClassLoaderDiagnosticsDTO) {
	o.ParentClassLoader = &v
}

func (o ClassLoaderDiagnosticsDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClassLoaderDiagnosticsDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Bundle) {
		toSerialize["bundle"] = o.Bundle
	}
	if !IsNil(o.ParentClassLoader) {
		toSerialize["parentClassLoader"] = o.ParentClassLoader
	}
	return toSerialize, nil
}

type NullableClassLoaderDiagnosticsDTO struct {
	value *ClassLoaderDiagnosticsDTO
	isSet bool
}

func (v NullableClassLoaderDiagnosticsDTO) Get() *ClassLoaderDiagnosticsDTO {
	return v.value
}

func (v *NullableClassLoaderDiagnosticsDTO) Set(val *ClassLoaderDiagnosticsDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableClassLoaderDiagnosticsDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableClassLoaderDiagnosticsDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClassLoaderDiagnosticsDTO(val *ClassLoaderDiagnosticsDTO) *NullableClassLoaderDiagnosticsDTO {
	return &NullableClassLoaderDiagnosticsDTO{value: val, isSet: true}
}

func (v NullableClassLoaderDiagnosticsDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClassLoaderDiagnosticsDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


