/*
NiFi Rest API

The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.

API version: 2.0.0
Contact: dev@nifi.apache.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nifiapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// SystemDiagnosticsAPIService SystemDiagnosticsAPI service
type SystemDiagnosticsAPIService service

type SystemDiagnosticsAPIGetJmxMetricsRequest struct {
	ctx context.Context
	ApiService *SystemDiagnosticsAPIService
	beanNameFilter *string
}

// Regular Expression Pattern to be applied against the ObjectName
func (r SystemDiagnosticsAPIGetJmxMetricsRequest) BeanNameFilter(beanNameFilter string) SystemDiagnosticsAPIGetJmxMetricsRequest {
	r.beanNameFilter = &beanNameFilter
	return r
}

func (r SystemDiagnosticsAPIGetJmxMetricsRequest) Execute() (*JmxMetricsResultsEntity, *http.Response, error) {
	return r.ApiService.GetJmxMetricsExecute(r)
}

/*
GetJmxMetrics Retrieve available JMX metrics

Note: This endpoint is subject to change as NiFi and it's REST API evolve.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return SystemDiagnosticsAPIGetJmxMetricsRequest
*/
func (a *SystemDiagnosticsAPIService) GetJmxMetrics(ctx context.Context) SystemDiagnosticsAPIGetJmxMetricsRequest {
	return SystemDiagnosticsAPIGetJmxMetricsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return JmxMetricsResultsEntity
func (a *SystemDiagnosticsAPIService) GetJmxMetricsExecute(r SystemDiagnosticsAPIGetJmxMetricsRequest) (*JmxMetricsResultsEntity, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *JmxMetricsResultsEntity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SystemDiagnosticsAPIService.GetJmxMetrics")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system-diagnostics/jmx-metrics"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.beanNameFilter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "beanNameFilter", r.beanNameFilter, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SystemDiagnosticsAPIGetSystemDiagnosticsRequest struct {
	ctx context.Context
	ApiService *SystemDiagnosticsAPIService
	nodewise *bool
	clusterNodeId *string
}

// Whether or not to include the breakdown per node. Optional, defaults to false
func (r SystemDiagnosticsAPIGetSystemDiagnosticsRequest) Nodewise(nodewise bool) SystemDiagnosticsAPIGetSystemDiagnosticsRequest {
	r.nodewise = &nodewise
	return r
}

// The id of the node where to get the status.
func (r SystemDiagnosticsAPIGetSystemDiagnosticsRequest) ClusterNodeId(clusterNodeId string) SystemDiagnosticsAPIGetSystemDiagnosticsRequest {
	r.clusterNodeId = &clusterNodeId
	return r
}

func (r SystemDiagnosticsAPIGetSystemDiagnosticsRequest) Execute() (*SystemDiagnosticsEntity, *http.Response, error) {
	return r.ApiService.GetSystemDiagnosticsExecute(r)
}

/*
GetSystemDiagnostics Gets the diagnostics for the system NiFi is running on

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return SystemDiagnosticsAPIGetSystemDiagnosticsRequest
*/
func (a *SystemDiagnosticsAPIService) GetSystemDiagnostics(ctx context.Context) SystemDiagnosticsAPIGetSystemDiagnosticsRequest {
	return SystemDiagnosticsAPIGetSystemDiagnosticsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SystemDiagnosticsEntity
func (a *SystemDiagnosticsAPIService) GetSystemDiagnosticsExecute(r SystemDiagnosticsAPIGetSystemDiagnosticsRequest) (*SystemDiagnosticsEntity, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SystemDiagnosticsEntity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SystemDiagnosticsAPIService.GetSystemDiagnostics")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system-diagnostics"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.nodewise != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "nodewise", r.nodewise, "")
	}
	if r.clusterNodeId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "clusterNodeId", r.clusterNodeId, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
