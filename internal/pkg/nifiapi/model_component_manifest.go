/*
NiFi Rest API

The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.

API version: 2.0.0
Contact: dev@nifi.apache.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nifiapi

import (
	"encoding/json"
)

// checks if the ComponentManifest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ComponentManifest{}

// ComponentManifest struct for ComponentManifest
type ComponentManifest struct {
	// Public interfaces defined in this bundle
	Apis []DefinedType `json:"apis,omitempty"`
	// Controller Services provided in this bundle
	ControllerServices []ControllerServiceDefinition `json:"controllerServices,omitempty"`
	// Processors provided in this bundle
	Processors []ProcessorDefinition `json:"processors,omitempty"`
	// Reporting Tasks provided in this bundle
	ReportingTasks []ReportingTaskDefinition `json:"reportingTasks,omitempty"`
}

// NewComponentManifest instantiates a new ComponentManifest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComponentManifest() *ComponentManifest {
	this := ComponentManifest{}
	return &this
}

// NewComponentManifestWithDefaults instantiates a new ComponentManifest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewComponentManifestWithDefaults() *ComponentManifest {
	this := ComponentManifest{}
	return &this
}

// GetApis returns the Apis field value if set, zero value otherwise.
func (o *ComponentManifest) GetApis() []DefinedType {
	if o == nil || IsNil(o.Apis) {
		var ret []DefinedType
		return ret
	}
	return o.Apis
}

// GetApisOk returns a tuple with the Apis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentManifest) GetApisOk() ([]DefinedType, bool) {
	if o == nil || IsNil(o.Apis) {
		return nil, false
	}
	return o.Apis, true
}

// HasApis returns a boolean if a field has been set.
func (o *ComponentManifest) HasApis() bool {
	if o != nil && !IsNil(o.Apis) {
		return true
	}

	return false
}

// SetApis gets a reference to the given []DefinedType and assigns it to the Apis field.
func (o *ComponentManifest) SetApis(v []DefinedType) {
	o.Apis = v
}

// GetControllerServices returns the ControllerServices field value if set, zero value otherwise.
func (o *ComponentManifest) GetControllerServices() []ControllerServiceDefinition {
	if o == nil || IsNil(o.ControllerServices) {
		var ret []ControllerServiceDefinition
		return ret
	}
	return o.ControllerServices
}

// GetControllerServicesOk returns a tuple with the ControllerServices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentManifest) GetControllerServicesOk() ([]ControllerServiceDefinition, bool) {
	if o == nil || IsNil(o.ControllerServices) {
		return nil, false
	}
	return o.ControllerServices, true
}

// HasControllerServices returns a boolean if a field has been set.
func (o *ComponentManifest) HasControllerServices() bool {
	if o != nil && !IsNil(o.ControllerServices) {
		return true
	}

	return false
}

// SetControllerServices gets a reference to the given []ControllerServiceDefinition and assigns it to the ControllerServices field.
func (o *ComponentManifest) SetControllerServices(v []ControllerServiceDefinition) {
	o.ControllerServices = v
}

// GetProcessors returns the Processors field value if set, zero value otherwise.
func (o *ComponentManifest) GetProcessors() []ProcessorDefinition {
	if o == nil || IsNil(o.Processors) {
		var ret []ProcessorDefinition
		return ret
	}
	return o.Processors
}

// GetProcessorsOk returns a tuple with the Processors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentManifest) GetProcessorsOk() ([]ProcessorDefinition, bool) {
	if o == nil || IsNil(o.Processors) {
		return nil, false
	}
	return o.Processors, true
}

// HasProcessors returns a boolean if a field has been set.
func (o *ComponentManifest) HasProcessors() bool {
	if o != nil && !IsNil(o.Processors) {
		return true
	}

	return false
}

// SetProcessors gets a reference to the given []ProcessorDefinition and assigns it to the Processors field.
func (o *ComponentManifest) SetProcessors(v []ProcessorDefinition) {
	o.Processors = v
}

// GetReportingTasks returns the ReportingTasks field value if set, zero value otherwise.
func (o *ComponentManifest) GetReportingTasks() []ReportingTaskDefinition {
	if o == nil || IsNil(o.ReportingTasks) {
		var ret []ReportingTaskDefinition
		return ret
	}
	return o.ReportingTasks
}

// GetReportingTasksOk returns a tuple with the ReportingTasks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentManifest) GetReportingTasksOk() ([]ReportingTaskDefinition, bool) {
	if o == nil || IsNil(o.ReportingTasks) {
		return nil, false
	}
	return o.ReportingTasks, true
}

// HasReportingTasks returns a boolean if a field has been set.
func (o *ComponentManifest) HasReportingTasks() bool {
	if o != nil && !IsNil(o.ReportingTasks) {
		return true
	}

	return false
}

// SetReportingTasks gets a reference to the given []ReportingTaskDefinition and assigns it to the ReportingTasks field.
func (o *ComponentManifest) SetReportingTasks(v []ReportingTaskDefinition) {
	o.ReportingTasks = v
}

func (o ComponentManifest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ComponentManifest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Apis) {
		toSerialize["apis"] = o.Apis
	}
	if !IsNil(o.ControllerServices) {
		toSerialize["controllerServices"] = o.ControllerServices
	}
	if !IsNil(o.Processors) {
		toSerialize["processors"] = o.Processors
	}
	if !IsNil(o.ReportingTasks) {
		toSerialize["reportingTasks"] = o.ReportingTasks
	}
	return toSerialize, nil
}

type NullableComponentManifest struct {
	value *ComponentManifest
	isSet bool
}

func (v NullableComponentManifest) Get() *ComponentManifest {
	return v.value
}

func (v *NullableComponentManifest) Set(val *ComponentManifest) {
	v.value = val
	v.isSet = true
}

func (v NullableComponentManifest) IsSet() bool {
	return v.isSet
}

func (v *NullableComponentManifest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComponentManifest(val *ComponentManifest) *NullableComponentManifest {
	return &NullableComponentManifest{value: val, isSet: true}
}

func (v NullableComponentManifest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComponentManifest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


