/*
NiFi Rest API

The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.

API version: 2.0.0
Contact: dev@nifi.apache.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nifiapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// DataTransferAPIService DataTransferAPI service
type DataTransferAPIService service

type DataTransferAPICommitInputPortTransactionRequest struct {
	ctx context.Context
	ApiService *DataTransferAPIService
	responseCode *int32
	portId string
	transactionId string
}

// The response code. Available values are BAD_CHECKSUM(19), CONFIRM_TRANSACTION(12) or CANCEL_TRANSACTION(15).
func (r DataTransferAPICommitInputPortTransactionRequest) ResponseCode(responseCode int32) DataTransferAPICommitInputPortTransactionRequest {
	r.responseCode = &responseCode
	return r
}

func (r DataTransferAPICommitInputPortTransactionRequest) Execute() (*TransactionResultEntity, *http.Response, error) {
	return r.ApiService.CommitInputPortTransactionExecute(r)
}

/*
CommitInputPortTransaction Commit or cancel the specified transaction

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param portId The input port id.
 @param transactionId The transaction id.
 @return DataTransferAPICommitInputPortTransactionRequest
*/
func (a *DataTransferAPIService) CommitInputPortTransaction(ctx context.Context, portId string, transactionId string) DataTransferAPICommitInputPortTransactionRequest {
	return DataTransferAPICommitInputPortTransactionRequest{
		ApiService: a,
		ctx: ctx,
		portId: portId,
		transactionId: transactionId,
	}
}

// Execute executes the request
//  @return TransactionResultEntity
func (a *DataTransferAPIService) CommitInputPortTransactionExecute(r DataTransferAPICommitInputPortTransactionRequest) (*TransactionResultEntity, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TransactionResultEntity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataTransferAPIService.CommitInputPortTransaction")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/data-transfer/input-ports/{portId}/transactions/{transactionId}"
	localVarPath = strings.Replace(localVarPath, "{"+"portId"+"}", url.PathEscape(parameterValueToString(r.portId, "portId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"transactionId"+"}", url.PathEscape(parameterValueToString(r.transactionId, "transactionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.responseCode == nil {
		return localVarReturnValue, nil, reportError("responseCode is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "responseCode", r.responseCode, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DataTransferAPICommitOutputPortTransactionRequest struct {
	ctx context.Context
	ApiService *DataTransferAPIService
	responseCode *int32
	checksum *string
	portId string
	transactionId string
}

// The response code. Available values are CONFIRM_TRANSACTION(12) or CANCEL_TRANSACTION(15).
func (r DataTransferAPICommitOutputPortTransactionRequest) ResponseCode(responseCode int32) DataTransferAPICommitOutputPortTransactionRequest {
	r.responseCode = &responseCode
	return r
}

// A checksum calculated at client side using CRC32 to check flow file content integrity. It must match with the value calculated at server side.
func (r DataTransferAPICommitOutputPortTransactionRequest) Checksum(checksum string) DataTransferAPICommitOutputPortTransactionRequest {
	r.checksum = &checksum
	return r
}

func (r DataTransferAPICommitOutputPortTransactionRequest) Execute() (*TransactionResultEntity, *http.Response, error) {
	return r.ApiService.CommitOutputPortTransactionExecute(r)
}

/*
CommitOutputPortTransaction Commit or cancel the specified transaction

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param portId The output port id.
 @param transactionId The transaction id.
 @return DataTransferAPICommitOutputPortTransactionRequest
*/
func (a *DataTransferAPIService) CommitOutputPortTransaction(ctx context.Context, portId string, transactionId string) DataTransferAPICommitOutputPortTransactionRequest {
	return DataTransferAPICommitOutputPortTransactionRequest{
		ApiService: a,
		ctx: ctx,
		portId: portId,
		transactionId: transactionId,
	}
}

// Execute executes the request
//  @return TransactionResultEntity
func (a *DataTransferAPIService) CommitOutputPortTransactionExecute(r DataTransferAPICommitOutputPortTransactionRequest) (*TransactionResultEntity, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TransactionResultEntity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataTransferAPIService.CommitOutputPortTransaction")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/data-transfer/output-ports/{portId}/transactions/{transactionId}"
	localVarPath = strings.Replace(localVarPath, "{"+"portId"+"}", url.PathEscape(parameterValueToString(r.portId, "portId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"transactionId"+"}", url.PathEscape(parameterValueToString(r.transactionId, "transactionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.responseCode == nil {
		return localVarReturnValue, nil, reportError("responseCode is required and must be specified")
	}
	if r.checksum == nil {
		return localVarReturnValue, nil, reportError("checksum is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "responseCode", r.responseCode, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "checksum", r.checksum, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DataTransferAPICreatePortTransactionRequest struct {
	ctx context.Context
	ApiService *DataTransferAPIService
	portType string
	portId string
}

func (r DataTransferAPICreatePortTransactionRequest) Execute() (*TransactionResultEntity, *http.Response, error) {
	return r.ApiService.CreatePortTransactionExecute(r)
}

/*
CreatePortTransaction Create a transaction to the specified output port or input port

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param portType The port type.
 @param portId
 @return DataTransferAPICreatePortTransactionRequest
*/
func (a *DataTransferAPIService) CreatePortTransaction(ctx context.Context, portType string, portId string) DataTransferAPICreatePortTransactionRequest {
	return DataTransferAPICreatePortTransactionRequest{
		ApiService: a,
		ctx: ctx,
		portType: portType,
		portId: portId,
	}
}

// Execute executes the request
//  @return TransactionResultEntity
func (a *DataTransferAPIService) CreatePortTransactionExecute(r DataTransferAPICreatePortTransactionRequest) (*TransactionResultEntity, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TransactionResultEntity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataTransferAPIService.CreatePortTransaction")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/data-transfer/{portType}/{portId}/transactions"
	localVarPath = strings.Replace(localVarPath, "{"+"portType"+"}", url.PathEscape(parameterValueToString(r.portType, "portType")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"portId"+"}", url.PathEscape(parameterValueToString(r.portId, "portId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DataTransferAPIExtendInputPortTransactionTTLRequest struct {
	ctx context.Context
	ApiService *DataTransferAPIService
	portId string
	transactionId string
}

func (r DataTransferAPIExtendInputPortTransactionTTLRequest) Execute() (*TransactionResultEntity, *http.Response, error) {
	return r.ApiService.ExtendInputPortTransactionTTLExecute(r)
}

/*
ExtendInputPortTransactionTTL Extend transaction TTL

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param portId
 @param transactionId
 @return DataTransferAPIExtendInputPortTransactionTTLRequest
*/
func (a *DataTransferAPIService) ExtendInputPortTransactionTTL(ctx context.Context, portId string, transactionId string) DataTransferAPIExtendInputPortTransactionTTLRequest {
	return DataTransferAPIExtendInputPortTransactionTTLRequest{
		ApiService: a,
		ctx: ctx,
		portId: portId,
		transactionId: transactionId,
	}
}

// Execute executes the request
//  @return TransactionResultEntity
func (a *DataTransferAPIService) ExtendInputPortTransactionTTLExecute(r DataTransferAPIExtendInputPortTransactionTTLRequest) (*TransactionResultEntity, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TransactionResultEntity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataTransferAPIService.ExtendInputPortTransactionTTL")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/data-transfer/input-ports/{portId}/transactions/{transactionId}"
	localVarPath = strings.Replace(localVarPath, "{"+"portId"+"}", url.PathEscape(parameterValueToString(r.portId, "portId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"transactionId"+"}", url.PathEscape(parameterValueToString(r.transactionId, "transactionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DataTransferAPIExtendOutputPortTransactionTTLRequest struct {
	ctx context.Context
	ApiService *DataTransferAPIService
	portId string
	transactionId string
}

func (r DataTransferAPIExtendOutputPortTransactionTTLRequest) Execute() (*TransactionResultEntity, *http.Response, error) {
	return r.ApiService.ExtendOutputPortTransactionTTLExecute(r)
}

/*
ExtendOutputPortTransactionTTL Extend transaction TTL

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param portId
 @param transactionId
 @return DataTransferAPIExtendOutputPortTransactionTTLRequest
*/
func (a *DataTransferAPIService) ExtendOutputPortTransactionTTL(ctx context.Context, portId string, transactionId string) DataTransferAPIExtendOutputPortTransactionTTLRequest {
	return DataTransferAPIExtendOutputPortTransactionTTLRequest{
		ApiService: a,
		ctx: ctx,
		portId: portId,
		transactionId: transactionId,
	}
}

// Execute executes the request
//  @return TransactionResultEntity
func (a *DataTransferAPIService) ExtendOutputPortTransactionTTLExecute(r DataTransferAPIExtendOutputPortTransactionTTLRequest) (*TransactionResultEntity, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TransactionResultEntity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataTransferAPIService.ExtendOutputPortTransactionTTL")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/data-transfer/output-ports/{portId}/transactions/{transactionId}"
	localVarPath = strings.Replace(localVarPath, "{"+"portId"+"}", url.PathEscape(parameterValueToString(r.portId, "portId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"transactionId"+"}", url.PathEscape(parameterValueToString(r.transactionId, "transactionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DataTransferAPIReceiveFlowFilesRequest struct {
	ctx context.Context
	ApiService *DataTransferAPIService
	portId string
	transactionId string
}

func (r DataTransferAPIReceiveFlowFilesRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.ReceiveFlowFilesExecute(r)
}

/*
ReceiveFlowFiles Transfer flow files to the input port

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param portId The input port id.
 @param transactionId
 @return DataTransferAPIReceiveFlowFilesRequest
*/
func (a *DataTransferAPIService) ReceiveFlowFiles(ctx context.Context, portId string, transactionId string) DataTransferAPIReceiveFlowFilesRequest {
	return DataTransferAPIReceiveFlowFilesRequest{
		ApiService: a,
		ctx: ctx,
		portId: portId,
		transactionId: transactionId,
	}
}

// Execute executes the request
//  @return string
func (a *DataTransferAPIService) ReceiveFlowFilesExecute(r DataTransferAPIReceiveFlowFilesRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataTransferAPIService.ReceiveFlowFiles")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/data-transfer/input-ports/{portId}/transactions/{transactionId}/flow-files"
	localVarPath = strings.Replace(localVarPath, "{"+"portId"+"}", url.PathEscape(parameterValueToString(r.portId, "portId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"transactionId"+"}", url.PathEscape(parameterValueToString(r.transactionId, "transactionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DataTransferAPITransferFlowFilesRequest struct {
	ctx context.Context
	ApiService *DataTransferAPIService
	portId string
	transactionId string
}

func (r DataTransferAPITransferFlowFilesRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.TransferFlowFilesExecute(r)
}

/*
TransferFlowFiles Transfer flow files from the output port

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param portId The output port id.
 @param transactionId
 @return DataTransferAPITransferFlowFilesRequest
*/
func (a *DataTransferAPIService) TransferFlowFiles(ctx context.Context, portId string, transactionId string) DataTransferAPITransferFlowFilesRequest {
	return DataTransferAPITransferFlowFilesRequest{
		ApiService: a,
		ctx: ctx,
		portId: portId,
		transactionId: transactionId,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *DataTransferAPIService) TransferFlowFilesExecute(r DataTransferAPITransferFlowFilesRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataTransferAPIService.TransferFlowFiles")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/data-transfer/output-ports/{portId}/transactions/{transactionId}/flow-files"
	localVarPath = strings.Replace(localVarPath, "{"+"portId"+"}", url.PathEscape(parameterValueToString(r.portId, "portId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"transactionId"+"}", url.PathEscape(parameterValueToString(r.transactionId, "transactionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/octet-stream"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
