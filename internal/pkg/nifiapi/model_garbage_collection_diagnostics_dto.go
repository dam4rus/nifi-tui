/*
NiFi Rest API

The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.

API version: 2.0.0
Contact: dev@nifi.apache.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nifiapi

import (
	"encoding/json"
)

// checks if the GarbageCollectionDiagnosticsDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GarbageCollectionDiagnosticsDTO{}

// GarbageCollectionDiagnosticsDTO struct for GarbageCollectionDiagnosticsDTO
type GarbageCollectionDiagnosticsDTO struct {
	// The name of the Memory Manager that this Garbage Collection information pertains to
	MemoryManagerName *string `json:"memoryManagerName,omitempty"`
	// A list of snapshots that have been taken to determine the health of the JVM's heap
	Snapshots []GCDiagnosticsSnapshotDTO `json:"snapshots,omitempty"`
}

// NewGarbageCollectionDiagnosticsDTO instantiates a new GarbageCollectionDiagnosticsDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGarbageCollectionDiagnosticsDTO() *GarbageCollectionDiagnosticsDTO {
	this := GarbageCollectionDiagnosticsDTO{}
	return &this
}

// NewGarbageCollectionDiagnosticsDTOWithDefaults instantiates a new GarbageCollectionDiagnosticsDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGarbageCollectionDiagnosticsDTOWithDefaults() *GarbageCollectionDiagnosticsDTO {
	this := GarbageCollectionDiagnosticsDTO{}
	return &this
}

// GetMemoryManagerName returns the MemoryManagerName field value if set, zero value otherwise.
func (o *GarbageCollectionDiagnosticsDTO) GetMemoryManagerName() string {
	if o == nil || IsNil(o.MemoryManagerName) {
		var ret string
		return ret
	}
	return *o.MemoryManagerName
}

// GetMemoryManagerNameOk returns a tuple with the MemoryManagerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GarbageCollectionDiagnosticsDTO) GetMemoryManagerNameOk() (*string, bool) {
	if o == nil || IsNil(o.MemoryManagerName) {
		return nil, false
	}
	return o.MemoryManagerName, true
}

// HasMemoryManagerName returns a boolean if a field has been set.
func (o *GarbageCollectionDiagnosticsDTO) HasMemoryManagerName() bool {
	if o != nil && !IsNil(o.MemoryManagerName) {
		return true
	}

	return false
}

// SetMemoryManagerName gets a reference to the given string and assigns it to the MemoryManagerName field.
func (o *GarbageCollectionDiagnosticsDTO) SetMemoryManagerName(v string) {
	o.MemoryManagerName = &v
}

// GetSnapshots returns the Snapshots field value if set, zero value otherwise.
func (o *GarbageCollectionDiagnosticsDTO) GetSnapshots() []GCDiagnosticsSnapshotDTO {
	if o == nil || IsNil(o.Snapshots) {
		var ret []GCDiagnosticsSnapshotDTO
		return ret
	}
	return o.Snapshots
}

// GetSnapshotsOk returns a tuple with the Snapshots field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GarbageCollectionDiagnosticsDTO) GetSnapshotsOk() ([]GCDiagnosticsSnapshotDTO, bool) {
	if o == nil || IsNil(o.Snapshots) {
		return nil, false
	}
	return o.Snapshots, true
}

// HasSnapshots returns a boolean if a field has been set.
func (o *GarbageCollectionDiagnosticsDTO) HasSnapshots() bool {
	if o != nil && !IsNil(o.Snapshots) {
		return true
	}

	return false
}

// SetSnapshots gets a reference to the given []GCDiagnosticsSnapshotDTO and assigns it to the Snapshots field.
func (o *GarbageCollectionDiagnosticsDTO) SetSnapshots(v []GCDiagnosticsSnapshotDTO) {
	o.Snapshots = v
}

func (o GarbageCollectionDiagnosticsDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GarbageCollectionDiagnosticsDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MemoryManagerName) {
		toSerialize["memoryManagerName"] = o.MemoryManagerName
	}
	if !IsNil(o.Snapshots) {
		toSerialize["snapshots"] = o.Snapshots
	}
	return toSerialize, nil
}

type NullableGarbageCollectionDiagnosticsDTO struct {
	value *GarbageCollectionDiagnosticsDTO
	isSet bool
}

func (v NullableGarbageCollectionDiagnosticsDTO) Get() *GarbageCollectionDiagnosticsDTO {
	return v.value
}

func (v *NullableGarbageCollectionDiagnosticsDTO) Set(val *GarbageCollectionDiagnosticsDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableGarbageCollectionDiagnosticsDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableGarbageCollectionDiagnosticsDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGarbageCollectionDiagnosticsDTO(val *GarbageCollectionDiagnosticsDTO) *NullableGarbageCollectionDiagnosticsDTO {
	return &NullableGarbageCollectionDiagnosticsDTO{value: val, isSet: true}
}

func (v NullableGarbageCollectionDiagnosticsDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGarbageCollectionDiagnosticsDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


