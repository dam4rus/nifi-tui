/*
NiFi Rest API

The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.

API version: 2.0.0
Contact: dev@nifi.apache.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nifiapi

import (
	"encoding/json"
)

// checks if the RepositoryUsageDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RepositoryUsageDTO{}

// RepositoryUsageDTO struct for RepositoryUsageDTO
type RepositoryUsageDTO struct {
	// The name of the repository
	Name *string `json:"name,omitempty"`
	// A SHA-256 hash of the File Store name/path that is used to store the repository's data. This information is exposed as a hash in order to avoid exposing potentially sensitive information that is not generally relevant. What is typically relevant is whether or not multiple repositories on the same node are using the same File Store, as this indicates that the repositories are competing for the resources of the backing disk/storage mechanism.
	FileStoreHash *string `json:"fileStoreHash,omitempty"`
	// Amount of free space.
	FreeSpace *string `json:"freeSpace,omitempty"`
	// Amount of total space.
	TotalSpace *string `json:"totalSpace,omitempty"`
	// The number of bytes of free space.
	FreeSpaceBytes *int64 `json:"freeSpaceBytes,omitempty"`
	// The number of bytes of total space.
	TotalSpaceBytes *int64 `json:"totalSpaceBytes,omitempty"`
	// Utilization of this storage location.
	Utilization *string `json:"utilization,omitempty"`
}

// NewRepositoryUsageDTO instantiates a new RepositoryUsageDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRepositoryUsageDTO() *RepositoryUsageDTO {
	this := RepositoryUsageDTO{}
	return &this
}

// NewRepositoryUsageDTOWithDefaults instantiates a new RepositoryUsageDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRepositoryUsageDTOWithDefaults() *RepositoryUsageDTO {
	this := RepositoryUsageDTO{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RepositoryUsageDTO) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryUsageDTO) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RepositoryUsageDTO) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RepositoryUsageDTO) SetName(v string) {
	o.Name = &v
}

// GetFileStoreHash returns the FileStoreHash field value if set, zero value otherwise.
func (o *RepositoryUsageDTO) GetFileStoreHash() string {
	if o == nil || IsNil(o.FileStoreHash) {
		var ret string
		return ret
	}
	return *o.FileStoreHash
}

// GetFileStoreHashOk returns a tuple with the FileStoreHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryUsageDTO) GetFileStoreHashOk() (*string, bool) {
	if o == nil || IsNil(o.FileStoreHash) {
		return nil, false
	}
	return o.FileStoreHash, true
}

// HasFileStoreHash returns a boolean if a field has been set.
func (o *RepositoryUsageDTO) HasFileStoreHash() bool {
	if o != nil && !IsNil(o.FileStoreHash) {
		return true
	}

	return false
}

// SetFileStoreHash gets a reference to the given string and assigns it to the FileStoreHash field.
func (o *RepositoryUsageDTO) SetFileStoreHash(v string) {
	o.FileStoreHash = &v
}

// GetFreeSpace returns the FreeSpace field value if set, zero value otherwise.
func (o *RepositoryUsageDTO) GetFreeSpace() string {
	if o == nil || IsNil(o.FreeSpace) {
		var ret string
		return ret
	}
	return *o.FreeSpace
}

// GetFreeSpaceOk returns a tuple with the FreeSpace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryUsageDTO) GetFreeSpaceOk() (*string, bool) {
	if o == nil || IsNil(o.FreeSpace) {
		return nil, false
	}
	return o.FreeSpace, true
}

// HasFreeSpace returns a boolean if a field has been set.
func (o *RepositoryUsageDTO) HasFreeSpace() bool {
	if o != nil && !IsNil(o.FreeSpace) {
		return true
	}

	return false
}

// SetFreeSpace gets a reference to the given string and assigns it to the FreeSpace field.
func (o *RepositoryUsageDTO) SetFreeSpace(v string) {
	o.FreeSpace = &v
}

// GetTotalSpace returns the TotalSpace field value if set, zero value otherwise.
func (o *RepositoryUsageDTO) GetTotalSpace() string {
	if o == nil || IsNil(o.TotalSpace) {
		var ret string
		return ret
	}
	return *o.TotalSpace
}

// GetTotalSpaceOk returns a tuple with the TotalSpace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryUsageDTO) GetTotalSpaceOk() (*string, bool) {
	if o == nil || IsNil(o.TotalSpace) {
		return nil, false
	}
	return o.TotalSpace, true
}

// HasTotalSpace returns a boolean if a field has been set.
func (o *RepositoryUsageDTO) HasTotalSpace() bool {
	if o != nil && !IsNil(o.TotalSpace) {
		return true
	}

	return false
}

// SetTotalSpace gets a reference to the given string and assigns it to the TotalSpace field.
func (o *RepositoryUsageDTO) SetTotalSpace(v string) {
	o.TotalSpace = &v
}

// GetFreeSpaceBytes returns the FreeSpaceBytes field value if set, zero value otherwise.
func (o *RepositoryUsageDTO) GetFreeSpaceBytes() int64 {
	if o == nil || IsNil(o.FreeSpaceBytes) {
		var ret int64
		return ret
	}
	return *o.FreeSpaceBytes
}

// GetFreeSpaceBytesOk returns a tuple with the FreeSpaceBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryUsageDTO) GetFreeSpaceBytesOk() (*int64, bool) {
	if o == nil || IsNil(o.FreeSpaceBytes) {
		return nil, false
	}
	return o.FreeSpaceBytes, true
}

// HasFreeSpaceBytes returns a boolean if a field has been set.
func (o *RepositoryUsageDTO) HasFreeSpaceBytes() bool {
	if o != nil && !IsNil(o.FreeSpaceBytes) {
		return true
	}

	return false
}

// SetFreeSpaceBytes gets a reference to the given int64 and assigns it to the FreeSpaceBytes field.
func (o *RepositoryUsageDTO) SetFreeSpaceBytes(v int64) {
	o.FreeSpaceBytes = &v
}

// GetTotalSpaceBytes returns the TotalSpaceBytes field value if set, zero value otherwise.
func (o *RepositoryUsageDTO) GetTotalSpaceBytes() int64 {
	if o == nil || IsNil(o.TotalSpaceBytes) {
		var ret int64
		return ret
	}
	return *o.TotalSpaceBytes
}

// GetTotalSpaceBytesOk returns a tuple with the TotalSpaceBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryUsageDTO) GetTotalSpaceBytesOk() (*int64, bool) {
	if o == nil || IsNil(o.TotalSpaceBytes) {
		return nil, false
	}
	return o.TotalSpaceBytes, true
}

// HasTotalSpaceBytes returns a boolean if a field has been set.
func (o *RepositoryUsageDTO) HasTotalSpaceBytes() bool {
	if o != nil && !IsNil(o.TotalSpaceBytes) {
		return true
	}

	return false
}

// SetTotalSpaceBytes gets a reference to the given int64 and assigns it to the TotalSpaceBytes field.
func (o *RepositoryUsageDTO) SetTotalSpaceBytes(v int64) {
	o.TotalSpaceBytes = &v
}

// GetUtilization returns the Utilization field value if set, zero value otherwise.
func (o *RepositoryUsageDTO) GetUtilization() string {
	if o == nil || IsNil(o.Utilization) {
		var ret string
		return ret
	}
	return *o.Utilization
}

// GetUtilizationOk returns a tuple with the Utilization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryUsageDTO) GetUtilizationOk() (*string, bool) {
	if o == nil || IsNil(o.Utilization) {
		return nil, false
	}
	return o.Utilization, true
}

// HasUtilization returns a boolean if a field has been set.
func (o *RepositoryUsageDTO) HasUtilization() bool {
	if o != nil && !IsNil(o.Utilization) {
		return true
	}

	return false
}

// SetUtilization gets a reference to the given string and assigns it to the Utilization field.
func (o *RepositoryUsageDTO) SetUtilization(v string) {
	o.Utilization = &v
}

func (o RepositoryUsageDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RepositoryUsageDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.FileStoreHash) {
		toSerialize["fileStoreHash"] = o.FileStoreHash
	}
	if !IsNil(o.FreeSpace) {
		toSerialize["freeSpace"] = o.FreeSpace
	}
	if !IsNil(o.TotalSpace) {
		toSerialize["totalSpace"] = o.TotalSpace
	}
	if !IsNil(o.FreeSpaceBytes) {
		toSerialize["freeSpaceBytes"] = o.FreeSpaceBytes
	}
	if !IsNil(o.TotalSpaceBytes) {
		toSerialize["totalSpaceBytes"] = o.TotalSpaceBytes
	}
	if !IsNil(o.Utilization) {
		toSerialize["utilization"] = o.Utilization
	}
	return toSerialize, nil
}

type NullableRepositoryUsageDTO struct {
	value *RepositoryUsageDTO
	isSet bool
}

func (v NullableRepositoryUsageDTO) Get() *RepositoryUsageDTO {
	return v.value
}

func (v *NullableRepositoryUsageDTO) Set(val *RepositoryUsageDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableRepositoryUsageDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableRepositoryUsageDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRepositoryUsageDTO(val *RepositoryUsageDTO) *NullableRepositoryUsageDTO {
	return &NullableRepositoryUsageDTO{value: val, isSet: true}
}

func (v NullableRepositoryUsageDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRepositoryUsageDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


