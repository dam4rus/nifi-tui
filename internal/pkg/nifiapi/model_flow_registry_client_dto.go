/*
NiFi Rest API

The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.

API version: 2.0.0
Contact: dev@nifi.apache.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nifiapi

import (
	"encoding/json"
)

// checks if the FlowRegistryClientDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FlowRegistryClientDTO{}

// FlowRegistryClientDTO struct for FlowRegistryClientDTO
type FlowRegistryClientDTO struct {
	// The registry identifier
	Id *string `json:"id,omitempty"`
	// The registry name
	Name *string `json:"name,omitempty"`
	// The registry description
	Description *string `json:"description,omitempty"`
	Uri *string `json:"uri,omitempty"`
	// The type of the controller service.
	Type *string `json:"type,omitempty"`
	Bundle *BundleDTO `json:"bundle,omitempty"`
	// The properties of the controller service.
	Properties *map[string]string `json:"properties,omitempty"`
	// The descriptors for the controller service properties.
	Descriptors *map[string]PropertyDescriptorDTO `json:"descriptors,omitempty"`
	// Set of sensitive dynamic property names
	SensitiveDynamicPropertyNames []string `json:"sensitiveDynamicPropertyNames,omitempty"`
	// Whether the reporting task supports sensitive dynamic properties.
	SupportsSensitiveDynamicProperties *bool `json:"supportsSensitiveDynamicProperties,omitempty"`
	// Whether the reporting task requires elevated privileges.
	Restricted *bool `json:"restricted,omitempty"`
	// Whether the reporting task has been deprecated.
	Deprecated *bool `json:"deprecated,omitempty"`
	// Gets the validation errors from the reporting task. These validation errors represent the problems with the reporting task that must be resolved before it can be scheduled to run.
	ValidationErrors []string `json:"validationErrors,omitempty"`
	// Indicates whether the Processor is valid, invalid, or still in the process of validating (i.e., it is unknown whether or not the Processor is valid)
	ValidationStatus *string `json:"validationStatus,omitempty"`
	// The annotation data for the repoting task. This is how the custom UI relays configuration to the reporting task.
	AnnotationData *string `json:"annotationData,omitempty"`
	// Whether the flow registry client has multiple versions available.
	MultipleVersionsAvailable *bool `json:"multipleVersionsAvailable,omitempty"`
	// Whether the underlying extension is missing.
	ExtensionMissing *bool `json:"extensionMissing,omitempty"`
}

// NewFlowRegistryClientDTO instantiates a new FlowRegistryClientDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFlowRegistryClientDTO() *FlowRegistryClientDTO {
	this := FlowRegistryClientDTO{}
	return &this
}

// NewFlowRegistryClientDTOWithDefaults instantiates a new FlowRegistryClientDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFlowRegistryClientDTOWithDefaults() *FlowRegistryClientDTO {
	this := FlowRegistryClientDTO{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *FlowRegistryClientDTO) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowRegistryClientDTO) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *FlowRegistryClientDTO) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *FlowRegistryClientDTO) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *FlowRegistryClientDTO) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowRegistryClientDTO) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *FlowRegistryClientDTO) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *FlowRegistryClientDTO) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *FlowRegistryClientDTO) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowRegistryClientDTO) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *FlowRegistryClientDTO) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *FlowRegistryClientDTO) SetDescription(v string) {
	o.Description = &v
}

// GetUri returns the Uri field value if set, zero value otherwise.
func (o *FlowRegistryClientDTO) GetUri() string {
	if o == nil || IsNil(o.Uri) {
		var ret string
		return ret
	}
	return *o.Uri
}

// GetUriOk returns a tuple with the Uri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowRegistryClientDTO) GetUriOk() (*string, bool) {
	if o == nil || IsNil(o.Uri) {
		return nil, false
	}
	return o.Uri, true
}

// HasUri returns a boolean if a field has been set.
func (o *FlowRegistryClientDTO) HasUri() bool {
	if o != nil && !IsNil(o.Uri) {
		return true
	}

	return false
}

// SetUri gets a reference to the given string and assigns it to the Uri field.
func (o *FlowRegistryClientDTO) SetUri(v string) {
	o.Uri = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *FlowRegistryClientDTO) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowRegistryClientDTO) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *FlowRegistryClientDTO) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *FlowRegistryClientDTO) SetType(v string) {
	o.Type = &v
}

// GetBundle returns the Bundle field value if set, zero value otherwise.
func (o *FlowRegistryClientDTO) GetBundle() BundleDTO {
	if o == nil || IsNil(o.Bundle) {
		var ret BundleDTO
		return ret
	}
	return *o.Bundle
}

// GetBundleOk returns a tuple with the Bundle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowRegistryClientDTO) GetBundleOk() (*BundleDTO, bool) {
	if o == nil || IsNil(o.Bundle) {
		return nil, false
	}
	return o.Bundle, true
}

// HasBundle returns a boolean if a field has been set.
func (o *FlowRegistryClientDTO) HasBundle() bool {
	if o != nil && !IsNil(o.Bundle) {
		return true
	}

	return false
}

// SetBundle gets a reference to the given BundleDTO and assigns it to the Bundle field.
func (o *FlowRegistryClientDTO) SetBundle(v BundleDTO) {
	o.Bundle = &v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *FlowRegistryClientDTO) GetProperties() map[string]string {
	if o == nil || IsNil(o.Properties) {
		var ret map[string]string
		return ret
	}
	return *o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowRegistryClientDTO) GetPropertiesOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Properties) {
		return nil, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *FlowRegistryClientDTO) HasProperties() bool {
	if o != nil && !IsNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given map[string]string and assigns it to the Properties field.
func (o *FlowRegistryClientDTO) SetProperties(v map[string]string) {
	o.Properties = &v
}

// GetDescriptors returns the Descriptors field value if set, zero value otherwise.
func (o *FlowRegistryClientDTO) GetDescriptors() map[string]PropertyDescriptorDTO {
	if o == nil || IsNil(o.Descriptors) {
		var ret map[string]PropertyDescriptorDTO
		return ret
	}
	return *o.Descriptors
}

// GetDescriptorsOk returns a tuple with the Descriptors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowRegistryClientDTO) GetDescriptorsOk() (*map[string]PropertyDescriptorDTO, bool) {
	if o == nil || IsNil(o.Descriptors) {
		return nil, false
	}
	return o.Descriptors, true
}

// HasDescriptors returns a boolean if a field has been set.
func (o *FlowRegistryClientDTO) HasDescriptors() bool {
	if o != nil && !IsNil(o.Descriptors) {
		return true
	}

	return false
}

// SetDescriptors gets a reference to the given map[string]PropertyDescriptorDTO and assigns it to the Descriptors field.
func (o *FlowRegistryClientDTO) SetDescriptors(v map[string]PropertyDescriptorDTO) {
	o.Descriptors = &v
}

// GetSensitiveDynamicPropertyNames returns the SensitiveDynamicPropertyNames field value if set, zero value otherwise.
func (o *FlowRegistryClientDTO) GetSensitiveDynamicPropertyNames() []string {
	if o == nil || IsNil(o.SensitiveDynamicPropertyNames) {
		var ret []string
		return ret
	}
	return o.SensitiveDynamicPropertyNames
}

// GetSensitiveDynamicPropertyNamesOk returns a tuple with the SensitiveDynamicPropertyNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowRegistryClientDTO) GetSensitiveDynamicPropertyNamesOk() ([]string, bool) {
	if o == nil || IsNil(o.SensitiveDynamicPropertyNames) {
		return nil, false
	}
	return o.SensitiveDynamicPropertyNames, true
}

// HasSensitiveDynamicPropertyNames returns a boolean if a field has been set.
func (o *FlowRegistryClientDTO) HasSensitiveDynamicPropertyNames() bool {
	if o != nil && !IsNil(o.SensitiveDynamicPropertyNames) {
		return true
	}

	return false
}

// SetSensitiveDynamicPropertyNames gets a reference to the given []string and assigns it to the SensitiveDynamicPropertyNames field.
func (o *FlowRegistryClientDTO) SetSensitiveDynamicPropertyNames(v []string) {
	o.SensitiveDynamicPropertyNames = v
}

// GetSupportsSensitiveDynamicProperties returns the SupportsSensitiveDynamicProperties field value if set, zero value otherwise.
func (o *FlowRegistryClientDTO) GetSupportsSensitiveDynamicProperties() bool {
	if o == nil || IsNil(o.SupportsSensitiveDynamicProperties) {
		var ret bool
		return ret
	}
	return *o.SupportsSensitiveDynamicProperties
}

// GetSupportsSensitiveDynamicPropertiesOk returns a tuple with the SupportsSensitiveDynamicProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowRegistryClientDTO) GetSupportsSensitiveDynamicPropertiesOk() (*bool, bool) {
	if o == nil || IsNil(o.SupportsSensitiveDynamicProperties) {
		return nil, false
	}
	return o.SupportsSensitiveDynamicProperties, true
}

// HasSupportsSensitiveDynamicProperties returns a boolean if a field has been set.
func (o *FlowRegistryClientDTO) HasSupportsSensitiveDynamicProperties() bool {
	if o != nil && !IsNil(o.SupportsSensitiveDynamicProperties) {
		return true
	}

	return false
}

// SetSupportsSensitiveDynamicProperties gets a reference to the given bool and assigns it to the SupportsSensitiveDynamicProperties field.
func (o *FlowRegistryClientDTO) SetSupportsSensitiveDynamicProperties(v bool) {
	o.SupportsSensitiveDynamicProperties = &v
}

// GetRestricted returns the Restricted field value if set, zero value otherwise.
func (o *FlowRegistryClientDTO) GetRestricted() bool {
	if o == nil || IsNil(o.Restricted) {
		var ret bool
		return ret
	}
	return *o.Restricted
}

// GetRestrictedOk returns a tuple with the Restricted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowRegistryClientDTO) GetRestrictedOk() (*bool, bool) {
	if o == nil || IsNil(o.Restricted) {
		return nil, false
	}
	return o.Restricted, true
}

// HasRestricted returns a boolean if a field has been set.
func (o *FlowRegistryClientDTO) HasRestricted() bool {
	if o != nil && !IsNil(o.Restricted) {
		return true
	}

	return false
}

// SetRestricted gets a reference to the given bool and assigns it to the Restricted field.
func (o *FlowRegistryClientDTO) SetRestricted(v bool) {
	o.Restricted = &v
}

// GetDeprecated returns the Deprecated field value if set, zero value otherwise.
func (o *FlowRegistryClientDTO) GetDeprecated() bool {
	if o == nil || IsNil(o.Deprecated) {
		var ret bool
		return ret
	}
	return *o.Deprecated
}

// GetDeprecatedOk returns a tuple with the Deprecated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowRegistryClientDTO) GetDeprecatedOk() (*bool, bool) {
	if o == nil || IsNil(o.Deprecated) {
		return nil, false
	}
	return o.Deprecated, true
}

// HasDeprecated returns a boolean if a field has been set.
func (o *FlowRegistryClientDTO) HasDeprecated() bool {
	if o != nil && !IsNil(o.Deprecated) {
		return true
	}

	return false
}

// SetDeprecated gets a reference to the given bool and assigns it to the Deprecated field.
func (o *FlowRegistryClientDTO) SetDeprecated(v bool) {
	o.Deprecated = &v
}

// GetValidationErrors returns the ValidationErrors field value if set, zero value otherwise.
func (o *FlowRegistryClientDTO) GetValidationErrors() []string {
	if o == nil || IsNil(o.ValidationErrors) {
		var ret []string
		return ret
	}
	return o.ValidationErrors
}

// GetValidationErrorsOk returns a tuple with the ValidationErrors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowRegistryClientDTO) GetValidationErrorsOk() ([]string, bool) {
	if o == nil || IsNil(o.ValidationErrors) {
		return nil, false
	}
	return o.ValidationErrors, true
}

// HasValidationErrors returns a boolean if a field has been set.
func (o *FlowRegistryClientDTO) HasValidationErrors() bool {
	if o != nil && !IsNil(o.ValidationErrors) {
		return true
	}

	return false
}

// SetValidationErrors gets a reference to the given []string and assigns it to the ValidationErrors field.
func (o *FlowRegistryClientDTO) SetValidationErrors(v []string) {
	o.ValidationErrors = v
}

// GetValidationStatus returns the ValidationStatus field value if set, zero value otherwise.
func (o *FlowRegistryClientDTO) GetValidationStatus() string {
	if o == nil || IsNil(o.ValidationStatus) {
		var ret string
		return ret
	}
	return *o.ValidationStatus
}

// GetValidationStatusOk returns a tuple with the ValidationStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowRegistryClientDTO) GetValidationStatusOk() (*string, bool) {
	if o == nil || IsNil(o.ValidationStatus) {
		return nil, false
	}
	return o.ValidationStatus, true
}

// HasValidationStatus returns a boolean if a field has been set.
func (o *FlowRegistryClientDTO) HasValidationStatus() bool {
	if o != nil && !IsNil(o.ValidationStatus) {
		return true
	}

	return false
}

// SetValidationStatus gets a reference to the given string and assigns it to the ValidationStatus field.
func (o *FlowRegistryClientDTO) SetValidationStatus(v string) {
	o.ValidationStatus = &v
}

// GetAnnotationData returns the AnnotationData field value if set, zero value otherwise.
func (o *FlowRegistryClientDTO) GetAnnotationData() string {
	if o == nil || IsNil(o.AnnotationData) {
		var ret string
		return ret
	}
	return *o.AnnotationData
}

// GetAnnotationDataOk returns a tuple with the AnnotationData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowRegistryClientDTO) GetAnnotationDataOk() (*string, bool) {
	if o == nil || IsNil(o.AnnotationData) {
		return nil, false
	}
	return o.AnnotationData, true
}

// HasAnnotationData returns a boolean if a field has been set.
func (o *FlowRegistryClientDTO) HasAnnotationData() bool {
	if o != nil && !IsNil(o.AnnotationData) {
		return true
	}

	return false
}

// SetAnnotationData gets a reference to the given string and assigns it to the AnnotationData field.
func (o *FlowRegistryClientDTO) SetAnnotationData(v string) {
	o.AnnotationData = &v
}

// GetMultipleVersionsAvailable returns the MultipleVersionsAvailable field value if set, zero value otherwise.
func (o *FlowRegistryClientDTO) GetMultipleVersionsAvailable() bool {
	if o == nil || IsNil(o.MultipleVersionsAvailable) {
		var ret bool
		return ret
	}
	return *o.MultipleVersionsAvailable
}

// GetMultipleVersionsAvailableOk returns a tuple with the MultipleVersionsAvailable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowRegistryClientDTO) GetMultipleVersionsAvailableOk() (*bool, bool) {
	if o == nil || IsNil(o.MultipleVersionsAvailable) {
		return nil, false
	}
	return o.MultipleVersionsAvailable, true
}

// HasMultipleVersionsAvailable returns a boolean if a field has been set.
func (o *FlowRegistryClientDTO) HasMultipleVersionsAvailable() bool {
	if o != nil && !IsNil(o.MultipleVersionsAvailable) {
		return true
	}

	return false
}

// SetMultipleVersionsAvailable gets a reference to the given bool and assigns it to the MultipleVersionsAvailable field.
func (o *FlowRegistryClientDTO) SetMultipleVersionsAvailable(v bool) {
	o.MultipleVersionsAvailable = &v
}

// GetExtensionMissing returns the ExtensionMissing field value if set, zero value otherwise.
func (o *FlowRegistryClientDTO) GetExtensionMissing() bool {
	if o == nil || IsNil(o.ExtensionMissing) {
		var ret bool
		return ret
	}
	return *o.ExtensionMissing
}

// GetExtensionMissingOk returns a tuple with the ExtensionMissing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowRegistryClientDTO) GetExtensionMissingOk() (*bool, bool) {
	if o == nil || IsNil(o.ExtensionMissing) {
		return nil, false
	}
	return o.ExtensionMissing, true
}

// HasExtensionMissing returns a boolean if a field has been set.
func (o *FlowRegistryClientDTO) HasExtensionMissing() bool {
	if o != nil && !IsNil(o.ExtensionMissing) {
		return true
	}

	return false
}

// SetExtensionMissing gets a reference to the given bool and assigns it to the ExtensionMissing field.
func (o *FlowRegistryClientDTO) SetExtensionMissing(v bool) {
	o.ExtensionMissing = &v
}

func (o FlowRegistryClientDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FlowRegistryClientDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Uri) {
		toSerialize["uri"] = o.Uri
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Bundle) {
		toSerialize["bundle"] = o.Bundle
	}
	if !IsNil(o.Properties) {
		toSerialize["properties"] = o.Properties
	}
	if !IsNil(o.Descriptors) {
		toSerialize["descriptors"] = o.Descriptors
	}
	if !IsNil(o.SensitiveDynamicPropertyNames) {
		toSerialize["sensitiveDynamicPropertyNames"] = o.SensitiveDynamicPropertyNames
	}
	if !IsNil(o.SupportsSensitiveDynamicProperties) {
		toSerialize["supportsSensitiveDynamicProperties"] = o.SupportsSensitiveDynamicProperties
	}
	if !IsNil(o.Restricted) {
		toSerialize["restricted"] = o.Restricted
	}
	if !IsNil(o.Deprecated) {
		toSerialize["deprecated"] = o.Deprecated
	}
	if !IsNil(o.ValidationErrors) {
		toSerialize["validationErrors"] = o.ValidationErrors
	}
	if !IsNil(o.ValidationStatus) {
		toSerialize["validationStatus"] = o.ValidationStatus
	}
	if !IsNil(o.AnnotationData) {
		toSerialize["annotationData"] = o.AnnotationData
	}
	if !IsNil(o.MultipleVersionsAvailable) {
		toSerialize["multipleVersionsAvailable"] = o.MultipleVersionsAvailable
	}
	if !IsNil(o.ExtensionMissing) {
		toSerialize["extensionMissing"] = o.ExtensionMissing
	}
	return toSerialize, nil
}

type NullableFlowRegistryClientDTO struct {
	value *FlowRegistryClientDTO
	isSet bool
}

func (v NullableFlowRegistryClientDTO) Get() *FlowRegistryClientDTO {
	return v.value
}

func (v *NullableFlowRegistryClientDTO) Set(val *FlowRegistryClientDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableFlowRegistryClientDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableFlowRegistryClientDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFlowRegistryClientDTO(val *FlowRegistryClientDTO) *NullableFlowRegistryClientDTO {
	return &NullableFlowRegistryClientDTO{value: val, isSet: true}
}

func (v NullableFlowRegistryClientDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFlowRegistryClientDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


