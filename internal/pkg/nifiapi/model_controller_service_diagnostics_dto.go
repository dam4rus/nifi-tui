/*
NiFi Rest API

The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.

API version: 2.0.0
Contact: dev@nifi.apache.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nifiapi

import (
	"encoding/json"
)

// checks if the ControllerServiceDiagnosticsDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ControllerServiceDiagnosticsDTO{}

// ControllerServiceDiagnosticsDTO struct for ControllerServiceDiagnosticsDTO
type ControllerServiceDiagnosticsDTO struct {
	ControllerService *ControllerServiceEntity `json:"controllerService,omitempty"`
	ClassLoaderDiagnostics *ClassLoaderDiagnosticsDTO `json:"classLoaderDiagnostics,omitempty"`
}

// NewControllerServiceDiagnosticsDTO instantiates a new ControllerServiceDiagnosticsDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewControllerServiceDiagnosticsDTO() *ControllerServiceDiagnosticsDTO {
	this := ControllerServiceDiagnosticsDTO{}
	return &this
}

// NewControllerServiceDiagnosticsDTOWithDefaults instantiates a new ControllerServiceDiagnosticsDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewControllerServiceDiagnosticsDTOWithDefaults() *ControllerServiceDiagnosticsDTO {
	this := ControllerServiceDiagnosticsDTO{}
	return &this
}

// GetControllerService returns the ControllerService field value if set, zero value otherwise.
func (o *ControllerServiceDiagnosticsDTO) GetControllerService() ControllerServiceEntity {
	if o == nil || IsNil(o.ControllerService) {
		var ret ControllerServiceEntity
		return ret
	}
	return *o.ControllerService
}

// GetControllerServiceOk returns a tuple with the ControllerService field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ControllerServiceDiagnosticsDTO) GetControllerServiceOk() (*ControllerServiceEntity, bool) {
	if o == nil || IsNil(o.ControllerService) {
		return nil, false
	}
	return o.ControllerService, true
}

// HasControllerService returns a boolean if a field has been set.
func (o *ControllerServiceDiagnosticsDTO) HasControllerService() bool {
	if o != nil && !IsNil(o.ControllerService) {
		return true
	}

	return false
}

// SetControllerService gets a reference to the given ControllerServiceEntity and assigns it to the ControllerService field.
func (o *ControllerServiceDiagnosticsDTO) SetControllerService(v ControllerServiceEntity) {
	o.ControllerService = &v
}

// GetClassLoaderDiagnostics returns the ClassLoaderDiagnostics field value if set, zero value otherwise.
func (o *ControllerServiceDiagnosticsDTO) GetClassLoaderDiagnostics() ClassLoaderDiagnosticsDTO {
	if o == nil || IsNil(o.ClassLoaderDiagnostics) {
		var ret ClassLoaderDiagnosticsDTO
		return ret
	}
	return *o.ClassLoaderDiagnostics
}

// GetClassLoaderDiagnosticsOk returns a tuple with the ClassLoaderDiagnostics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ControllerServiceDiagnosticsDTO) GetClassLoaderDiagnosticsOk() (*ClassLoaderDiagnosticsDTO, bool) {
	if o == nil || IsNil(o.ClassLoaderDiagnostics) {
		return nil, false
	}
	return o.ClassLoaderDiagnostics, true
}

// HasClassLoaderDiagnostics returns a boolean if a field has been set.
func (o *ControllerServiceDiagnosticsDTO) HasClassLoaderDiagnostics() bool {
	if o != nil && !IsNil(o.ClassLoaderDiagnostics) {
		return true
	}

	return false
}

// SetClassLoaderDiagnostics gets a reference to the given ClassLoaderDiagnosticsDTO and assigns it to the ClassLoaderDiagnostics field.
func (o *ControllerServiceDiagnosticsDTO) SetClassLoaderDiagnostics(v ClassLoaderDiagnosticsDTO) {
	o.ClassLoaderDiagnostics = &v
}

func (o ControllerServiceDiagnosticsDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ControllerServiceDiagnosticsDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ControllerService) {
		toSerialize["controllerService"] = o.ControllerService
	}
	if !IsNil(o.ClassLoaderDiagnostics) {
		toSerialize["classLoaderDiagnostics"] = o.ClassLoaderDiagnostics
	}
	return toSerialize, nil
}

type NullableControllerServiceDiagnosticsDTO struct {
	value *ControllerServiceDiagnosticsDTO
	isSet bool
}

func (v NullableControllerServiceDiagnosticsDTO) Get() *ControllerServiceDiagnosticsDTO {
	return v.value
}

func (v *NullableControllerServiceDiagnosticsDTO) Set(val *ControllerServiceDiagnosticsDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableControllerServiceDiagnosticsDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableControllerServiceDiagnosticsDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableControllerServiceDiagnosticsDTO(val *ControllerServiceDiagnosticsDTO) *NullableControllerServiceDiagnosticsDTO {
	return &NullableControllerServiceDiagnosticsDTO{value: val, isSet: true}
}

func (v NullableControllerServiceDiagnosticsDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableControllerServiceDiagnosticsDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


