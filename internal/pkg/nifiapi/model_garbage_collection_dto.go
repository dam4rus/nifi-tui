/*
NiFi Rest API

The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.

API version: 2.0.0
Contact: dev@nifi.apache.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nifiapi

import (
	"encoding/json"
)

// checks if the GarbageCollectionDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GarbageCollectionDTO{}

// GarbageCollectionDTO struct for GarbageCollectionDTO
type GarbageCollectionDTO struct {
	// The name of the garbage collector.
	Name *string `json:"name,omitempty"`
	// The number of times garbage collection has run.
	CollectionCount *int64 `json:"collectionCount,omitempty"`
	// The total amount of time spent garbage collecting.
	CollectionTime *string `json:"collectionTime,omitempty"`
	// The total number of milliseconds spent garbage collecting.
	CollectionMillis *int64 `json:"collectionMillis,omitempty"`
}

// NewGarbageCollectionDTO instantiates a new GarbageCollectionDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGarbageCollectionDTO() *GarbageCollectionDTO {
	this := GarbageCollectionDTO{}
	return &this
}

// NewGarbageCollectionDTOWithDefaults instantiates a new GarbageCollectionDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGarbageCollectionDTOWithDefaults() *GarbageCollectionDTO {
	this := GarbageCollectionDTO{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *GarbageCollectionDTO) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GarbageCollectionDTO) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *GarbageCollectionDTO) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *GarbageCollectionDTO) SetName(v string) {
	o.Name = &v
}

// GetCollectionCount returns the CollectionCount field value if set, zero value otherwise.
func (o *GarbageCollectionDTO) GetCollectionCount() int64 {
	if o == nil || IsNil(o.CollectionCount) {
		var ret int64
		return ret
	}
	return *o.CollectionCount
}

// GetCollectionCountOk returns a tuple with the CollectionCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GarbageCollectionDTO) GetCollectionCountOk() (*int64, bool) {
	if o == nil || IsNil(o.CollectionCount) {
		return nil, false
	}
	return o.CollectionCount, true
}

// HasCollectionCount returns a boolean if a field has been set.
func (o *GarbageCollectionDTO) HasCollectionCount() bool {
	if o != nil && !IsNil(o.CollectionCount) {
		return true
	}

	return false
}

// SetCollectionCount gets a reference to the given int64 and assigns it to the CollectionCount field.
func (o *GarbageCollectionDTO) SetCollectionCount(v int64) {
	o.CollectionCount = &v
}

// GetCollectionTime returns the CollectionTime field value if set, zero value otherwise.
func (o *GarbageCollectionDTO) GetCollectionTime() string {
	if o == nil || IsNil(o.CollectionTime) {
		var ret string
		return ret
	}
	return *o.CollectionTime
}

// GetCollectionTimeOk returns a tuple with the CollectionTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GarbageCollectionDTO) GetCollectionTimeOk() (*string, bool) {
	if o == nil || IsNil(o.CollectionTime) {
		return nil, false
	}
	return o.CollectionTime, true
}

// HasCollectionTime returns a boolean if a field has been set.
func (o *GarbageCollectionDTO) HasCollectionTime() bool {
	if o != nil && !IsNil(o.CollectionTime) {
		return true
	}

	return false
}

// SetCollectionTime gets a reference to the given string and assigns it to the CollectionTime field.
func (o *GarbageCollectionDTO) SetCollectionTime(v string) {
	o.CollectionTime = &v
}

// GetCollectionMillis returns the CollectionMillis field value if set, zero value otherwise.
func (o *GarbageCollectionDTO) GetCollectionMillis() int64 {
	if o == nil || IsNil(o.CollectionMillis) {
		var ret int64
		return ret
	}
	return *o.CollectionMillis
}

// GetCollectionMillisOk returns a tuple with the CollectionMillis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GarbageCollectionDTO) GetCollectionMillisOk() (*int64, bool) {
	if o == nil || IsNil(o.CollectionMillis) {
		return nil, false
	}
	return o.CollectionMillis, true
}

// HasCollectionMillis returns a boolean if a field has been set.
func (o *GarbageCollectionDTO) HasCollectionMillis() bool {
	if o != nil && !IsNil(o.CollectionMillis) {
		return true
	}

	return false
}

// SetCollectionMillis gets a reference to the given int64 and assigns it to the CollectionMillis field.
func (o *GarbageCollectionDTO) SetCollectionMillis(v int64) {
	o.CollectionMillis = &v
}

func (o GarbageCollectionDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GarbageCollectionDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.CollectionCount) {
		toSerialize["collectionCount"] = o.CollectionCount
	}
	if !IsNil(o.CollectionTime) {
		toSerialize["collectionTime"] = o.CollectionTime
	}
	if !IsNil(o.CollectionMillis) {
		toSerialize["collectionMillis"] = o.CollectionMillis
	}
	return toSerialize, nil
}

type NullableGarbageCollectionDTO struct {
	value *GarbageCollectionDTO
	isSet bool
}

func (v NullableGarbageCollectionDTO) Get() *GarbageCollectionDTO {
	return v.value
}

func (v *NullableGarbageCollectionDTO) Set(val *GarbageCollectionDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableGarbageCollectionDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableGarbageCollectionDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGarbageCollectionDTO(val *GarbageCollectionDTO) *NullableGarbageCollectionDTO {
	return &NullableGarbageCollectionDTO{value: val, isSet: true}
}

func (v NullableGarbageCollectionDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGarbageCollectionDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


