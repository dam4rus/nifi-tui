/*
NiFi Rest API

The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.

API version: 2.0.0
Contact: dev@nifi.apache.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nifiapi

import (
	"encoding/json"
)

// checks if the JVMSystemDiagnosticsSnapshotDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JVMSystemDiagnosticsSnapshotDTO{}

// JVMSystemDiagnosticsSnapshotDTO struct for JVMSystemDiagnosticsSnapshotDTO
type JVMSystemDiagnosticsSnapshotDTO struct {
	FlowFileRepositoryStorageUsage *RepositoryUsageDTO `json:"flowFileRepositoryStorageUsage,omitempty"`
	// Information about the Content Repository's usage
	ContentRepositoryStorageUsage []RepositoryUsageDTO `json:"contentRepositoryStorageUsage,omitempty"`
	// Information about the Provenance Repository's usage
	ProvenanceRepositoryStorageUsage []RepositoryUsageDTO `json:"provenanceRepositoryStorageUsage,omitempty"`
	// The maximum number of bytes that the JVM heap is configured to use for heap
	MaxHeapBytes *int64 `json:"maxHeapBytes,omitempty"`
	// The maximum number of bytes that the JVM heap is configured to use, as a human-readable value
	MaxHeap *string `json:"maxHeap,omitempty"`
	// Diagnostic information about the JVM's garbage collections
	GarbageCollectionDiagnostics []GarbageCollectionDiagnosticsDTO `json:"garbageCollectionDiagnostics,omitempty"`
	// The number of CPU Cores available on the system
	CpuCores *int32 `json:"cpuCores,omitempty"`
	// The 1-minute CPU Load Average
	CpuLoadAverage *float64 `json:"cpuLoadAverage,omitempty"`
	// The number of bytes of RAM available on the system
	PhysicalMemoryBytes *int64 `json:"physicalMemoryBytes,omitempty"`
	// The number of bytes of RAM available on the system as a human-readable value
	PhysicalMemory *string `json:"physicalMemory,omitempty"`
	// The number of files that are open by the NiFi process
	OpenFileDescriptors *int64 `json:"openFileDescriptors,omitempty"`
	// The maximum number of open file descriptors that are available to each process
	MaxOpenFileDescriptors *int64 `json:"maxOpenFileDescriptors,omitempty"`
}

// NewJVMSystemDiagnosticsSnapshotDTO instantiates a new JVMSystemDiagnosticsSnapshotDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJVMSystemDiagnosticsSnapshotDTO() *JVMSystemDiagnosticsSnapshotDTO {
	this := JVMSystemDiagnosticsSnapshotDTO{}
	return &this
}

// NewJVMSystemDiagnosticsSnapshotDTOWithDefaults instantiates a new JVMSystemDiagnosticsSnapshotDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJVMSystemDiagnosticsSnapshotDTOWithDefaults() *JVMSystemDiagnosticsSnapshotDTO {
	this := JVMSystemDiagnosticsSnapshotDTO{}
	return &this
}

// GetFlowFileRepositoryStorageUsage returns the FlowFileRepositoryStorageUsage field value if set, zero value otherwise.
func (o *JVMSystemDiagnosticsSnapshotDTO) GetFlowFileRepositoryStorageUsage() RepositoryUsageDTO {
	if o == nil || IsNil(o.FlowFileRepositoryStorageUsage) {
		var ret RepositoryUsageDTO
		return ret
	}
	return *o.FlowFileRepositoryStorageUsage
}

// GetFlowFileRepositoryStorageUsageOk returns a tuple with the FlowFileRepositoryStorageUsage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JVMSystemDiagnosticsSnapshotDTO) GetFlowFileRepositoryStorageUsageOk() (*RepositoryUsageDTO, bool) {
	if o == nil || IsNil(o.FlowFileRepositoryStorageUsage) {
		return nil, false
	}
	return o.FlowFileRepositoryStorageUsage, true
}

// HasFlowFileRepositoryStorageUsage returns a boolean if a field has been set.
func (o *JVMSystemDiagnosticsSnapshotDTO) HasFlowFileRepositoryStorageUsage() bool {
	if o != nil && !IsNil(o.FlowFileRepositoryStorageUsage) {
		return true
	}

	return false
}

// SetFlowFileRepositoryStorageUsage gets a reference to the given RepositoryUsageDTO and assigns it to the FlowFileRepositoryStorageUsage field.
func (o *JVMSystemDiagnosticsSnapshotDTO) SetFlowFileRepositoryStorageUsage(v RepositoryUsageDTO) {
	o.FlowFileRepositoryStorageUsage = &v
}

// GetContentRepositoryStorageUsage returns the ContentRepositoryStorageUsage field value if set, zero value otherwise.
func (o *JVMSystemDiagnosticsSnapshotDTO) GetContentRepositoryStorageUsage() []RepositoryUsageDTO {
	if o == nil || IsNil(o.ContentRepositoryStorageUsage) {
		var ret []RepositoryUsageDTO
		return ret
	}
	return o.ContentRepositoryStorageUsage
}

// GetContentRepositoryStorageUsageOk returns a tuple with the ContentRepositoryStorageUsage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JVMSystemDiagnosticsSnapshotDTO) GetContentRepositoryStorageUsageOk() ([]RepositoryUsageDTO, bool) {
	if o == nil || IsNil(o.ContentRepositoryStorageUsage) {
		return nil, false
	}
	return o.ContentRepositoryStorageUsage, true
}

// HasContentRepositoryStorageUsage returns a boolean if a field has been set.
func (o *JVMSystemDiagnosticsSnapshotDTO) HasContentRepositoryStorageUsage() bool {
	if o != nil && !IsNil(o.ContentRepositoryStorageUsage) {
		return true
	}

	return false
}

// SetContentRepositoryStorageUsage gets a reference to the given []RepositoryUsageDTO and assigns it to the ContentRepositoryStorageUsage field.
func (o *JVMSystemDiagnosticsSnapshotDTO) SetContentRepositoryStorageUsage(v []RepositoryUsageDTO) {
	o.ContentRepositoryStorageUsage = v
}

// GetProvenanceRepositoryStorageUsage returns the ProvenanceRepositoryStorageUsage field value if set, zero value otherwise.
func (o *JVMSystemDiagnosticsSnapshotDTO) GetProvenanceRepositoryStorageUsage() []RepositoryUsageDTO {
	if o == nil || IsNil(o.ProvenanceRepositoryStorageUsage) {
		var ret []RepositoryUsageDTO
		return ret
	}
	return o.ProvenanceRepositoryStorageUsage
}

// GetProvenanceRepositoryStorageUsageOk returns a tuple with the ProvenanceRepositoryStorageUsage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JVMSystemDiagnosticsSnapshotDTO) GetProvenanceRepositoryStorageUsageOk() ([]RepositoryUsageDTO, bool) {
	if o == nil || IsNil(o.ProvenanceRepositoryStorageUsage) {
		return nil, false
	}
	return o.ProvenanceRepositoryStorageUsage, true
}

// HasProvenanceRepositoryStorageUsage returns a boolean if a field has been set.
func (o *JVMSystemDiagnosticsSnapshotDTO) HasProvenanceRepositoryStorageUsage() bool {
	if o != nil && !IsNil(o.ProvenanceRepositoryStorageUsage) {
		return true
	}

	return false
}

// SetProvenanceRepositoryStorageUsage gets a reference to the given []RepositoryUsageDTO and assigns it to the ProvenanceRepositoryStorageUsage field.
func (o *JVMSystemDiagnosticsSnapshotDTO) SetProvenanceRepositoryStorageUsage(v []RepositoryUsageDTO) {
	o.ProvenanceRepositoryStorageUsage = v
}

// GetMaxHeapBytes returns the MaxHeapBytes field value if set, zero value otherwise.
func (o *JVMSystemDiagnosticsSnapshotDTO) GetMaxHeapBytes() int64 {
	if o == nil || IsNil(o.MaxHeapBytes) {
		var ret int64
		return ret
	}
	return *o.MaxHeapBytes
}

// GetMaxHeapBytesOk returns a tuple with the MaxHeapBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JVMSystemDiagnosticsSnapshotDTO) GetMaxHeapBytesOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxHeapBytes) {
		return nil, false
	}
	return o.MaxHeapBytes, true
}

// HasMaxHeapBytes returns a boolean if a field has been set.
func (o *JVMSystemDiagnosticsSnapshotDTO) HasMaxHeapBytes() bool {
	if o != nil && !IsNil(o.MaxHeapBytes) {
		return true
	}

	return false
}

// SetMaxHeapBytes gets a reference to the given int64 and assigns it to the MaxHeapBytes field.
func (o *JVMSystemDiagnosticsSnapshotDTO) SetMaxHeapBytes(v int64) {
	o.MaxHeapBytes = &v
}

// GetMaxHeap returns the MaxHeap field value if set, zero value otherwise.
func (o *JVMSystemDiagnosticsSnapshotDTO) GetMaxHeap() string {
	if o == nil || IsNil(o.MaxHeap) {
		var ret string
		return ret
	}
	return *o.MaxHeap
}

// GetMaxHeapOk returns a tuple with the MaxHeap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JVMSystemDiagnosticsSnapshotDTO) GetMaxHeapOk() (*string, bool) {
	if o == nil || IsNil(o.MaxHeap) {
		return nil, false
	}
	return o.MaxHeap, true
}

// HasMaxHeap returns a boolean if a field has been set.
func (o *JVMSystemDiagnosticsSnapshotDTO) HasMaxHeap() bool {
	if o != nil && !IsNil(o.MaxHeap) {
		return true
	}

	return false
}

// SetMaxHeap gets a reference to the given string and assigns it to the MaxHeap field.
func (o *JVMSystemDiagnosticsSnapshotDTO) SetMaxHeap(v string) {
	o.MaxHeap = &v
}

// GetGarbageCollectionDiagnostics returns the GarbageCollectionDiagnostics field value if set, zero value otherwise.
func (o *JVMSystemDiagnosticsSnapshotDTO) GetGarbageCollectionDiagnostics() []GarbageCollectionDiagnosticsDTO {
	if o == nil || IsNil(o.GarbageCollectionDiagnostics) {
		var ret []GarbageCollectionDiagnosticsDTO
		return ret
	}
	return o.GarbageCollectionDiagnostics
}

// GetGarbageCollectionDiagnosticsOk returns a tuple with the GarbageCollectionDiagnostics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JVMSystemDiagnosticsSnapshotDTO) GetGarbageCollectionDiagnosticsOk() ([]GarbageCollectionDiagnosticsDTO, bool) {
	if o == nil || IsNil(o.GarbageCollectionDiagnostics) {
		return nil, false
	}
	return o.GarbageCollectionDiagnostics, true
}

// HasGarbageCollectionDiagnostics returns a boolean if a field has been set.
func (o *JVMSystemDiagnosticsSnapshotDTO) HasGarbageCollectionDiagnostics() bool {
	if o != nil && !IsNil(o.GarbageCollectionDiagnostics) {
		return true
	}

	return false
}

// SetGarbageCollectionDiagnostics gets a reference to the given []GarbageCollectionDiagnosticsDTO and assigns it to the GarbageCollectionDiagnostics field.
func (o *JVMSystemDiagnosticsSnapshotDTO) SetGarbageCollectionDiagnostics(v []GarbageCollectionDiagnosticsDTO) {
	o.GarbageCollectionDiagnostics = v
}

// GetCpuCores returns the CpuCores field value if set, zero value otherwise.
func (o *JVMSystemDiagnosticsSnapshotDTO) GetCpuCores() int32 {
	if o == nil || IsNil(o.CpuCores) {
		var ret int32
		return ret
	}
	return *o.CpuCores
}

// GetCpuCoresOk returns a tuple with the CpuCores field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JVMSystemDiagnosticsSnapshotDTO) GetCpuCoresOk() (*int32, bool) {
	if o == nil || IsNil(o.CpuCores) {
		return nil, false
	}
	return o.CpuCores, true
}

// HasCpuCores returns a boolean if a field has been set.
func (o *JVMSystemDiagnosticsSnapshotDTO) HasCpuCores() bool {
	if o != nil && !IsNil(o.CpuCores) {
		return true
	}

	return false
}

// SetCpuCores gets a reference to the given int32 and assigns it to the CpuCores field.
func (o *JVMSystemDiagnosticsSnapshotDTO) SetCpuCores(v int32) {
	o.CpuCores = &v
}

// GetCpuLoadAverage returns the CpuLoadAverage field value if set, zero value otherwise.
func (o *JVMSystemDiagnosticsSnapshotDTO) GetCpuLoadAverage() float64 {
	if o == nil || IsNil(o.CpuLoadAverage) {
		var ret float64
		return ret
	}
	return *o.CpuLoadAverage
}

// GetCpuLoadAverageOk returns a tuple with the CpuLoadAverage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JVMSystemDiagnosticsSnapshotDTO) GetCpuLoadAverageOk() (*float64, bool) {
	if o == nil || IsNil(o.CpuLoadAverage) {
		return nil, false
	}
	return o.CpuLoadAverage, true
}

// HasCpuLoadAverage returns a boolean if a field has been set.
func (o *JVMSystemDiagnosticsSnapshotDTO) HasCpuLoadAverage() bool {
	if o != nil && !IsNil(o.CpuLoadAverage) {
		return true
	}

	return false
}

// SetCpuLoadAverage gets a reference to the given float64 and assigns it to the CpuLoadAverage field.
func (o *JVMSystemDiagnosticsSnapshotDTO) SetCpuLoadAverage(v float64) {
	o.CpuLoadAverage = &v
}

// GetPhysicalMemoryBytes returns the PhysicalMemoryBytes field value if set, zero value otherwise.
func (o *JVMSystemDiagnosticsSnapshotDTO) GetPhysicalMemoryBytes() int64 {
	if o == nil || IsNil(o.PhysicalMemoryBytes) {
		var ret int64
		return ret
	}
	return *o.PhysicalMemoryBytes
}

// GetPhysicalMemoryBytesOk returns a tuple with the PhysicalMemoryBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JVMSystemDiagnosticsSnapshotDTO) GetPhysicalMemoryBytesOk() (*int64, bool) {
	if o == nil || IsNil(o.PhysicalMemoryBytes) {
		return nil, false
	}
	return o.PhysicalMemoryBytes, true
}

// HasPhysicalMemoryBytes returns a boolean if a field has been set.
func (o *JVMSystemDiagnosticsSnapshotDTO) HasPhysicalMemoryBytes() bool {
	if o != nil && !IsNil(o.PhysicalMemoryBytes) {
		return true
	}

	return false
}

// SetPhysicalMemoryBytes gets a reference to the given int64 and assigns it to the PhysicalMemoryBytes field.
func (o *JVMSystemDiagnosticsSnapshotDTO) SetPhysicalMemoryBytes(v int64) {
	o.PhysicalMemoryBytes = &v
}

// GetPhysicalMemory returns the PhysicalMemory field value if set, zero value otherwise.
func (o *JVMSystemDiagnosticsSnapshotDTO) GetPhysicalMemory() string {
	if o == nil || IsNil(o.PhysicalMemory) {
		var ret string
		return ret
	}
	return *o.PhysicalMemory
}

// GetPhysicalMemoryOk returns a tuple with the PhysicalMemory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JVMSystemDiagnosticsSnapshotDTO) GetPhysicalMemoryOk() (*string, bool) {
	if o == nil || IsNil(o.PhysicalMemory) {
		return nil, false
	}
	return o.PhysicalMemory, true
}

// HasPhysicalMemory returns a boolean if a field has been set.
func (o *JVMSystemDiagnosticsSnapshotDTO) HasPhysicalMemory() bool {
	if o != nil && !IsNil(o.PhysicalMemory) {
		return true
	}

	return false
}

// SetPhysicalMemory gets a reference to the given string and assigns it to the PhysicalMemory field.
func (o *JVMSystemDiagnosticsSnapshotDTO) SetPhysicalMemory(v string) {
	o.PhysicalMemory = &v
}

// GetOpenFileDescriptors returns the OpenFileDescriptors field value if set, zero value otherwise.
func (o *JVMSystemDiagnosticsSnapshotDTO) GetOpenFileDescriptors() int64 {
	if o == nil || IsNil(o.OpenFileDescriptors) {
		var ret int64
		return ret
	}
	return *o.OpenFileDescriptors
}

// GetOpenFileDescriptorsOk returns a tuple with the OpenFileDescriptors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JVMSystemDiagnosticsSnapshotDTO) GetOpenFileDescriptorsOk() (*int64, bool) {
	if o == nil || IsNil(o.OpenFileDescriptors) {
		return nil, false
	}
	return o.OpenFileDescriptors, true
}

// HasOpenFileDescriptors returns a boolean if a field has been set.
func (o *JVMSystemDiagnosticsSnapshotDTO) HasOpenFileDescriptors() bool {
	if o != nil && !IsNil(o.OpenFileDescriptors) {
		return true
	}

	return false
}

// SetOpenFileDescriptors gets a reference to the given int64 and assigns it to the OpenFileDescriptors field.
func (o *JVMSystemDiagnosticsSnapshotDTO) SetOpenFileDescriptors(v int64) {
	o.OpenFileDescriptors = &v
}

// GetMaxOpenFileDescriptors returns the MaxOpenFileDescriptors field value if set, zero value otherwise.
func (o *JVMSystemDiagnosticsSnapshotDTO) GetMaxOpenFileDescriptors() int64 {
	if o == nil || IsNil(o.MaxOpenFileDescriptors) {
		var ret int64
		return ret
	}
	return *o.MaxOpenFileDescriptors
}

// GetMaxOpenFileDescriptorsOk returns a tuple with the MaxOpenFileDescriptors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JVMSystemDiagnosticsSnapshotDTO) GetMaxOpenFileDescriptorsOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxOpenFileDescriptors) {
		return nil, false
	}
	return o.MaxOpenFileDescriptors, true
}

// HasMaxOpenFileDescriptors returns a boolean if a field has been set.
func (o *JVMSystemDiagnosticsSnapshotDTO) HasMaxOpenFileDescriptors() bool {
	if o != nil && !IsNil(o.MaxOpenFileDescriptors) {
		return true
	}

	return false
}

// SetMaxOpenFileDescriptors gets a reference to the given int64 and assigns it to the MaxOpenFileDescriptors field.
func (o *JVMSystemDiagnosticsSnapshotDTO) SetMaxOpenFileDescriptors(v int64) {
	o.MaxOpenFileDescriptors = &v
}

func (o JVMSystemDiagnosticsSnapshotDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JVMSystemDiagnosticsSnapshotDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FlowFileRepositoryStorageUsage) {
		toSerialize["flowFileRepositoryStorageUsage"] = o.FlowFileRepositoryStorageUsage
	}
	if !IsNil(o.ContentRepositoryStorageUsage) {
		toSerialize["contentRepositoryStorageUsage"] = o.ContentRepositoryStorageUsage
	}
	if !IsNil(o.ProvenanceRepositoryStorageUsage) {
		toSerialize["provenanceRepositoryStorageUsage"] = o.ProvenanceRepositoryStorageUsage
	}
	if !IsNil(o.MaxHeapBytes) {
		toSerialize["maxHeapBytes"] = o.MaxHeapBytes
	}
	if !IsNil(o.MaxHeap) {
		toSerialize["maxHeap"] = o.MaxHeap
	}
	if !IsNil(o.GarbageCollectionDiagnostics) {
		toSerialize["garbageCollectionDiagnostics"] = o.GarbageCollectionDiagnostics
	}
	if !IsNil(o.CpuCores) {
		toSerialize["cpuCores"] = o.CpuCores
	}
	if !IsNil(o.CpuLoadAverage) {
		toSerialize["cpuLoadAverage"] = o.CpuLoadAverage
	}
	if !IsNil(o.PhysicalMemoryBytes) {
		toSerialize["physicalMemoryBytes"] = o.PhysicalMemoryBytes
	}
	if !IsNil(o.PhysicalMemory) {
		toSerialize["physicalMemory"] = o.PhysicalMemory
	}
	if !IsNil(o.OpenFileDescriptors) {
		toSerialize["openFileDescriptors"] = o.OpenFileDescriptors
	}
	if !IsNil(o.MaxOpenFileDescriptors) {
		toSerialize["maxOpenFileDescriptors"] = o.MaxOpenFileDescriptors
	}
	return toSerialize, nil
}

type NullableJVMSystemDiagnosticsSnapshotDTO struct {
	value *JVMSystemDiagnosticsSnapshotDTO
	isSet bool
}

func (v NullableJVMSystemDiagnosticsSnapshotDTO) Get() *JVMSystemDiagnosticsSnapshotDTO {
	return v.value
}

func (v *NullableJVMSystemDiagnosticsSnapshotDTO) Set(val *JVMSystemDiagnosticsSnapshotDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableJVMSystemDiagnosticsSnapshotDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableJVMSystemDiagnosticsSnapshotDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJVMSystemDiagnosticsSnapshotDTO(val *JVMSystemDiagnosticsSnapshotDTO) *NullableJVMSystemDiagnosticsSnapshotDTO {
	return &NullableJVMSystemDiagnosticsSnapshotDTO{value: val, isSet: true}
}

func (v NullableJVMSystemDiagnosticsSnapshotDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJVMSystemDiagnosticsSnapshotDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


