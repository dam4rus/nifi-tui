/*
NiFi Rest API

The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.

API version: 2.0.0
Contact: dev@nifi.apache.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nifiapi

import (
	"encoding/json"
)

// checks if the ListingRequestDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListingRequestDTO{}

// ListingRequestDTO struct for ListingRequestDTO
type ListingRequestDTO struct {
	// The id for this listing request.
	Id *string `json:"id,omitempty"`
	// The URI for future requests to this listing request.
	Uri *string `json:"uri,omitempty"`
	// The timestamp when the query was submitted.
	SubmissionTime *string `json:"submissionTime,omitempty"`
	// The last time this listing request was updated.
	LastUpdated *string `json:"lastUpdated,omitempty"`
	// The current percent complete.
	PercentCompleted *int32 `json:"percentCompleted,omitempty"`
	// Whether the query has finished.
	Finished *bool `json:"finished,omitempty"`
	// The reason, if any, that this listing request failed.
	FailureReason *string `json:"failureReason,omitempty"`
	// The maximum number of FlowFileSummary objects to return
	MaxResults *int32 `json:"maxResults,omitempty"`
	// The current state of the listing request.
	State *string `json:"state,omitempty"`
	QueueSize *QueueSizeDTO `json:"queueSize,omitempty"`
	// The FlowFile summaries. The summaries will be populated once the request has completed.
	FlowFileSummaries []FlowFileSummaryDTO `json:"flowFileSummaries,omitempty"`
	// Whether the source of the connection is running
	SourceRunning *bool `json:"sourceRunning,omitempty"`
	// Whether the destination of the connection is running
	DestinationRunning *bool `json:"destinationRunning,omitempty"`
}

// NewListingRequestDTO instantiates a new ListingRequestDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListingRequestDTO() *ListingRequestDTO {
	this := ListingRequestDTO{}
	return &this
}

// NewListingRequestDTOWithDefaults instantiates a new ListingRequestDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListingRequestDTOWithDefaults() *ListingRequestDTO {
	this := ListingRequestDTO{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ListingRequestDTO) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListingRequestDTO) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ListingRequestDTO) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ListingRequestDTO) SetId(v string) {
	o.Id = &v
}

// GetUri returns the Uri field value if set, zero value otherwise.
func (o *ListingRequestDTO) GetUri() string {
	if o == nil || IsNil(o.Uri) {
		var ret string
		return ret
	}
	return *o.Uri
}

// GetUriOk returns a tuple with the Uri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListingRequestDTO) GetUriOk() (*string, bool) {
	if o == nil || IsNil(o.Uri) {
		return nil, false
	}
	return o.Uri, true
}

// HasUri returns a boolean if a field has been set.
func (o *ListingRequestDTO) HasUri() bool {
	if o != nil && !IsNil(o.Uri) {
		return true
	}

	return false
}

// SetUri gets a reference to the given string and assigns it to the Uri field.
func (o *ListingRequestDTO) SetUri(v string) {
	o.Uri = &v
}

// GetSubmissionTime returns the SubmissionTime field value if set, zero value otherwise.
func (o *ListingRequestDTO) GetSubmissionTime() string {
	if o == nil || IsNil(o.SubmissionTime) {
		var ret string
		return ret
	}
	return *o.SubmissionTime
}

// GetSubmissionTimeOk returns a tuple with the SubmissionTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListingRequestDTO) GetSubmissionTimeOk() (*string, bool) {
	if o == nil || IsNil(o.SubmissionTime) {
		return nil, false
	}
	return o.SubmissionTime, true
}

// HasSubmissionTime returns a boolean if a field has been set.
func (o *ListingRequestDTO) HasSubmissionTime() bool {
	if o != nil && !IsNil(o.SubmissionTime) {
		return true
	}

	return false
}

// SetSubmissionTime gets a reference to the given string and assigns it to the SubmissionTime field.
func (o *ListingRequestDTO) SetSubmissionTime(v string) {
	o.SubmissionTime = &v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *ListingRequestDTO) GetLastUpdated() string {
	if o == nil || IsNil(o.LastUpdated) {
		var ret string
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListingRequestDTO) GetLastUpdatedOk() (*string, bool) {
	if o == nil || IsNil(o.LastUpdated) {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *ListingRequestDTO) HasLastUpdated() bool {
	if o != nil && !IsNil(o.LastUpdated) {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given string and assigns it to the LastUpdated field.
func (o *ListingRequestDTO) SetLastUpdated(v string) {
	o.LastUpdated = &v
}

// GetPercentCompleted returns the PercentCompleted field value if set, zero value otherwise.
func (o *ListingRequestDTO) GetPercentCompleted() int32 {
	if o == nil || IsNil(o.PercentCompleted) {
		var ret int32
		return ret
	}
	return *o.PercentCompleted
}

// GetPercentCompletedOk returns a tuple with the PercentCompleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListingRequestDTO) GetPercentCompletedOk() (*int32, bool) {
	if o == nil || IsNil(o.PercentCompleted) {
		return nil, false
	}
	return o.PercentCompleted, true
}

// HasPercentCompleted returns a boolean if a field has been set.
func (o *ListingRequestDTO) HasPercentCompleted() bool {
	if o != nil && !IsNil(o.PercentCompleted) {
		return true
	}

	return false
}

// SetPercentCompleted gets a reference to the given int32 and assigns it to the PercentCompleted field.
func (o *ListingRequestDTO) SetPercentCompleted(v int32) {
	o.PercentCompleted = &v
}

// GetFinished returns the Finished field value if set, zero value otherwise.
func (o *ListingRequestDTO) GetFinished() bool {
	if o == nil || IsNil(o.Finished) {
		var ret bool
		return ret
	}
	return *o.Finished
}

// GetFinishedOk returns a tuple with the Finished field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListingRequestDTO) GetFinishedOk() (*bool, bool) {
	if o == nil || IsNil(o.Finished) {
		return nil, false
	}
	return o.Finished, true
}

// HasFinished returns a boolean if a field has been set.
func (o *ListingRequestDTO) HasFinished() bool {
	if o != nil && !IsNil(o.Finished) {
		return true
	}

	return false
}

// SetFinished gets a reference to the given bool and assigns it to the Finished field.
func (o *ListingRequestDTO) SetFinished(v bool) {
	o.Finished = &v
}

// GetFailureReason returns the FailureReason field value if set, zero value otherwise.
func (o *ListingRequestDTO) GetFailureReason() string {
	if o == nil || IsNil(o.FailureReason) {
		var ret string
		return ret
	}
	return *o.FailureReason
}

// GetFailureReasonOk returns a tuple with the FailureReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListingRequestDTO) GetFailureReasonOk() (*string, bool) {
	if o == nil || IsNil(o.FailureReason) {
		return nil, false
	}
	return o.FailureReason, true
}

// HasFailureReason returns a boolean if a field has been set.
func (o *ListingRequestDTO) HasFailureReason() bool {
	if o != nil && !IsNil(o.FailureReason) {
		return true
	}

	return false
}

// SetFailureReason gets a reference to the given string and assigns it to the FailureReason field.
func (o *ListingRequestDTO) SetFailureReason(v string) {
	o.FailureReason = &v
}

// GetMaxResults returns the MaxResults field value if set, zero value otherwise.
func (o *ListingRequestDTO) GetMaxResults() int32 {
	if o == nil || IsNil(o.MaxResults) {
		var ret int32
		return ret
	}
	return *o.MaxResults
}

// GetMaxResultsOk returns a tuple with the MaxResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListingRequestDTO) GetMaxResultsOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxResults) {
		return nil, false
	}
	return o.MaxResults, true
}

// HasMaxResults returns a boolean if a field has been set.
func (o *ListingRequestDTO) HasMaxResults() bool {
	if o != nil && !IsNil(o.MaxResults) {
		return true
	}

	return false
}

// SetMaxResults gets a reference to the given int32 and assigns it to the MaxResults field.
func (o *ListingRequestDTO) SetMaxResults(v int32) {
	o.MaxResults = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *ListingRequestDTO) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListingRequestDTO) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *ListingRequestDTO) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *ListingRequestDTO) SetState(v string) {
	o.State = &v
}

// GetQueueSize returns the QueueSize field value if set, zero value otherwise.
func (o *ListingRequestDTO) GetQueueSize() QueueSizeDTO {
	if o == nil || IsNil(o.QueueSize) {
		var ret QueueSizeDTO
		return ret
	}
	return *o.QueueSize
}

// GetQueueSizeOk returns a tuple with the QueueSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListingRequestDTO) GetQueueSizeOk() (*QueueSizeDTO, bool) {
	if o == nil || IsNil(o.QueueSize) {
		return nil, false
	}
	return o.QueueSize, true
}

// HasQueueSize returns a boolean if a field has been set.
func (o *ListingRequestDTO) HasQueueSize() bool {
	if o != nil && !IsNil(o.QueueSize) {
		return true
	}

	return false
}

// SetQueueSize gets a reference to the given QueueSizeDTO and assigns it to the QueueSize field.
func (o *ListingRequestDTO) SetQueueSize(v QueueSizeDTO) {
	o.QueueSize = &v
}

// GetFlowFileSummaries returns the FlowFileSummaries field value if set, zero value otherwise.
func (o *ListingRequestDTO) GetFlowFileSummaries() []FlowFileSummaryDTO {
	if o == nil || IsNil(o.FlowFileSummaries) {
		var ret []FlowFileSummaryDTO
		return ret
	}
	return o.FlowFileSummaries
}

// GetFlowFileSummariesOk returns a tuple with the FlowFileSummaries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListingRequestDTO) GetFlowFileSummariesOk() ([]FlowFileSummaryDTO, bool) {
	if o == nil || IsNil(o.FlowFileSummaries) {
		return nil, false
	}
	return o.FlowFileSummaries, true
}

// HasFlowFileSummaries returns a boolean if a field has been set.
func (o *ListingRequestDTO) HasFlowFileSummaries() bool {
	if o != nil && !IsNil(o.FlowFileSummaries) {
		return true
	}

	return false
}

// SetFlowFileSummaries gets a reference to the given []FlowFileSummaryDTO and assigns it to the FlowFileSummaries field.
func (o *ListingRequestDTO) SetFlowFileSummaries(v []FlowFileSummaryDTO) {
	o.FlowFileSummaries = v
}

// GetSourceRunning returns the SourceRunning field value if set, zero value otherwise.
func (o *ListingRequestDTO) GetSourceRunning() bool {
	if o == nil || IsNil(o.SourceRunning) {
		var ret bool
		return ret
	}
	return *o.SourceRunning
}

// GetSourceRunningOk returns a tuple with the SourceRunning field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListingRequestDTO) GetSourceRunningOk() (*bool, bool) {
	if o == nil || IsNil(o.SourceRunning) {
		return nil, false
	}
	return o.SourceRunning, true
}

// HasSourceRunning returns a boolean if a field has been set.
func (o *ListingRequestDTO) HasSourceRunning() bool {
	if o != nil && !IsNil(o.SourceRunning) {
		return true
	}

	return false
}

// SetSourceRunning gets a reference to the given bool and assigns it to the SourceRunning field.
func (o *ListingRequestDTO) SetSourceRunning(v bool) {
	o.SourceRunning = &v
}

// GetDestinationRunning returns the DestinationRunning field value if set, zero value otherwise.
func (o *ListingRequestDTO) GetDestinationRunning() bool {
	if o == nil || IsNil(o.DestinationRunning) {
		var ret bool
		return ret
	}
	return *o.DestinationRunning
}

// GetDestinationRunningOk returns a tuple with the DestinationRunning field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListingRequestDTO) GetDestinationRunningOk() (*bool, bool) {
	if o == nil || IsNil(o.DestinationRunning) {
		return nil, false
	}
	return o.DestinationRunning, true
}

// HasDestinationRunning returns a boolean if a field has been set.
func (o *ListingRequestDTO) HasDestinationRunning() bool {
	if o != nil && !IsNil(o.DestinationRunning) {
		return true
	}

	return false
}

// SetDestinationRunning gets a reference to the given bool and assigns it to the DestinationRunning field.
func (o *ListingRequestDTO) SetDestinationRunning(v bool) {
	o.DestinationRunning = &v
}

func (o ListingRequestDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListingRequestDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Uri) {
		toSerialize["uri"] = o.Uri
	}
	if !IsNil(o.SubmissionTime) {
		toSerialize["submissionTime"] = o.SubmissionTime
	}
	if !IsNil(o.LastUpdated) {
		toSerialize["lastUpdated"] = o.LastUpdated
	}
	if !IsNil(o.PercentCompleted) {
		toSerialize["percentCompleted"] = o.PercentCompleted
	}
	if !IsNil(o.Finished) {
		toSerialize["finished"] = o.Finished
	}
	if !IsNil(o.FailureReason) {
		toSerialize["failureReason"] = o.FailureReason
	}
	if !IsNil(o.MaxResults) {
		toSerialize["maxResults"] = o.MaxResults
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.QueueSize) {
		toSerialize["queueSize"] = o.QueueSize
	}
	if !IsNil(o.FlowFileSummaries) {
		toSerialize["flowFileSummaries"] = o.FlowFileSummaries
	}
	if !IsNil(o.SourceRunning) {
		toSerialize["sourceRunning"] = o.SourceRunning
	}
	if !IsNil(o.DestinationRunning) {
		toSerialize["destinationRunning"] = o.DestinationRunning
	}
	return toSerialize, nil
}

type NullableListingRequestDTO struct {
	value *ListingRequestDTO
	isSet bool
}

func (v NullableListingRequestDTO) Get() *ListingRequestDTO {
	return v.value
}

func (v *NullableListingRequestDTO) Set(val *ListingRequestDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableListingRequestDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableListingRequestDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListingRequestDTO(val *ListingRequestDTO) *NullableListingRequestDTO {
	return &NullableListingRequestDTO{value: val, isSet: true}
}

func (v NullableListingRequestDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListingRequestDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


