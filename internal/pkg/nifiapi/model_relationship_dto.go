/*
NiFi Rest API

The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.

API version: 2.0.0
Contact: dev@nifi.apache.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nifiapi

import (
	"encoding/json"
)

// checks if the RelationshipDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RelationshipDTO{}

// RelationshipDTO struct for RelationshipDTO
type RelationshipDTO struct {
	// The relationship name.
	Name *string `json:"name,omitempty"`
	// The relationship description.
	Description *string `json:"description,omitempty"`
	// Whether or not flowfiles sent to this relationship should auto terminate.
	AutoTerminate *bool `json:"autoTerminate,omitempty"`
	// Whether or not flowfiles sent to this relationship should retry.
	Retry *bool `json:"retry,omitempty"`
}

// NewRelationshipDTO instantiates a new RelationshipDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRelationshipDTO() *RelationshipDTO {
	this := RelationshipDTO{}
	return &this
}

// NewRelationshipDTOWithDefaults instantiates a new RelationshipDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRelationshipDTOWithDefaults() *RelationshipDTO {
	this := RelationshipDTO{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RelationshipDTO) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelationshipDTO) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RelationshipDTO) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RelationshipDTO) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *RelationshipDTO) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelationshipDTO) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *RelationshipDTO) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *RelationshipDTO) SetDescription(v string) {
	o.Description = &v
}

// GetAutoTerminate returns the AutoTerminate field value if set, zero value otherwise.
func (o *RelationshipDTO) GetAutoTerminate() bool {
	if o == nil || IsNil(o.AutoTerminate) {
		var ret bool
		return ret
	}
	return *o.AutoTerminate
}

// GetAutoTerminateOk returns a tuple with the AutoTerminate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelationshipDTO) GetAutoTerminateOk() (*bool, bool) {
	if o == nil || IsNil(o.AutoTerminate) {
		return nil, false
	}
	return o.AutoTerminate, true
}

// HasAutoTerminate returns a boolean if a field has been set.
func (o *RelationshipDTO) HasAutoTerminate() bool {
	if o != nil && !IsNil(o.AutoTerminate) {
		return true
	}

	return false
}

// SetAutoTerminate gets a reference to the given bool and assigns it to the AutoTerminate field.
func (o *RelationshipDTO) SetAutoTerminate(v bool) {
	o.AutoTerminate = &v
}

// GetRetry returns the Retry field value if set, zero value otherwise.
func (o *RelationshipDTO) GetRetry() bool {
	if o == nil || IsNil(o.Retry) {
		var ret bool
		return ret
	}
	return *o.Retry
}

// GetRetryOk returns a tuple with the Retry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelationshipDTO) GetRetryOk() (*bool, bool) {
	if o == nil || IsNil(o.Retry) {
		return nil, false
	}
	return o.Retry, true
}

// HasRetry returns a boolean if a field has been set.
func (o *RelationshipDTO) HasRetry() bool {
	if o != nil && !IsNil(o.Retry) {
		return true
	}

	return false
}

// SetRetry gets a reference to the given bool and assigns it to the Retry field.
func (o *RelationshipDTO) SetRetry(v bool) {
	o.Retry = &v
}

func (o RelationshipDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RelationshipDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.AutoTerminate) {
		toSerialize["autoTerminate"] = o.AutoTerminate
	}
	if !IsNil(o.Retry) {
		toSerialize["retry"] = o.Retry
	}
	return toSerialize, nil
}

type NullableRelationshipDTO struct {
	value *RelationshipDTO
	isSet bool
}

func (v NullableRelationshipDTO) Get() *RelationshipDTO {
	return v.value
}

func (v *NullableRelationshipDTO) Set(val *RelationshipDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableRelationshipDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableRelationshipDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRelationshipDTO(val *RelationshipDTO) *NullableRelationshipDTO {
	return &NullableRelationshipDTO{value: val, isSet: true}
}

func (v NullableRelationshipDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRelationshipDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


