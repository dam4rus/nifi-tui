/*
NiFi Rest API

The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.

API version: 2.0.0
Contact: dev@nifi.apache.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nifiapi

import (
	"encoding/json"
)

// checks if the ReplayLastEventResponseEntity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReplayLastEventResponseEntity{}

// ReplayLastEventResponseEntity struct for ReplayLastEventResponseEntity
type ReplayLastEventResponseEntity struct {
	// The UUID of the component whose last event should be replayed.
	ComponentId *string `json:"componentId,omitempty"`
	// Which nodes were requested to replay their last provenance event.
	Nodes *string `json:"nodes,omitempty"`
	AggregateSnapshot *ReplayLastEventSnapshotDTO `json:"aggregateSnapshot,omitempty"`
	// The node-wise results
	NodeSnapshots []NodeReplayLastEventSnapshotDTO `json:"nodeSnapshots,omitempty"`
}

// NewReplayLastEventResponseEntity instantiates a new ReplayLastEventResponseEntity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReplayLastEventResponseEntity() *ReplayLastEventResponseEntity {
	this := ReplayLastEventResponseEntity{}
	return &this
}

// NewReplayLastEventResponseEntityWithDefaults instantiates a new ReplayLastEventResponseEntity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReplayLastEventResponseEntityWithDefaults() *ReplayLastEventResponseEntity {
	this := ReplayLastEventResponseEntity{}
	return &this
}

// GetComponentId returns the ComponentId field value if set, zero value otherwise.
func (o *ReplayLastEventResponseEntity) GetComponentId() string {
	if o == nil || IsNil(o.ComponentId) {
		var ret string
		return ret
	}
	return *o.ComponentId
}

// GetComponentIdOk returns a tuple with the ComponentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplayLastEventResponseEntity) GetComponentIdOk() (*string, bool) {
	if o == nil || IsNil(o.ComponentId) {
		return nil, false
	}
	return o.ComponentId, true
}

// HasComponentId returns a boolean if a field has been set.
func (o *ReplayLastEventResponseEntity) HasComponentId() bool {
	if o != nil && !IsNil(o.ComponentId) {
		return true
	}

	return false
}

// SetComponentId gets a reference to the given string and assigns it to the ComponentId field.
func (o *ReplayLastEventResponseEntity) SetComponentId(v string) {
	o.ComponentId = &v
}

// GetNodes returns the Nodes field value if set, zero value otherwise.
func (o *ReplayLastEventResponseEntity) GetNodes() string {
	if o == nil || IsNil(o.Nodes) {
		var ret string
		return ret
	}
	return *o.Nodes
}

// GetNodesOk returns a tuple with the Nodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplayLastEventResponseEntity) GetNodesOk() (*string, bool) {
	if o == nil || IsNil(o.Nodes) {
		return nil, false
	}
	return o.Nodes, true
}

// HasNodes returns a boolean if a field has been set.
func (o *ReplayLastEventResponseEntity) HasNodes() bool {
	if o != nil && !IsNil(o.Nodes) {
		return true
	}

	return false
}

// SetNodes gets a reference to the given string and assigns it to the Nodes field.
func (o *ReplayLastEventResponseEntity) SetNodes(v string) {
	o.Nodes = &v
}

// GetAggregateSnapshot returns the AggregateSnapshot field value if set, zero value otherwise.
func (o *ReplayLastEventResponseEntity) GetAggregateSnapshot() ReplayLastEventSnapshotDTO {
	if o == nil || IsNil(o.AggregateSnapshot) {
		var ret ReplayLastEventSnapshotDTO
		return ret
	}
	return *o.AggregateSnapshot
}

// GetAggregateSnapshotOk returns a tuple with the AggregateSnapshot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplayLastEventResponseEntity) GetAggregateSnapshotOk() (*ReplayLastEventSnapshotDTO, bool) {
	if o == nil || IsNil(o.AggregateSnapshot) {
		return nil, false
	}
	return o.AggregateSnapshot, true
}

// HasAggregateSnapshot returns a boolean if a field has been set.
func (o *ReplayLastEventResponseEntity) HasAggregateSnapshot() bool {
	if o != nil && !IsNil(o.AggregateSnapshot) {
		return true
	}

	return false
}

// SetAggregateSnapshot gets a reference to the given ReplayLastEventSnapshotDTO and assigns it to the AggregateSnapshot field.
func (o *ReplayLastEventResponseEntity) SetAggregateSnapshot(v ReplayLastEventSnapshotDTO) {
	o.AggregateSnapshot = &v
}

// GetNodeSnapshots returns the NodeSnapshots field value if set, zero value otherwise.
func (o *ReplayLastEventResponseEntity) GetNodeSnapshots() []NodeReplayLastEventSnapshotDTO {
	if o == nil || IsNil(o.NodeSnapshots) {
		var ret []NodeReplayLastEventSnapshotDTO
		return ret
	}
	return o.NodeSnapshots
}

// GetNodeSnapshotsOk returns a tuple with the NodeSnapshots field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplayLastEventResponseEntity) GetNodeSnapshotsOk() ([]NodeReplayLastEventSnapshotDTO, bool) {
	if o == nil || IsNil(o.NodeSnapshots) {
		return nil, false
	}
	return o.NodeSnapshots, true
}

// HasNodeSnapshots returns a boolean if a field has been set.
func (o *ReplayLastEventResponseEntity) HasNodeSnapshots() bool {
	if o != nil && !IsNil(o.NodeSnapshots) {
		return true
	}

	return false
}

// SetNodeSnapshots gets a reference to the given []NodeReplayLastEventSnapshotDTO and assigns it to the NodeSnapshots field.
func (o *ReplayLastEventResponseEntity) SetNodeSnapshots(v []NodeReplayLastEventSnapshotDTO) {
	o.NodeSnapshots = v
}

func (o ReplayLastEventResponseEntity) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReplayLastEventResponseEntity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ComponentId) {
		toSerialize["componentId"] = o.ComponentId
	}
	if !IsNil(o.Nodes) {
		toSerialize["nodes"] = o.Nodes
	}
	if !IsNil(o.AggregateSnapshot) {
		toSerialize["aggregateSnapshot"] = o.AggregateSnapshot
	}
	if !IsNil(o.NodeSnapshots) {
		toSerialize["nodeSnapshots"] = o.NodeSnapshots
	}
	return toSerialize, nil
}

type NullableReplayLastEventResponseEntity struct {
	value *ReplayLastEventResponseEntity
	isSet bool
}

func (v NullableReplayLastEventResponseEntity) Get() *ReplayLastEventResponseEntity {
	return v.value
}

func (v *NullableReplayLastEventResponseEntity) Set(val *ReplayLastEventResponseEntity) {
	v.value = val
	v.isSet = true
}

func (v NullableReplayLastEventResponseEntity) IsSet() bool {
	return v.isSet
}

func (v *NullableReplayLastEventResponseEntity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReplayLastEventResponseEntity(val *ReplayLastEventResponseEntity) *NullableReplayLastEventResponseEntity {
	return &NullableReplayLastEventResponseEntity{value: val, isSet: true}
}

func (v NullableReplayLastEventResponseEntity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReplayLastEventResponseEntity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


