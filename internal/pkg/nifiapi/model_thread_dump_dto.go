/*
NiFi Rest API

The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.

API version: 2.0.0
Contact: dev@nifi.apache.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nifiapi

import (
	"encoding/json"
)

// checks if the ThreadDumpDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ThreadDumpDTO{}

// ThreadDumpDTO struct for ThreadDumpDTO
type ThreadDumpDTO struct {
	// The ID of the node in the cluster
	NodeId *string `json:"nodeId,omitempty"`
	// The address of the node in the cluster
	NodeAddress *string `json:"nodeAddress,omitempty"`
	// The port the node is listening for API requests.
	ApiPort *int32 `json:"apiPort,omitempty"`
	// The stack trace for the thread
	StackTrace *string `json:"stackTrace,omitempty"`
	// The name of the thread
	ThreadName *string `json:"threadName,omitempty"`
	// The number of milliseconds that the thread has been executing in the Processor
	ThreadActiveMillis *int64 `json:"threadActiveMillis,omitempty"`
	// Indicates whether or not the user has requested that the task be terminated. If this is true, it may indicate that the thread is in a state where it will continue running indefinitely without returning.
	TaskTerminated *bool `json:"taskTerminated,omitempty"`
}

// NewThreadDumpDTO instantiates a new ThreadDumpDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewThreadDumpDTO() *ThreadDumpDTO {
	this := ThreadDumpDTO{}
	return &this
}

// NewThreadDumpDTOWithDefaults instantiates a new ThreadDumpDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewThreadDumpDTOWithDefaults() *ThreadDumpDTO {
	this := ThreadDumpDTO{}
	return &this
}

// GetNodeId returns the NodeId field value if set, zero value otherwise.
func (o *ThreadDumpDTO) GetNodeId() string {
	if o == nil || IsNil(o.NodeId) {
		var ret string
		return ret
	}
	return *o.NodeId
}

// GetNodeIdOk returns a tuple with the NodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThreadDumpDTO) GetNodeIdOk() (*string, bool) {
	if o == nil || IsNil(o.NodeId) {
		return nil, false
	}
	return o.NodeId, true
}

// HasNodeId returns a boolean if a field has been set.
func (o *ThreadDumpDTO) HasNodeId() bool {
	if o != nil && !IsNil(o.NodeId) {
		return true
	}

	return false
}

// SetNodeId gets a reference to the given string and assigns it to the NodeId field.
func (o *ThreadDumpDTO) SetNodeId(v string) {
	o.NodeId = &v
}

// GetNodeAddress returns the NodeAddress field value if set, zero value otherwise.
func (o *ThreadDumpDTO) GetNodeAddress() string {
	if o == nil || IsNil(o.NodeAddress) {
		var ret string
		return ret
	}
	return *o.NodeAddress
}

// GetNodeAddressOk returns a tuple with the NodeAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThreadDumpDTO) GetNodeAddressOk() (*string, bool) {
	if o == nil || IsNil(o.NodeAddress) {
		return nil, false
	}
	return o.NodeAddress, true
}

// HasNodeAddress returns a boolean if a field has been set.
func (o *ThreadDumpDTO) HasNodeAddress() bool {
	if o != nil && !IsNil(o.NodeAddress) {
		return true
	}

	return false
}

// SetNodeAddress gets a reference to the given string and assigns it to the NodeAddress field.
func (o *ThreadDumpDTO) SetNodeAddress(v string) {
	o.NodeAddress = &v
}

// GetApiPort returns the ApiPort field value if set, zero value otherwise.
func (o *ThreadDumpDTO) GetApiPort() int32 {
	if o == nil || IsNil(o.ApiPort) {
		var ret int32
		return ret
	}
	return *o.ApiPort
}

// GetApiPortOk returns a tuple with the ApiPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThreadDumpDTO) GetApiPortOk() (*int32, bool) {
	if o == nil || IsNil(o.ApiPort) {
		return nil, false
	}
	return o.ApiPort, true
}

// HasApiPort returns a boolean if a field has been set.
func (o *ThreadDumpDTO) HasApiPort() bool {
	if o != nil && !IsNil(o.ApiPort) {
		return true
	}

	return false
}

// SetApiPort gets a reference to the given int32 and assigns it to the ApiPort field.
func (o *ThreadDumpDTO) SetApiPort(v int32) {
	o.ApiPort = &v
}

// GetStackTrace returns the StackTrace field value if set, zero value otherwise.
func (o *ThreadDumpDTO) GetStackTrace() string {
	if o == nil || IsNil(o.StackTrace) {
		var ret string
		return ret
	}
	return *o.StackTrace
}

// GetStackTraceOk returns a tuple with the StackTrace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThreadDumpDTO) GetStackTraceOk() (*string, bool) {
	if o == nil || IsNil(o.StackTrace) {
		return nil, false
	}
	return o.StackTrace, true
}

// HasStackTrace returns a boolean if a field has been set.
func (o *ThreadDumpDTO) HasStackTrace() bool {
	if o != nil && !IsNil(o.StackTrace) {
		return true
	}

	return false
}

// SetStackTrace gets a reference to the given string and assigns it to the StackTrace field.
func (o *ThreadDumpDTO) SetStackTrace(v string) {
	o.StackTrace = &v
}

// GetThreadName returns the ThreadName field value if set, zero value otherwise.
func (o *ThreadDumpDTO) GetThreadName() string {
	if o == nil || IsNil(o.ThreadName) {
		var ret string
		return ret
	}
	return *o.ThreadName
}

// GetThreadNameOk returns a tuple with the ThreadName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThreadDumpDTO) GetThreadNameOk() (*string, bool) {
	if o == nil || IsNil(o.ThreadName) {
		return nil, false
	}
	return o.ThreadName, true
}

// HasThreadName returns a boolean if a field has been set.
func (o *ThreadDumpDTO) HasThreadName() bool {
	if o != nil && !IsNil(o.ThreadName) {
		return true
	}

	return false
}

// SetThreadName gets a reference to the given string and assigns it to the ThreadName field.
func (o *ThreadDumpDTO) SetThreadName(v string) {
	o.ThreadName = &v
}

// GetThreadActiveMillis returns the ThreadActiveMillis field value if set, zero value otherwise.
func (o *ThreadDumpDTO) GetThreadActiveMillis() int64 {
	if o == nil || IsNil(o.ThreadActiveMillis) {
		var ret int64
		return ret
	}
	return *o.ThreadActiveMillis
}

// GetThreadActiveMillisOk returns a tuple with the ThreadActiveMillis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThreadDumpDTO) GetThreadActiveMillisOk() (*int64, bool) {
	if o == nil || IsNil(o.ThreadActiveMillis) {
		return nil, false
	}
	return o.ThreadActiveMillis, true
}

// HasThreadActiveMillis returns a boolean if a field has been set.
func (o *ThreadDumpDTO) HasThreadActiveMillis() bool {
	if o != nil && !IsNil(o.ThreadActiveMillis) {
		return true
	}

	return false
}

// SetThreadActiveMillis gets a reference to the given int64 and assigns it to the ThreadActiveMillis field.
func (o *ThreadDumpDTO) SetThreadActiveMillis(v int64) {
	o.ThreadActiveMillis = &v
}

// GetTaskTerminated returns the TaskTerminated field value if set, zero value otherwise.
func (o *ThreadDumpDTO) GetTaskTerminated() bool {
	if o == nil || IsNil(o.TaskTerminated) {
		var ret bool
		return ret
	}
	return *o.TaskTerminated
}

// GetTaskTerminatedOk returns a tuple with the TaskTerminated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThreadDumpDTO) GetTaskTerminatedOk() (*bool, bool) {
	if o == nil || IsNil(o.TaskTerminated) {
		return nil, false
	}
	return o.TaskTerminated, true
}

// HasTaskTerminated returns a boolean if a field has been set.
func (o *ThreadDumpDTO) HasTaskTerminated() bool {
	if o != nil && !IsNil(o.TaskTerminated) {
		return true
	}

	return false
}

// SetTaskTerminated gets a reference to the given bool and assigns it to the TaskTerminated field.
func (o *ThreadDumpDTO) SetTaskTerminated(v bool) {
	o.TaskTerminated = &v
}

func (o ThreadDumpDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ThreadDumpDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NodeId) {
		toSerialize["nodeId"] = o.NodeId
	}
	if !IsNil(o.NodeAddress) {
		toSerialize["nodeAddress"] = o.NodeAddress
	}
	if !IsNil(o.ApiPort) {
		toSerialize["apiPort"] = o.ApiPort
	}
	if !IsNil(o.StackTrace) {
		toSerialize["stackTrace"] = o.StackTrace
	}
	if !IsNil(o.ThreadName) {
		toSerialize["threadName"] = o.ThreadName
	}
	if !IsNil(o.ThreadActiveMillis) {
		toSerialize["threadActiveMillis"] = o.ThreadActiveMillis
	}
	if !IsNil(o.TaskTerminated) {
		toSerialize["taskTerminated"] = o.TaskTerminated
	}
	return toSerialize, nil
}

type NullableThreadDumpDTO struct {
	value *ThreadDumpDTO
	isSet bool
}

func (v NullableThreadDumpDTO) Get() *ThreadDumpDTO {
	return v.value
}

func (v *NullableThreadDumpDTO) Set(val *ThreadDumpDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableThreadDumpDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableThreadDumpDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableThreadDumpDTO(val *ThreadDumpDTO) *NullableThreadDumpDTO {
	return &NullableThreadDumpDTO{value: val, isSet: true}
}

func (v NullableThreadDumpDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableThreadDumpDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


