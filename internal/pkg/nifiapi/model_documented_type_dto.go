/*
NiFi Rest API

The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.

API version: 2.0.0
Contact: dev@nifi.apache.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nifiapi

import (
	"encoding/json"
)

// checks if the DocumentedTypeDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DocumentedTypeDTO{}

// DocumentedTypeDTO struct for DocumentedTypeDTO
type DocumentedTypeDTO struct {
	// The fully qualified name of the type.
	Type *string `json:"type,omitempty"`
	Bundle *BundleDTO `json:"bundle,omitempty"`
	// If this type represents a ControllerService, this lists the APIs it implements.
	ControllerServiceApis []ControllerServiceApiDTO `json:"controllerServiceApis,omitempty"`
	// The description of the type.
	Description *string `json:"description,omitempty"`
	// Whether this type is restricted.
	Restricted *bool `json:"restricted,omitempty"`
	// The optional description of why the usage of this component is restricted.
	UsageRestriction *string `json:"usageRestriction,omitempty"`
	// An optional collection of explicit restrictions. If specified, these explicit restrictions will be enfored.
	ExplicitRestrictions []ExplicitRestrictionDTO `json:"explicitRestrictions,omitempty"`
	// The description of why the usage of this component is restricted.
	DeprecationReason *string `json:"deprecationReason,omitempty"`
	// The tags associated with this type.
	Tags []string `json:"tags,omitempty"`
}

// NewDocumentedTypeDTO instantiates a new DocumentedTypeDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDocumentedTypeDTO() *DocumentedTypeDTO {
	this := DocumentedTypeDTO{}
	return &this
}

// NewDocumentedTypeDTOWithDefaults instantiates a new DocumentedTypeDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDocumentedTypeDTOWithDefaults() *DocumentedTypeDTO {
	this := DocumentedTypeDTO{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *DocumentedTypeDTO) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentedTypeDTO) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *DocumentedTypeDTO) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *DocumentedTypeDTO) SetType(v string) {
	o.Type = &v
}

// GetBundle returns the Bundle field value if set, zero value otherwise.
func (o *DocumentedTypeDTO) GetBundle() BundleDTO {
	if o == nil || IsNil(o.Bundle) {
		var ret BundleDTO
		return ret
	}
	return *o.Bundle
}

// GetBundleOk returns a tuple with the Bundle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentedTypeDTO) GetBundleOk() (*BundleDTO, bool) {
	if o == nil || IsNil(o.Bundle) {
		return nil, false
	}
	return o.Bundle, true
}

// HasBundle returns a boolean if a field has been set.
func (o *DocumentedTypeDTO) HasBundle() bool {
	if o != nil && !IsNil(o.Bundle) {
		return true
	}

	return false
}

// SetBundle gets a reference to the given BundleDTO and assigns it to the Bundle field.
func (o *DocumentedTypeDTO) SetBundle(v BundleDTO) {
	o.Bundle = &v
}

// GetControllerServiceApis returns the ControllerServiceApis field value if set, zero value otherwise.
func (o *DocumentedTypeDTO) GetControllerServiceApis() []ControllerServiceApiDTO {
	if o == nil || IsNil(o.ControllerServiceApis) {
		var ret []ControllerServiceApiDTO
		return ret
	}
	return o.ControllerServiceApis
}

// GetControllerServiceApisOk returns a tuple with the ControllerServiceApis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentedTypeDTO) GetControllerServiceApisOk() ([]ControllerServiceApiDTO, bool) {
	if o == nil || IsNil(o.ControllerServiceApis) {
		return nil, false
	}
	return o.ControllerServiceApis, true
}

// HasControllerServiceApis returns a boolean if a field has been set.
func (o *DocumentedTypeDTO) HasControllerServiceApis() bool {
	if o != nil && !IsNil(o.ControllerServiceApis) {
		return true
	}

	return false
}

// SetControllerServiceApis gets a reference to the given []ControllerServiceApiDTO and assigns it to the ControllerServiceApis field.
func (o *DocumentedTypeDTO) SetControllerServiceApis(v []ControllerServiceApiDTO) {
	o.ControllerServiceApis = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *DocumentedTypeDTO) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentedTypeDTO) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *DocumentedTypeDTO) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *DocumentedTypeDTO) SetDescription(v string) {
	o.Description = &v
}

// GetRestricted returns the Restricted field value if set, zero value otherwise.
func (o *DocumentedTypeDTO) GetRestricted() bool {
	if o == nil || IsNil(o.Restricted) {
		var ret bool
		return ret
	}
	return *o.Restricted
}

// GetRestrictedOk returns a tuple with the Restricted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentedTypeDTO) GetRestrictedOk() (*bool, bool) {
	if o == nil || IsNil(o.Restricted) {
		return nil, false
	}
	return o.Restricted, true
}

// HasRestricted returns a boolean if a field has been set.
func (o *DocumentedTypeDTO) HasRestricted() bool {
	if o != nil && !IsNil(o.Restricted) {
		return true
	}

	return false
}

// SetRestricted gets a reference to the given bool and assigns it to the Restricted field.
func (o *DocumentedTypeDTO) SetRestricted(v bool) {
	o.Restricted = &v
}

// GetUsageRestriction returns the UsageRestriction field value if set, zero value otherwise.
func (o *DocumentedTypeDTO) GetUsageRestriction() string {
	if o == nil || IsNil(o.UsageRestriction) {
		var ret string
		return ret
	}
	return *o.UsageRestriction
}

// GetUsageRestrictionOk returns a tuple with the UsageRestriction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentedTypeDTO) GetUsageRestrictionOk() (*string, bool) {
	if o == nil || IsNil(o.UsageRestriction) {
		return nil, false
	}
	return o.UsageRestriction, true
}

// HasUsageRestriction returns a boolean if a field has been set.
func (o *DocumentedTypeDTO) HasUsageRestriction() bool {
	if o != nil && !IsNil(o.UsageRestriction) {
		return true
	}

	return false
}

// SetUsageRestriction gets a reference to the given string and assigns it to the UsageRestriction field.
func (o *DocumentedTypeDTO) SetUsageRestriction(v string) {
	o.UsageRestriction = &v
}

// GetExplicitRestrictions returns the ExplicitRestrictions field value if set, zero value otherwise.
func (o *DocumentedTypeDTO) GetExplicitRestrictions() []ExplicitRestrictionDTO {
	if o == nil || IsNil(o.ExplicitRestrictions) {
		var ret []ExplicitRestrictionDTO
		return ret
	}
	return o.ExplicitRestrictions
}

// GetExplicitRestrictionsOk returns a tuple with the ExplicitRestrictions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentedTypeDTO) GetExplicitRestrictionsOk() ([]ExplicitRestrictionDTO, bool) {
	if o == nil || IsNil(o.ExplicitRestrictions) {
		return nil, false
	}
	return o.ExplicitRestrictions, true
}

// HasExplicitRestrictions returns a boolean if a field has been set.
func (o *DocumentedTypeDTO) HasExplicitRestrictions() bool {
	if o != nil && !IsNil(o.ExplicitRestrictions) {
		return true
	}

	return false
}

// SetExplicitRestrictions gets a reference to the given []ExplicitRestrictionDTO and assigns it to the ExplicitRestrictions field.
func (o *DocumentedTypeDTO) SetExplicitRestrictions(v []ExplicitRestrictionDTO) {
	o.ExplicitRestrictions = v
}

// GetDeprecationReason returns the DeprecationReason field value if set, zero value otherwise.
func (o *DocumentedTypeDTO) GetDeprecationReason() string {
	if o == nil || IsNil(o.DeprecationReason) {
		var ret string
		return ret
	}
	return *o.DeprecationReason
}

// GetDeprecationReasonOk returns a tuple with the DeprecationReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentedTypeDTO) GetDeprecationReasonOk() (*string, bool) {
	if o == nil || IsNil(o.DeprecationReason) {
		return nil, false
	}
	return o.DeprecationReason, true
}

// HasDeprecationReason returns a boolean if a field has been set.
func (o *DocumentedTypeDTO) HasDeprecationReason() bool {
	if o != nil && !IsNil(o.DeprecationReason) {
		return true
	}

	return false
}

// SetDeprecationReason gets a reference to the given string and assigns it to the DeprecationReason field.
func (o *DocumentedTypeDTO) SetDeprecationReason(v string) {
	o.DeprecationReason = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *DocumentedTypeDTO) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentedTypeDTO) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *DocumentedTypeDTO) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *DocumentedTypeDTO) SetTags(v []string) {
	o.Tags = v
}

func (o DocumentedTypeDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DocumentedTypeDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Bundle) {
		toSerialize["bundle"] = o.Bundle
	}
	if !IsNil(o.ControllerServiceApis) {
		toSerialize["controllerServiceApis"] = o.ControllerServiceApis
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Restricted) {
		toSerialize["restricted"] = o.Restricted
	}
	if !IsNil(o.UsageRestriction) {
		toSerialize["usageRestriction"] = o.UsageRestriction
	}
	if !IsNil(o.ExplicitRestrictions) {
		toSerialize["explicitRestrictions"] = o.ExplicitRestrictions
	}
	if !IsNil(o.DeprecationReason) {
		toSerialize["deprecationReason"] = o.DeprecationReason
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	return toSerialize, nil
}

type NullableDocumentedTypeDTO struct {
	value *DocumentedTypeDTO
	isSet bool
}

func (v NullableDocumentedTypeDTO) Get() *DocumentedTypeDTO {
	return v.value
}

func (v *NullableDocumentedTypeDTO) Set(val *DocumentedTypeDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableDocumentedTypeDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableDocumentedTypeDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDocumentedTypeDTO(val *DocumentedTypeDTO) *NullableDocumentedTypeDTO {
	return &NullableDocumentedTypeDTO{value: val, isSet: true}
}

func (v NullableDocumentedTypeDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDocumentedTypeDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


