/*
NiFi Rest API

The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.

API version: 2.0.0
Contact: dev@nifi.apache.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nifiapi

import (
	"encoding/json"
)

// checks if the JVMDiagnosticsDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JVMDiagnosticsDTO{}

// JVMDiagnosticsDTO struct for JVMDiagnosticsDTO
type JVMDiagnosticsDTO struct {
	// Whether or not the NiFi instance is clustered
	Clustered *bool `json:"clustered,omitempty"`
	// Whether or not the node is connected to the cluster
	Connected *bool `json:"connected,omitempty"`
	AggregateSnapshot *JVMDiagnosticsSnapshotDTO `json:"aggregateSnapshot,omitempty"`
	// Node-wise breakdown of JVM diagnostic information
	NodeSnapshots []NodeJVMDiagnosticsSnapshotDTO `json:"nodeSnapshots,omitempty"`
}

// NewJVMDiagnosticsDTO instantiates a new JVMDiagnosticsDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJVMDiagnosticsDTO() *JVMDiagnosticsDTO {
	this := JVMDiagnosticsDTO{}
	return &this
}

// NewJVMDiagnosticsDTOWithDefaults instantiates a new JVMDiagnosticsDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJVMDiagnosticsDTOWithDefaults() *JVMDiagnosticsDTO {
	this := JVMDiagnosticsDTO{}
	return &this
}

// GetClustered returns the Clustered field value if set, zero value otherwise.
func (o *JVMDiagnosticsDTO) GetClustered() bool {
	if o == nil || IsNil(o.Clustered) {
		var ret bool
		return ret
	}
	return *o.Clustered
}

// GetClusteredOk returns a tuple with the Clustered field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JVMDiagnosticsDTO) GetClusteredOk() (*bool, bool) {
	if o == nil || IsNil(o.Clustered) {
		return nil, false
	}
	return o.Clustered, true
}

// HasClustered returns a boolean if a field has been set.
func (o *JVMDiagnosticsDTO) HasClustered() bool {
	if o != nil && !IsNil(o.Clustered) {
		return true
	}

	return false
}

// SetClustered gets a reference to the given bool and assigns it to the Clustered field.
func (o *JVMDiagnosticsDTO) SetClustered(v bool) {
	o.Clustered = &v
}

// GetConnected returns the Connected field value if set, zero value otherwise.
func (o *JVMDiagnosticsDTO) GetConnected() bool {
	if o == nil || IsNil(o.Connected) {
		var ret bool
		return ret
	}
	return *o.Connected
}

// GetConnectedOk returns a tuple with the Connected field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JVMDiagnosticsDTO) GetConnectedOk() (*bool, bool) {
	if o == nil || IsNil(o.Connected) {
		return nil, false
	}
	return o.Connected, true
}

// HasConnected returns a boolean if a field has been set.
func (o *JVMDiagnosticsDTO) HasConnected() bool {
	if o != nil && !IsNil(o.Connected) {
		return true
	}

	return false
}

// SetConnected gets a reference to the given bool and assigns it to the Connected field.
func (o *JVMDiagnosticsDTO) SetConnected(v bool) {
	o.Connected = &v
}

// GetAggregateSnapshot returns the AggregateSnapshot field value if set, zero value otherwise.
func (o *JVMDiagnosticsDTO) GetAggregateSnapshot() JVMDiagnosticsSnapshotDTO {
	if o == nil || IsNil(o.AggregateSnapshot) {
		var ret JVMDiagnosticsSnapshotDTO
		return ret
	}
	return *o.AggregateSnapshot
}

// GetAggregateSnapshotOk returns a tuple with the AggregateSnapshot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JVMDiagnosticsDTO) GetAggregateSnapshotOk() (*JVMDiagnosticsSnapshotDTO, bool) {
	if o == nil || IsNil(o.AggregateSnapshot) {
		return nil, false
	}
	return o.AggregateSnapshot, true
}

// HasAggregateSnapshot returns a boolean if a field has been set.
func (o *JVMDiagnosticsDTO) HasAggregateSnapshot() bool {
	if o != nil && !IsNil(o.AggregateSnapshot) {
		return true
	}

	return false
}

// SetAggregateSnapshot gets a reference to the given JVMDiagnosticsSnapshotDTO and assigns it to the AggregateSnapshot field.
func (o *JVMDiagnosticsDTO) SetAggregateSnapshot(v JVMDiagnosticsSnapshotDTO) {
	o.AggregateSnapshot = &v
}

// GetNodeSnapshots returns the NodeSnapshots field value if set, zero value otherwise.
func (o *JVMDiagnosticsDTO) GetNodeSnapshots() []NodeJVMDiagnosticsSnapshotDTO {
	if o == nil || IsNil(o.NodeSnapshots) {
		var ret []NodeJVMDiagnosticsSnapshotDTO
		return ret
	}
	return o.NodeSnapshots
}

// GetNodeSnapshotsOk returns a tuple with the NodeSnapshots field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JVMDiagnosticsDTO) GetNodeSnapshotsOk() ([]NodeJVMDiagnosticsSnapshotDTO, bool) {
	if o == nil || IsNil(o.NodeSnapshots) {
		return nil, false
	}
	return o.NodeSnapshots, true
}

// HasNodeSnapshots returns a boolean if a field has been set.
func (o *JVMDiagnosticsDTO) HasNodeSnapshots() bool {
	if o != nil && !IsNil(o.NodeSnapshots) {
		return true
	}

	return false
}

// SetNodeSnapshots gets a reference to the given []NodeJVMDiagnosticsSnapshotDTO and assigns it to the NodeSnapshots field.
func (o *JVMDiagnosticsDTO) SetNodeSnapshots(v []NodeJVMDiagnosticsSnapshotDTO) {
	o.NodeSnapshots = v
}

func (o JVMDiagnosticsDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JVMDiagnosticsDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Clustered) {
		toSerialize["clustered"] = o.Clustered
	}
	if !IsNil(o.Connected) {
		toSerialize["connected"] = o.Connected
	}
	if !IsNil(o.AggregateSnapshot) {
		toSerialize["aggregateSnapshot"] = o.AggregateSnapshot
	}
	if !IsNil(o.NodeSnapshots) {
		toSerialize["nodeSnapshots"] = o.NodeSnapshots
	}
	return toSerialize, nil
}

type NullableJVMDiagnosticsDTO struct {
	value *JVMDiagnosticsDTO
	isSet bool
}

func (v NullableJVMDiagnosticsDTO) Get() *JVMDiagnosticsDTO {
	return v.value
}

func (v *NullableJVMDiagnosticsDTO) Set(val *JVMDiagnosticsDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableJVMDiagnosticsDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableJVMDiagnosticsDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJVMDiagnosticsDTO(val *JVMDiagnosticsDTO) *NullableJVMDiagnosticsDTO {
	return &NullableJVMDiagnosticsDTO{value: val, isSet: true}
}

func (v NullableJVMDiagnosticsDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJVMDiagnosticsDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


