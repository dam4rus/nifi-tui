/*
NiFi Rest API

The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.

API version: 2.0.0
Contact: dev@nifi.apache.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nifiapi

import (
	"encoding/json"
)

// checks if the DynamicProperty type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DynamicProperty{}

// DynamicProperty struct for DynamicProperty
type DynamicProperty struct {
	// The description of the dynamic property name
	Name *string `json:"name,omitempty"`
	// The description of the dynamic property value
	Value *string `json:"value,omitempty"`
	// The description of the dynamic property
	Description *string `json:"description,omitempty"`
	// The scope of the expression language support
	ExpressionLanguageScope *string `json:"expressionLanguageScope,omitempty"`
}

// NewDynamicProperty instantiates a new DynamicProperty object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDynamicProperty() *DynamicProperty {
	this := DynamicProperty{}
	return &this
}

// NewDynamicPropertyWithDefaults instantiates a new DynamicProperty object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDynamicPropertyWithDefaults() *DynamicProperty {
	this := DynamicProperty{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DynamicProperty) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicProperty) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DynamicProperty) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DynamicProperty) SetName(v string) {
	o.Name = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *DynamicProperty) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicProperty) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *DynamicProperty) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *DynamicProperty) SetValue(v string) {
	o.Value = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *DynamicProperty) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicProperty) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *DynamicProperty) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *DynamicProperty) SetDescription(v string) {
	o.Description = &v
}

// GetExpressionLanguageScope returns the ExpressionLanguageScope field value if set, zero value otherwise.
func (o *DynamicProperty) GetExpressionLanguageScope() string {
	if o == nil || IsNil(o.ExpressionLanguageScope) {
		var ret string
		return ret
	}
	return *o.ExpressionLanguageScope
}

// GetExpressionLanguageScopeOk returns a tuple with the ExpressionLanguageScope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicProperty) GetExpressionLanguageScopeOk() (*string, bool) {
	if o == nil || IsNil(o.ExpressionLanguageScope) {
		return nil, false
	}
	return o.ExpressionLanguageScope, true
}

// HasExpressionLanguageScope returns a boolean if a field has been set.
func (o *DynamicProperty) HasExpressionLanguageScope() bool {
	if o != nil && !IsNil(o.ExpressionLanguageScope) {
		return true
	}

	return false
}

// SetExpressionLanguageScope gets a reference to the given string and assigns it to the ExpressionLanguageScope field.
func (o *DynamicProperty) SetExpressionLanguageScope(v string) {
	o.ExpressionLanguageScope = &v
}

func (o DynamicProperty) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DynamicProperty) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.ExpressionLanguageScope) {
		toSerialize["expressionLanguageScope"] = o.ExpressionLanguageScope
	}
	return toSerialize, nil
}

type NullableDynamicProperty struct {
	value *DynamicProperty
	isSet bool
}

func (v NullableDynamicProperty) Get() *DynamicProperty {
	return v.value
}

func (v *NullableDynamicProperty) Set(val *DynamicProperty) {
	v.value = val
	v.isSet = true
}

func (v NullableDynamicProperty) IsSet() bool {
	return v.isSet
}

func (v *NullableDynamicProperty) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDynamicProperty(val *DynamicProperty) *NullableDynamicProperty {
	return &NullableDynamicProperty{value: val, isSet: true}
}

func (v NullableDynamicProperty) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDynamicProperty) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


