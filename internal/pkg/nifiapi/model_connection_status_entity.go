/*
NiFi Rest API

The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.

API version: 2.0.0
Contact: dev@nifi.apache.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nifiapi

import (
	"encoding/json"
)

// checks if the ConnectionStatusEntity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConnectionStatusEntity{}

// ConnectionStatusEntity struct for ConnectionStatusEntity
type ConnectionStatusEntity struct {
	ConnectionStatus *ConnectionStatusDTO `json:"connectionStatus,omitempty"`
	// Indicates whether the user can read a given resource.
	CanRead *bool `json:"canRead,omitempty"`
}

// NewConnectionStatusEntity instantiates a new ConnectionStatusEntity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectionStatusEntity() *ConnectionStatusEntity {
	this := ConnectionStatusEntity{}
	return &this
}

// NewConnectionStatusEntityWithDefaults instantiates a new ConnectionStatusEntity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectionStatusEntityWithDefaults() *ConnectionStatusEntity {
	this := ConnectionStatusEntity{}
	return &this
}

// GetConnectionStatus returns the ConnectionStatus field value if set, zero value otherwise.
func (o *ConnectionStatusEntity) GetConnectionStatus() ConnectionStatusDTO {
	if o == nil || IsNil(o.ConnectionStatus) {
		var ret ConnectionStatusDTO
		return ret
	}
	return *o.ConnectionStatus
}

// GetConnectionStatusOk returns a tuple with the ConnectionStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionStatusEntity) GetConnectionStatusOk() (*ConnectionStatusDTO, bool) {
	if o == nil || IsNil(o.ConnectionStatus) {
		return nil, false
	}
	return o.ConnectionStatus, true
}

// HasConnectionStatus returns a boolean if a field has been set.
func (o *ConnectionStatusEntity) HasConnectionStatus() bool {
	if o != nil && !IsNil(o.ConnectionStatus) {
		return true
	}

	return false
}

// SetConnectionStatus gets a reference to the given ConnectionStatusDTO and assigns it to the ConnectionStatus field.
func (o *ConnectionStatusEntity) SetConnectionStatus(v ConnectionStatusDTO) {
	o.ConnectionStatus = &v
}

// GetCanRead returns the CanRead field value if set, zero value otherwise.
func (o *ConnectionStatusEntity) GetCanRead() bool {
	if o == nil || IsNil(o.CanRead) {
		var ret bool
		return ret
	}
	return *o.CanRead
}

// GetCanReadOk returns a tuple with the CanRead field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionStatusEntity) GetCanReadOk() (*bool, bool) {
	if o == nil || IsNil(o.CanRead) {
		return nil, false
	}
	return o.CanRead, true
}

// HasCanRead returns a boolean if a field has been set.
func (o *ConnectionStatusEntity) HasCanRead() bool {
	if o != nil && !IsNil(o.CanRead) {
		return true
	}

	return false
}

// SetCanRead gets a reference to the given bool and assigns it to the CanRead field.
func (o *ConnectionStatusEntity) SetCanRead(v bool) {
	o.CanRead = &v
}

func (o ConnectionStatusEntity) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConnectionStatusEntity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ConnectionStatus) {
		toSerialize["connectionStatus"] = o.ConnectionStatus
	}
	if !IsNil(o.CanRead) {
		toSerialize["canRead"] = o.CanRead
	}
	return toSerialize, nil
}

type NullableConnectionStatusEntity struct {
	value *ConnectionStatusEntity
	isSet bool
}

func (v NullableConnectionStatusEntity) Get() *ConnectionStatusEntity {
	return v.value
}

func (v *NullableConnectionStatusEntity) Set(val *ConnectionStatusEntity) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectionStatusEntity) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectionStatusEntity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectionStatusEntity(val *ConnectionStatusEntity) *NullableConnectionStatusEntity {
	return &NullableConnectionStatusEntity{value: val, isSet: true}
}

func (v NullableConnectionStatusEntity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectionStatusEntity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


