/*
NiFi Rest API

The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.

API version: 2.0.0
Contact: dev@nifi.apache.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nifiapi

import (
	"encoding/json"
)

// checks if the SystemDiagnosticsDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SystemDiagnosticsDTO{}

// SystemDiagnosticsDTO struct for SystemDiagnosticsDTO
type SystemDiagnosticsDTO struct {
	AggregateSnapshot *SystemDiagnosticsSnapshotDTO `json:"aggregateSnapshot,omitempty"`
	// A systems diagnostics snapshot for each node in the cluster. If the NiFi instance is a standalone instance, rather than a cluster, this may be null.
	NodeSnapshots []NodeSystemDiagnosticsSnapshotDTO `json:"nodeSnapshots,omitempty"`
}

// NewSystemDiagnosticsDTO instantiates a new SystemDiagnosticsDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSystemDiagnosticsDTO() *SystemDiagnosticsDTO {
	this := SystemDiagnosticsDTO{}
	return &this
}

// NewSystemDiagnosticsDTOWithDefaults instantiates a new SystemDiagnosticsDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSystemDiagnosticsDTOWithDefaults() *SystemDiagnosticsDTO {
	this := SystemDiagnosticsDTO{}
	return &this
}

// GetAggregateSnapshot returns the AggregateSnapshot field value if set, zero value otherwise.
func (o *SystemDiagnosticsDTO) GetAggregateSnapshot() SystemDiagnosticsSnapshotDTO {
	if o == nil || IsNil(o.AggregateSnapshot) {
		var ret SystemDiagnosticsSnapshotDTO
		return ret
	}
	return *o.AggregateSnapshot
}

// GetAggregateSnapshotOk returns a tuple with the AggregateSnapshot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemDiagnosticsDTO) GetAggregateSnapshotOk() (*SystemDiagnosticsSnapshotDTO, bool) {
	if o == nil || IsNil(o.AggregateSnapshot) {
		return nil, false
	}
	return o.AggregateSnapshot, true
}

// HasAggregateSnapshot returns a boolean if a field has been set.
func (o *SystemDiagnosticsDTO) HasAggregateSnapshot() bool {
	if o != nil && !IsNil(o.AggregateSnapshot) {
		return true
	}

	return false
}

// SetAggregateSnapshot gets a reference to the given SystemDiagnosticsSnapshotDTO and assigns it to the AggregateSnapshot field.
func (o *SystemDiagnosticsDTO) SetAggregateSnapshot(v SystemDiagnosticsSnapshotDTO) {
	o.AggregateSnapshot = &v
}

// GetNodeSnapshots returns the NodeSnapshots field value if set, zero value otherwise.
func (o *SystemDiagnosticsDTO) GetNodeSnapshots() []NodeSystemDiagnosticsSnapshotDTO {
	if o == nil || IsNil(o.NodeSnapshots) {
		var ret []NodeSystemDiagnosticsSnapshotDTO
		return ret
	}
	return o.NodeSnapshots
}

// GetNodeSnapshotsOk returns a tuple with the NodeSnapshots field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemDiagnosticsDTO) GetNodeSnapshotsOk() ([]NodeSystemDiagnosticsSnapshotDTO, bool) {
	if o == nil || IsNil(o.NodeSnapshots) {
		return nil, false
	}
	return o.NodeSnapshots, true
}

// HasNodeSnapshots returns a boolean if a field has been set.
func (o *SystemDiagnosticsDTO) HasNodeSnapshots() bool {
	if o != nil && !IsNil(o.NodeSnapshots) {
		return true
	}

	return false
}

// SetNodeSnapshots gets a reference to the given []NodeSystemDiagnosticsSnapshotDTO and assigns it to the NodeSnapshots field.
func (o *SystemDiagnosticsDTO) SetNodeSnapshots(v []NodeSystemDiagnosticsSnapshotDTO) {
	o.NodeSnapshots = v
}

func (o SystemDiagnosticsDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SystemDiagnosticsDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AggregateSnapshot) {
		toSerialize["aggregateSnapshot"] = o.AggregateSnapshot
	}
	if !IsNil(o.NodeSnapshots) {
		toSerialize["nodeSnapshots"] = o.NodeSnapshots
	}
	return toSerialize, nil
}

type NullableSystemDiagnosticsDTO struct {
	value *SystemDiagnosticsDTO
	isSet bool
}

func (v NullableSystemDiagnosticsDTO) Get() *SystemDiagnosticsDTO {
	return v.value
}

func (v *NullableSystemDiagnosticsDTO) Set(val *SystemDiagnosticsDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableSystemDiagnosticsDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableSystemDiagnosticsDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSystemDiagnosticsDTO(val *SystemDiagnosticsDTO) *NullableSystemDiagnosticsDTO {
	return &NullableSystemDiagnosticsDTO{value: val, isSet: true}
}

func (v NullableSystemDiagnosticsDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSystemDiagnosticsDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


