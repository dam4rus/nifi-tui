/*
NiFi Rest API

The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.

API version: 2.0.0
Contact: dev@nifi.apache.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nifiapi

import (
	"encoding/json"
)

// checks if the SchedulingDefaults type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SchedulingDefaults{}

// SchedulingDefaults struct for SchedulingDefaults
type SchedulingDefaults struct {
	// The name of the default scheduling strategy
	DefaultSchedulingStrategy *string `json:"defaultSchedulingStrategy,omitempty"`
	// The default scheduling period in milliseconds
	DefaultSchedulingPeriodMillis *int64 `json:"defaultSchedulingPeriodMillis,omitempty"`
	// The default penalization period in milliseconds
	PenalizationPeriodMillis *int64 `json:"penalizationPeriodMillis,omitempty"`
	// The default yield duration in milliseconds
	YieldDurationMillis *int64 `json:"yieldDurationMillis,omitempty"`
	// The default run duration in nano-seconds
	DefaultRunDurationNanos *int64 `json:"defaultRunDurationNanos,omitempty"`
	// The default concurrent tasks
	DefaultMaxConcurrentTasks *string `json:"defaultMaxConcurrentTasks,omitempty"`
	// The default concurrent tasks for each scheduling strategy
	DefaultConcurrentTasksBySchedulingStrategy *map[string]int32 `json:"defaultConcurrentTasksBySchedulingStrategy,omitempty"`
	// The default scheduling period for each scheduling strategy
	DefaultSchedulingPeriodsBySchedulingStrategy *map[string]string `json:"defaultSchedulingPeriodsBySchedulingStrategy,omitempty"`
}

// NewSchedulingDefaults instantiates a new SchedulingDefaults object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchedulingDefaults() *SchedulingDefaults {
	this := SchedulingDefaults{}
	return &this
}

// NewSchedulingDefaultsWithDefaults instantiates a new SchedulingDefaults object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchedulingDefaultsWithDefaults() *SchedulingDefaults {
	this := SchedulingDefaults{}
	return &this
}

// GetDefaultSchedulingStrategy returns the DefaultSchedulingStrategy field value if set, zero value otherwise.
func (o *SchedulingDefaults) GetDefaultSchedulingStrategy() string {
	if o == nil || IsNil(o.DefaultSchedulingStrategy) {
		var ret string
		return ret
	}
	return *o.DefaultSchedulingStrategy
}

// GetDefaultSchedulingStrategyOk returns a tuple with the DefaultSchedulingStrategy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchedulingDefaults) GetDefaultSchedulingStrategyOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultSchedulingStrategy) {
		return nil, false
	}
	return o.DefaultSchedulingStrategy, true
}

// HasDefaultSchedulingStrategy returns a boolean if a field has been set.
func (o *SchedulingDefaults) HasDefaultSchedulingStrategy() bool {
	if o != nil && !IsNil(o.DefaultSchedulingStrategy) {
		return true
	}

	return false
}

// SetDefaultSchedulingStrategy gets a reference to the given string and assigns it to the DefaultSchedulingStrategy field.
func (o *SchedulingDefaults) SetDefaultSchedulingStrategy(v string) {
	o.DefaultSchedulingStrategy = &v
}

// GetDefaultSchedulingPeriodMillis returns the DefaultSchedulingPeriodMillis field value if set, zero value otherwise.
func (o *SchedulingDefaults) GetDefaultSchedulingPeriodMillis() int64 {
	if o == nil || IsNil(o.DefaultSchedulingPeriodMillis) {
		var ret int64
		return ret
	}
	return *o.DefaultSchedulingPeriodMillis
}

// GetDefaultSchedulingPeriodMillisOk returns a tuple with the DefaultSchedulingPeriodMillis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchedulingDefaults) GetDefaultSchedulingPeriodMillisOk() (*int64, bool) {
	if o == nil || IsNil(o.DefaultSchedulingPeriodMillis) {
		return nil, false
	}
	return o.DefaultSchedulingPeriodMillis, true
}

// HasDefaultSchedulingPeriodMillis returns a boolean if a field has been set.
func (o *SchedulingDefaults) HasDefaultSchedulingPeriodMillis() bool {
	if o != nil && !IsNil(o.DefaultSchedulingPeriodMillis) {
		return true
	}

	return false
}

// SetDefaultSchedulingPeriodMillis gets a reference to the given int64 and assigns it to the DefaultSchedulingPeriodMillis field.
func (o *SchedulingDefaults) SetDefaultSchedulingPeriodMillis(v int64) {
	o.DefaultSchedulingPeriodMillis = &v
}

// GetPenalizationPeriodMillis returns the PenalizationPeriodMillis field value if set, zero value otherwise.
func (o *SchedulingDefaults) GetPenalizationPeriodMillis() int64 {
	if o == nil || IsNil(o.PenalizationPeriodMillis) {
		var ret int64
		return ret
	}
	return *o.PenalizationPeriodMillis
}

// GetPenalizationPeriodMillisOk returns a tuple with the PenalizationPeriodMillis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchedulingDefaults) GetPenalizationPeriodMillisOk() (*int64, bool) {
	if o == nil || IsNil(o.PenalizationPeriodMillis) {
		return nil, false
	}
	return o.PenalizationPeriodMillis, true
}

// HasPenalizationPeriodMillis returns a boolean if a field has been set.
func (o *SchedulingDefaults) HasPenalizationPeriodMillis() bool {
	if o != nil && !IsNil(o.PenalizationPeriodMillis) {
		return true
	}

	return false
}

// SetPenalizationPeriodMillis gets a reference to the given int64 and assigns it to the PenalizationPeriodMillis field.
func (o *SchedulingDefaults) SetPenalizationPeriodMillis(v int64) {
	o.PenalizationPeriodMillis = &v
}

// GetYieldDurationMillis returns the YieldDurationMillis field value if set, zero value otherwise.
func (o *SchedulingDefaults) GetYieldDurationMillis() int64 {
	if o == nil || IsNil(o.YieldDurationMillis) {
		var ret int64
		return ret
	}
	return *o.YieldDurationMillis
}

// GetYieldDurationMillisOk returns a tuple with the YieldDurationMillis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchedulingDefaults) GetYieldDurationMillisOk() (*int64, bool) {
	if o == nil || IsNil(o.YieldDurationMillis) {
		return nil, false
	}
	return o.YieldDurationMillis, true
}

// HasYieldDurationMillis returns a boolean if a field has been set.
func (o *SchedulingDefaults) HasYieldDurationMillis() bool {
	if o != nil && !IsNil(o.YieldDurationMillis) {
		return true
	}

	return false
}

// SetYieldDurationMillis gets a reference to the given int64 and assigns it to the YieldDurationMillis field.
func (o *SchedulingDefaults) SetYieldDurationMillis(v int64) {
	o.YieldDurationMillis = &v
}

// GetDefaultRunDurationNanos returns the DefaultRunDurationNanos field value if set, zero value otherwise.
func (o *SchedulingDefaults) GetDefaultRunDurationNanos() int64 {
	if o == nil || IsNil(o.DefaultRunDurationNanos) {
		var ret int64
		return ret
	}
	return *o.DefaultRunDurationNanos
}

// GetDefaultRunDurationNanosOk returns a tuple with the DefaultRunDurationNanos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchedulingDefaults) GetDefaultRunDurationNanosOk() (*int64, bool) {
	if o == nil || IsNil(o.DefaultRunDurationNanos) {
		return nil, false
	}
	return o.DefaultRunDurationNanos, true
}

// HasDefaultRunDurationNanos returns a boolean if a field has been set.
func (o *SchedulingDefaults) HasDefaultRunDurationNanos() bool {
	if o != nil && !IsNil(o.DefaultRunDurationNanos) {
		return true
	}

	return false
}

// SetDefaultRunDurationNanos gets a reference to the given int64 and assigns it to the DefaultRunDurationNanos field.
func (o *SchedulingDefaults) SetDefaultRunDurationNanos(v int64) {
	o.DefaultRunDurationNanos = &v
}

// GetDefaultMaxConcurrentTasks returns the DefaultMaxConcurrentTasks field value if set, zero value otherwise.
func (o *SchedulingDefaults) GetDefaultMaxConcurrentTasks() string {
	if o == nil || IsNil(o.DefaultMaxConcurrentTasks) {
		var ret string
		return ret
	}
	return *o.DefaultMaxConcurrentTasks
}

// GetDefaultMaxConcurrentTasksOk returns a tuple with the DefaultMaxConcurrentTasks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchedulingDefaults) GetDefaultMaxConcurrentTasksOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultMaxConcurrentTasks) {
		return nil, false
	}
	return o.DefaultMaxConcurrentTasks, true
}

// HasDefaultMaxConcurrentTasks returns a boolean if a field has been set.
func (o *SchedulingDefaults) HasDefaultMaxConcurrentTasks() bool {
	if o != nil && !IsNil(o.DefaultMaxConcurrentTasks) {
		return true
	}

	return false
}

// SetDefaultMaxConcurrentTasks gets a reference to the given string and assigns it to the DefaultMaxConcurrentTasks field.
func (o *SchedulingDefaults) SetDefaultMaxConcurrentTasks(v string) {
	o.DefaultMaxConcurrentTasks = &v
}

// GetDefaultConcurrentTasksBySchedulingStrategy returns the DefaultConcurrentTasksBySchedulingStrategy field value if set, zero value otherwise.
func (o *SchedulingDefaults) GetDefaultConcurrentTasksBySchedulingStrategy() map[string]int32 {
	if o == nil || IsNil(o.DefaultConcurrentTasksBySchedulingStrategy) {
		var ret map[string]int32
		return ret
	}
	return *o.DefaultConcurrentTasksBySchedulingStrategy
}

// GetDefaultConcurrentTasksBySchedulingStrategyOk returns a tuple with the DefaultConcurrentTasksBySchedulingStrategy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchedulingDefaults) GetDefaultConcurrentTasksBySchedulingStrategyOk() (*map[string]int32, bool) {
	if o == nil || IsNil(o.DefaultConcurrentTasksBySchedulingStrategy) {
		return nil, false
	}
	return o.DefaultConcurrentTasksBySchedulingStrategy, true
}

// HasDefaultConcurrentTasksBySchedulingStrategy returns a boolean if a field has been set.
func (o *SchedulingDefaults) HasDefaultConcurrentTasksBySchedulingStrategy() bool {
	if o != nil && !IsNil(o.DefaultConcurrentTasksBySchedulingStrategy) {
		return true
	}

	return false
}

// SetDefaultConcurrentTasksBySchedulingStrategy gets a reference to the given map[string]int32 and assigns it to the DefaultConcurrentTasksBySchedulingStrategy field.
func (o *SchedulingDefaults) SetDefaultConcurrentTasksBySchedulingStrategy(v map[string]int32) {
	o.DefaultConcurrentTasksBySchedulingStrategy = &v
}

// GetDefaultSchedulingPeriodsBySchedulingStrategy returns the DefaultSchedulingPeriodsBySchedulingStrategy field value if set, zero value otherwise.
func (o *SchedulingDefaults) GetDefaultSchedulingPeriodsBySchedulingStrategy() map[string]string {
	if o == nil || IsNil(o.DefaultSchedulingPeriodsBySchedulingStrategy) {
		var ret map[string]string
		return ret
	}
	return *o.DefaultSchedulingPeriodsBySchedulingStrategy
}

// GetDefaultSchedulingPeriodsBySchedulingStrategyOk returns a tuple with the DefaultSchedulingPeriodsBySchedulingStrategy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchedulingDefaults) GetDefaultSchedulingPeriodsBySchedulingStrategyOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.DefaultSchedulingPeriodsBySchedulingStrategy) {
		return nil, false
	}
	return o.DefaultSchedulingPeriodsBySchedulingStrategy, true
}

// HasDefaultSchedulingPeriodsBySchedulingStrategy returns a boolean if a field has been set.
func (o *SchedulingDefaults) HasDefaultSchedulingPeriodsBySchedulingStrategy() bool {
	if o != nil && !IsNil(o.DefaultSchedulingPeriodsBySchedulingStrategy) {
		return true
	}

	return false
}

// SetDefaultSchedulingPeriodsBySchedulingStrategy gets a reference to the given map[string]string and assigns it to the DefaultSchedulingPeriodsBySchedulingStrategy field.
func (o *SchedulingDefaults) SetDefaultSchedulingPeriodsBySchedulingStrategy(v map[string]string) {
	o.DefaultSchedulingPeriodsBySchedulingStrategy = &v
}

func (o SchedulingDefaults) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SchedulingDefaults) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DefaultSchedulingStrategy) {
		toSerialize["defaultSchedulingStrategy"] = o.DefaultSchedulingStrategy
	}
	if !IsNil(o.DefaultSchedulingPeriodMillis) {
		toSerialize["defaultSchedulingPeriodMillis"] = o.DefaultSchedulingPeriodMillis
	}
	if !IsNil(o.PenalizationPeriodMillis) {
		toSerialize["penalizationPeriodMillis"] = o.PenalizationPeriodMillis
	}
	if !IsNil(o.YieldDurationMillis) {
		toSerialize["yieldDurationMillis"] = o.YieldDurationMillis
	}
	if !IsNil(o.DefaultRunDurationNanos) {
		toSerialize["defaultRunDurationNanos"] = o.DefaultRunDurationNanos
	}
	if !IsNil(o.DefaultMaxConcurrentTasks) {
		toSerialize["defaultMaxConcurrentTasks"] = o.DefaultMaxConcurrentTasks
	}
	if !IsNil(o.DefaultConcurrentTasksBySchedulingStrategy) {
		toSerialize["defaultConcurrentTasksBySchedulingStrategy"] = o.DefaultConcurrentTasksBySchedulingStrategy
	}
	if !IsNil(o.DefaultSchedulingPeriodsBySchedulingStrategy) {
		toSerialize["defaultSchedulingPeriodsBySchedulingStrategy"] = o.DefaultSchedulingPeriodsBySchedulingStrategy
	}
	return toSerialize, nil
}

type NullableSchedulingDefaults struct {
	value *SchedulingDefaults
	isSet bool
}

func (v NullableSchedulingDefaults) Get() *SchedulingDefaults {
	return v.value
}

func (v *NullableSchedulingDefaults) Set(val *SchedulingDefaults) {
	v.value = val
	v.isSet = true
}

func (v NullableSchedulingDefaults) IsSet() bool {
	return v.isSet
}

func (v *NullableSchedulingDefaults) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchedulingDefaults(val *SchedulingDefaults) *NullableSchedulingDefaults {
	return &NullableSchedulingDefaults{value: val, isSet: true}
}

func (v NullableSchedulingDefaults) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchedulingDefaults) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


