/*
NiFi Rest API

The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.

API version: 2.0.0
Contact: dev@nifi.apache.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nifiapi

import (
	"encoding/json"
)

// checks if the ReportingTaskDefinition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReportingTaskDefinition{}

// ReportingTaskDefinition struct for ReportingTaskDefinition
type ReportingTaskDefinition struct {
	// The group name of the bundle that provides the referenced type.
	Group *string `json:"group,omitempty"`
	// The artifact name of the bundle that provides the referenced type.
	Artifact *string `json:"artifact,omitempty"`
	// The version of the bundle that provides the referenced type.
	Version *string `json:"version,omitempty"`
	// The fully-qualified class type
	Type string `json:"type"`
	// The description of the type.
	TypeDescription *string `json:"typeDescription,omitempty"`
	BuildInfo *BuildInfo `json:"buildInfo,omitempty"`
	// If this type represents a provider for an interface, this lists the APIs it implements
	ProvidedApiImplementations []DefinedType `json:"providedApiImplementations,omitempty"`
	// The tags associated with this type
	Tags []string `json:"tags,omitempty"`
	// The names of other component types that may be related
	SeeAlso []string `json:"seeAlso,omitempty"`
	// Whether or not the component has been deprecated
	Deprecated *bool `json:"deprecated,omitempty"`
	// If this component has been deprecated, this optional field can be used to provide an explanation
	DeprecationReason *string `json:"deprecationReason,omitempty"`
	// If this component has been deprecated, this optional field provides alternatives to use
	DeprecationAlternatives []string `json:"deprecationAlternatives,omitempty"`
	// Whether or not the component has a general restriction
	Restricted *bool `json:"restricted,omitempty"`
	// An optional description of the general restriction
	RestrictedExplanation *string `json:"restrictedExplanation,omitempty"`
	// Explicit restrictions that indicate a require permission to use the component
	ExplicitRestrictions []Restriction `json:"explicitRestrictions,omitempty"`
	Stateful *Stateful `json:"stateful,omitempty"`
	// The system resource considerations for the given component
	SystemResourceConsiderations []SystemResourceConsideration `json:"systemResourceConsiderations,omitempty"`
	// Indicates if the component has additional details documentation
	AdditionalDetails *bool `json:"additionalDetails,omitempty"`
	// Descriptions of configuration properties applicable to this component.
	PropertyDescriptors *map[string]PropertyDescriptor `json:"propertyDescriptors,omitempty"`
	// Whether or not this component makes use of dynamic (user-set) properties.
	SupportsDynamicProperties *bool `json:"supportsDynamicProperties,omitempty"`
	// Describes the dynamic properties supported by this component
	DynamicProperties []DynamicProperty `json:"dynamicProperties,omitempty"`
	// The supported scheduling strategies, such as TIME_DRIVER or CRON.
	SupportedSchedulingStrategies []string `json:"supportedSchedulingStrategies,omitempty"`
	// The default scheduling strategy for the reporting task.
	DefaultSchedulingStrategy *string `json:"defaultSchedulingStrategy,omitempty"`
	// The default scheduling period for each scheduling strategy. The scheduling period is expected to be a time period, such as \"30 sec\".
	DefaultSchedulingPeriodBySchedulingStrategy *map[string]string `json:"defaultSchedulingPeriodBySchedulingStrategy,omitempty"`
}

// NewReportingTaskDefinition instantiates a new ReportingTaskDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReportingTaskDefinition(type_ string) *ReportingTaskDefinition {
	this := ReportingTaskDefinition{}
	this.Type = type_
	return &this
}

// NewReportingTaskDefinitionWithDefaults instantiates a new ReportingTaskDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReportingTaskDefinitionWithDefaults() *ReportingTaskDefinition {
	this := ReportingTaskDefinition{}
	return &this
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *ReportingTaskDefinition) GetGroup() string {
	if o == nil || IsNil(o.Group) {
		var ret string
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportingTaskDefinition) GetGroupOk() (*string, bool) {
	if o == nil || IsNil(o.Group) {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *ReportingTaskDefinition) HasGroup() bool {
	if o != nil && !IsNil(o.Group) {
		return true
	}

	return false
}

// SetGroup gets a reference to the given string and assigns it to the Group field.
func (o *ReportingTaskDefinition) SetGroup(v string) {
	o.Group = &v
}

// GetArtifact returns the Artifact field value if set, zero value otherwise.
func (o *ReportingTaskDefinition) GetArtifact() string {
	if o == nil || IsNil(o.Artifact) {
		var ret string
		return ret
	}
	return *o.Artifact
}

// GetArtifactOk returns a tuple with the Artifact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportingTaskDefinition) GetArtifactOk() (*string, bool) {
	if o == nil || IsNil(o.Artifact) {
		return nil, false
	}
	return o.Artifact, true
}

// HasArtifact returns a boolean if a field has been set.
func (o *ReportingTaskDefinition) HasArtifact() bool {
	if o != nil && !IsNil(o.Artifact) {
		return true
	}

	return false
}

// SetArtifact gets a reference to the given string and assigns it to the Artifact field.
func (o *ReportingTaskDefinition) SetArtifact(v string) {
	o.Artifact = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *ReportingTaskDefinition) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportingTaskDefinition) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *ReportingTaskDefinition) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *ReportingTaskDefinition) SetVersion(v string) {
	o.Version = &v
}

// GetType returns the Type field value
func (o *ReportingTaskDefinition) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ReportingTaskDefinition) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ReportingTaskDefinition) SetType(v string) {
	o.Type = v
}

// GetTypeDescription returns the TypeDescription field value if set, zero value otherwise.
func (o *ReportingTaskDefinition) GetTypeDescription() string {
	if o == nil || IsNil(o.TypeDescription) {
		var ret string
		return ret
	}
	return *o.TypeDescription
}

// GetTypeDescriptionOk returns a tuple with the TypeDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportingTaskDefinition) GetTypeDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.TypeDescription) {
		return nil, false
	}
	return o.TypeDescription, true
}

// HasTypeDescription returns a boolean if a field has been set.
func (o *ReportingTaskDefinition) HasTypeDescription() bool {
	if o != nil && !IsNil(o.TypeDescription) {
		return true
	}

	return false
}

// SetTypeDescription gets a reference to the given string and assigns it to the TypeDescription field.
func (o *ReportingTaskDefinition) SetTypeDescription(v string) {
	o.TypeDescription = &v
}

// GetBuildInfo returns the BuildInfo field value if set, zero value otherwise.
func (o *ReportingTaskDefinition) GetBuildInfo() BuildInfo {
	if o == nil || IsNil(o.BuildInfo) {
		var ret BuildInfo
		return ret
	}
	return *o.BuildInfo
}

// GetBuildInfoOk returns a tuple with the BuildInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportingTaskDefinition) GetBuildInfoOk() (*BuildInfo, bool) {
	if o == nil || IsNil(o.BuildInfo) {
		return nil, false
	}
	return o.BuildInfo, true
}

// HasBuildInfo returns a boolean if a field has been set.
func (o *ReportingTaskDefinition) HasBuildInfo() bool {
	if o != nil && !IsNil(o.BuildInfo) {
		return true
	}

	return false
}

// SetBuildInfo gets a reference to the given BuildInfo and assigns it to the BuildInfo field.
func (o *ReportingTaskDefinition) SetBuildInfo(v BuildInfo) {
	o.BuildInfo = &v
}

// GetProvidedApiImplementations returns the ProvidedApiImplementations field value if set, zero value otherwise.
func (o *ReportingTaskDefinition) GetProvidedApiImplementations() []DefinedType {
	if o == nil || IsNil(o.ProvidedApiImplementations) {
		var ret []DefinedType
		return ret
	}
	return o.ProvidedApiImplementations
}

// GetProvidedApiImplementationsOk returns a tuple with the ProvidedApiImplementations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportingTaskDefinition) GetProvidedApiImplementationsOk() ([]DefinedType, bool) {
	if o == nil || IsNil(o.ProvidedApiImplementations) {
		return nil, false
	}
	return o.ProvidedApiImplementations, true
}

// HasProvidedApiImplementations returns a boolean if a field has been set.
func (o *ReportingTaskDefinition) HasProvidedApiImplementations() bool {
	if o != nil && !IsNil(o.ProvidedApiImplementations) {
		return true
	}

	return false
}

// SetProvidedApiImplementations gets a reference to the given []DefinedType and assigns it to the ProvidedApiImplementations field.
func (o *ReportingTaskDefinition) SetProvidedApiImplementations(v []DefinedType) {
	o.ProvidedApiImplementations = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *ReportingTaskDefinition) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportingTaskDefinition) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *ReportingTaskDefinition) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *ReportingTaskDefinition) SetTags(v []string) {
	o.Tags = v
}

// GetSeeAlso returns the SeeAlso field value if set, zero value otherwise.
func (o *ReportingTaskDefinition) GetSeeAlso() []string {
	if o == nil || IsNil(o.SeeAlso) {
		var ret []string
		return ret
	}
	return o.SeeAlso
}

// GetSeeAlsoOk returns a tuple with the SeeAlso field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportingTaskDefinition) GetSeeAlsoOk() ([]string, bool) {
	if o == nil || IsNil(o.SeeAlso) {
		return nil, false
	}
	return o.SeeAlso, true
}

// HasSeeAlso returns a boolean if a field has been set.
func (o *ReportingTaskDefinition) HasSeeAlso() bool {
	if o != nil && !IsNil(o.SeeAlso) {
		return true
	}

	return false
}

// SetSeeAlso gets a reference to the given []string and assigns it to the SeeAlso field.
func (o *ReportingTaskDefinition) SetSeeAlso(v []string) {
	o.SeeAlso = v
}

// GetDeprecated returns the Deprecated field value if set, zero value otherwise.
func (o *ReportingTaskDefinition) GetDeprecated() bool {
	if o == nil || IsNil(o.Deprecated) {
		var ret bool
		return ret
	}
	return *o.Deprecated
}

// GetDeprecatedOk returns a tuple with the Deprecated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportingTaskDefinition) GetDeprecatedOk() (*bool, bool) {
	if o == nil || IsNil(o.Deprecated) {
		return nil, false
	}
	return o.Deprecated, true
}

// HasDeprecated returns a boolean if a field has been set.
func (o *ReportingTaskDefinition) HasDeprecated() bool {
	if o != nil && !IsNil(o.Deprecated) {
		return true
	}

	return false
}

// SetDeprecated gets a reference to the given bool and assigns it to the Deprecated field.
func (o *ReportingTaskDefinition) SetDeprecated(v bool) {
	o.Deprecated = &v
}

// GetDeprecationReason returns the DeprecationReason field value if set, zero value otherwise.
func (o *ReportingTaskDefinition) GetDeprecationReason() string {
	if o == nil || IsNil(o.DeprecationReason) {
		var ret string
		return ret
	}
	return *o.DeprecationReason
}

// GetDeprecationReasonOk returns a tuple with the DeprecationReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportingTaskDefinition) GetDeprecationReasonOk() (*string, bool) {
	if o == nil || IsNil(o.DeprecationReason) {
		return nil, false
	}
	return o.DeprecationReason, true
}

// HasDeprecationReason returns a boolean if a field has been set.
func (o *ReportingTaskDefinition) HasDeprecationReason() bool {
	if o != nil && !IsNil(o.DeprecationReason) {
		return true
	}

	return false
}

// SetDeprecationReason gets a reference to the given string and assigns it to the DeprecationReason field.
func (o *ReportingTaskDefinition) SetDeprecationReason(v string) {
	o.DeprecationReason = &v
}

// GetDeprecationAlternatives returns the DeprecationAlternatives field value if set, zero value otherwise.
func (o *ReportingTaskDefinition) GetDeprecationAlternatives() []string {
	if o == nil || IsNil(o.DeprecationAlternatives) {
		var ret []string
		return ret
	}
	return o.DeprecationAlternatives
}

// GetDeprecationAlternativesOk returns a tuple with the DeprecationAlternatives field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportingTaskDefinition) GetDeprecationAlternativesOk() ([]string, bool) {
	if o == nil || IsNil(o.DeprecationAlternatives) {
		return nil, false
	}
	return o.DeprecationAlternatives, true
}

// HasDeprecationAlternatives returns a boolean if a field has been set.
func (o *ReportingTaskDefinition) HasDeprecationAlternatives() bool {
	if o != nil && !IsNil(o.DeprecationAlternatives) {
		return true
	}

	return false
}

// SetDeprecationAlternatives gets a reference to the given []string and assigns it to the DeprecationAlternatives field.
func (o *ReportingTaskDefinition) SetDeprecationAlternatives(v []string) {
	o.DeprecationAlternatives = v
}

// GetRestricted returns the Restricted field value if set, zero value otherwise.
func (o *ReportingTaskDefinition) GetRestricted() bool {
	if o == nil || IsNil(o.Restricted) {
		var ret bool
		return ret
	}
	return *o.Restricted
}

// GetRestrictedOk returns a tuple with the Restricted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportingTaskDefinition) GetRestrictedOk() (*bool, bool) {
	if o == nil || IsNil(o.Restricted) {
		return nil, false
	}
	return o.Restricted, true
}

// HasRestricted returns a boolean if a field has been set.
func (o *ReportingTaskDefinition) HasRestricted() bool {
	if o != nil && !IsNil(o.Restricted) {
		return true
	}

	return false
}

// SetRestricted gets a reference to the given bool and assigns it to the Restricted field.
func (o *ReportingTaskDefinition) SetRestricted(v bool) {
	o.Restricted = &v
}

// GetRestrictedExplanation returns the RestrictedExplanation field value if set, zero value otherwise.
func (o *ReportingTaskDefinition) GetRestrictedExplanation() string {
	if o == nil || IsNil(o.RestrictedExplanation) {
		var ret string
		return ret
	}
	return *o.RestrictedExplanation
}

// GetRestrictedExplanationOk returns a tuple with the RestrictedExplanation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportingTaskDefinition) GetRestrictedExplanationOk() (*string, bool) {
	if o == nil || IsNil(o.RestrictedExplanation) {
		return nil, false
	}
	return o.RestrictedExplanation, true
}

// HasRestrictedExplanation returns a boolean if a field has been set.
func (o *ReportingTaskDefinition) HasRestrictedExplanation() bool {
	if o != nil && !IsNil(o.RestrictedExplanation) {
		return true
	}

	return false
}

// SetRestrictedExplanation gets a reference to the given string and assigns it to the RestrictedExplanation field.
func (o *ReportingTaskDefinition) SetRestrictedExplanation(v string) {
	o.RestrictedExplanation = &v
}

// GetExplicitRestrictions returns the ExplicitRestrictions field value if set, zero value otherwise.
func (o *ReportingTaskDefinition) GetExplicitRestrictions() []Restriction {
	if o == nil || IsNil(o.ExplicitRestrictions) {
		var ret []Restriction
		return ret
	}
	return o.ExplicitRestrictions
}

// GetExplicitRestrictionsOk returns a tuple with the ExplicitRestrictions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportingTaskDefinition) GetExplicitRestrictionsOk() ([]Restriction, bool) {
	if o == nil || IsNil(o.ExplicitRestrictions) {
		return nil, false
	}
	return o.ExplicitRestrictions, true
}

// HasExplicitRestrictions returns a boolean if a field has been set.
func (o *ReportingTaskDefinition) HasExplicitRestrictions() bool {
	if o != nil && !IsNil(o.ExplicitRestrictions) {
		return true
	}

	return false
}

// SetExplicitRestrictions gets a reference to the given []Restriction and assigns it to the ExplicitRestrictions field.
func (o *ReportingTaskDefinition) SetExplicitRestrictions(v []Restriction) {
	o.ExplicitRestrictions = v
}

// GetStateful returns the Stateful field value if set, zero value otherwise.
func (o *ReportingTaskDefinition) GetStateful() Stateful {
	if o == nil || IsNil(o.Stateful) {
		var ret Stateful
		return ret
	}
	return *o.Stateful
}

// GetStatefulOk returns a tuple with the Stateful field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportingTaskDefinition) GetStatefulOk() (*Stateful, bool) {
	if o == nil || IsNil(o.Stateful) {
		return nil, false
	}
	return o.Stateful, true
}

// HasStateful returns a boolean if a field has been set.
func (o *ReportingTaskDefinition) HasStateful() bool {
	if o != nil && !IsNil(o.Stateful) {
		return true
	}

	return false
}

// SetStateful gets a reference to the given Stateful and assigns it to the Stateful field.
func (o *ReportingTaskDefinition) SetStateful(v Stateful) {
	o.Stateful = &v
}

// GetSystemResourceConsiderations returns the SystemResourceConsiderations field value if set, zero value otherwise.
func (o *ReportingTaskDefinition) GetSystemResourceConsiderations() []SystemResourceConsideration {
	if o == nil || IsNil(o.SystemResourceConsiderations) {
		var ret []SystemResourceConsideration
		return ret
	}
	return o.SystemResourceConsiderations
}

// GetSystemResourceConsiderationsOk returns a tuple with the SystemResourceConsiderations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportingTaskDefinition) GetSystemResourceConsiderationsOk() ([]SystemResourceConsideration, bool) {
	if o == nil || IsNil(o.SystemResourceConsiderations) {
		return nil, false
	}
	return o.SystemResourceConsiderations, true
}

// HasSystemResourceConsiderations returns a boolean if a field has been set.
func (o *ReportingTaskDefinition) HasSystemResourceConsiderations() bool {
	if o != nil && !IsNil(o.SystemResourceConsiderations) {
		return true
	}

	return false
}

// SetSystemResourceConsiderations gets a reference to the given []SystemResourceConsideration and assigns it to the SystemResourceConsiderations field.
func (o *ReportingTaskDefinition) SetSystemResourceConsiderations(v []SystemResourceConsideration) {
	o.SystemResourceConsiderations = v
}

// GetAdditionalDetails returns the AdditionalDetails field value if set, zero value otherwise.
func (o *ReportingTaskDefinition) GetAdditionalDetails() bool {
	if o == nil || IsNil(o.AdditionalDetails) {
		var ret bool
		return ret
	}
	return *o.AdditionalDetails
}

// GetAdditionalDetailsOk returns a tuple with the AdditionalDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportingTaskDefinition) GetAdditionalDetailsOk() (*bool, bool) {
	if o == nil || IsNil(o.AdditionalDetails) {
		return nil, false
	}
	return o.AdditionalDetails, true
}

// HasAdditionalDetails returns a boolean if a field has been set.
func (o *ReportingTaskDefinition) HasAdditionalDetails() bool {
	if o != nil && !IsNil(o.AdditionalDetails) {
		return true
	}

	return false
}

// SetAdditionalDetails gets a reference to the given bool and assigns it to the AdditionalDetails field.
func (o *ReportingTaskDefinition) SetAdditionalDetails(v bool) {
	o.AdditionalDetails = &v
}

// GetPropertyDescriptors returns the PropertyDescriptors field value if set, zero value otherwise.
func (o *ReportingTaskDefinition) GetPropertyDescriptors() map[string]PropertyDescriptor {
	if o == nil || IsNil(o.PropertyDescriptors) {
		var ret map[string]PropertyDescriptor
		return ret
	}
	return *o.PropertyDescriptors
}

// GetPropertyDescriptorsOk returns a tuple with the PropertyDescriptors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportingTaskDefinition) GetPropertyDescriptorsOk() (*map[string]PropertyDescriptor, bool) {
	if o == nil || IsNil(o.PropertyDescriptors) {
		return nil, false
	}
	return o.PropertyDescriptors, true
}

// HasPropertyDescriptors returns a boolean if a field has been set.
func (o *ReportingTaskDefinition) HasPropertyDescriptors() bool {
	if o != nil && !IsNil(o.PropertyDescriptors) {
		return true
	}

	return false
}

// SetPropertyDescriptors gets a reference to the given map[string]PropertyDescriptor and assigns it to the PropertyDescriptors field.
func (o *ReportingTaskDefinition) SetPropertyDescriptors(v map[string]PropertyDescriptor) {
	o.PropertyDescriptors = &v
}

// GetSupportsDynamicProperties returns the SupportsDynamicProperties field value if set, zero value otherwise.
func (o *ReportingTaskDefinition) GetSupportsDynamicProperties() bool {
	if o == nil || IsNil(o.SupportsDynamicProperties) {
		var ret bool
		return ret
	}
	return *o.SupportsDynamicProperties
}

// GetSupportsDynamicPropertiesOk returns a tuple with the SupportsDynamicProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportingTaskDefinition) GetSupportsDynamicPropertiesOk() (*bool, bool) {
	if o == nil || IsNil(o.SupportsDynamicProperties) {
		return nil, false
	}
	return o.SupportsDynamicProperties, true
}

// HasSupportsDynamicProperties returns a boolean if a field has been set.
func (o *ReportingTaskDefinition) HasSupportsDynamicProperties() bool {
	if o != nil && !IsNil(o.SupportsDynamicProperties) {
		return true
	}

	return false
}

// SetSupportsDynamicProperties gets a reference to the given bool and assigns it to the SupportsDynamicProperties field.
func (o *ReportingTaskDefinition) SetSupportsDynamicProperties(v bool) {
	o.SupportsDynamicProperties = &v
}

// GetDynamicProperties returns the DynamicProperties field value if set, zero value otherwise.
func (o *ReportingTaskDefinition) GetDynamicProperties() []DynamicProperty {
	if o == nil || IsNil(o.DynamicProperties) {
		var ret []DynamicProperty
		return ret
	}
	return o.DynamicProperties
}

// GetDynamicPropertiesOk returns a tuple with the DynamicProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportingTaskDefinition) GetDynamicPropertiesOk() ([]DynamicProperty, bool) {
	if o == nil || IsNil(o.DynamicProperties) {
		return nil, false
	}
	return o.DynamicProperties, true
}

// HasDynamicProperties returns a boolean if a field has been set.
func (o *ReportingTaskDefinition) HasDynamicProperties() bool {
	if o != nil && !IsNil(o.DynamicProperties) {
		return true
	}

	return false
}

// SetDynamicProperties gets a reference to the given []DynamicProperty and assigns it to the DynamicProperties field.
func (o *ReportingTaskDefinition) SetDynamicProperties(v []DynamicProperty) {
	o.DynamicProperties = v
}

// GetSupportedSchedulingStrategies returns the SupportedSchedulingStrategies field value if set, zero value otherwise.
func (o *ReportingTaskDefinition) GetSupportedSchedulingStrategies() []string {
	if o == nil || IsNil(o.SupportedSchedulingStrategies) {
		var ret []string
		return ret
	}
	return o.SupportedSchedulingStrategies
}

// GetSupportedSchedulingStrategiesOk returns a tuple with the SupportedSchedulingStrategies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportingTaskDefinition) GetSupportedSchedulingStrategiesOk() ([]string, bool) {
	if o == nil || IsNil(o.SupportedSchedulingStrategies) {
		return nil, false
	}
	return o.SupportedSchedulingStrategies, true
}

// HasSupportedSchedulingStrategies returns a boolean if a field has been set.
func (o *ReportingTaskDefinition) HasSupportedSchedulingStrategies() bool {
	if o != nil && !IsNil(o.SupportedSchedulingStrategies) {
		return true
	}

	return false
}

// SetSupportedSchedulingStrategies gets a reference to the given []string and assigns it to the SupportedSchedulingStrategies field.
func (o *ReportingTaskDefinition) SetSupportedSchedulingStrategies(v []string) {
	o.SupportedSchedulingStrategies = v
}

// GetDefaultSchedulingStrategy returns the DefaultSchedulingStrategy field value if set, zero value otherwise.
func (o *ReportingTaskDefinition) GetDefaultSchedulingStrategy() string {
	if o == nil || IsNil(o.DefaultSchedulingStrategy) {
		var ret string
		return ret
	}
	return *o.DefaultSchedulingStrategy
}

// GetDefaultSchedulingStrategyOk returns a tuple with the DefaultSchedulingStrategy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportingTaskDefinition) GetDefaultSchedulingStrategyOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultSchedulingStrategy) {
		return nil, false
	}
	return o.DefaultSchedulingStrategy, true
}

// HasDefaultSchedulingStrategy returns a boolean if a field has been set.
func (o *ReportingTaskDefinition) HasDefaultSchedulingStrategy() bool {
	if o != nil && !IsNil(o.DefaultSchedulingStrategy) {
		return true
	}

	return false
}

// SetDefaultSchedulingStrategy gets a reference to the given string and assigns it to the DefaultSchedulingStrategy field.
func (o *ReportingTaskDefinition) SetDefaultSchedulingStrategy(v string) {
	o.DefaultSchedulingStrategy = &v
}

// GetDefaultSchedulingPeriodBySchedulingStrategy returns the DefaultSchedulingPeriodBySchedulingStrategy field value if set, zero value otherwise.
func (o *ReportingTaskDefinition) GetDefaultSchedulingPeriodBySchedulingStrategy() map[string]string {
	if o == nil || IsNil(o.DefaultSchedulingPeriodBySchedulingStrategy) {
		var ret map[string]string
		return ret
	}
	return *o.DefaultSchedulingPeriodBySchedulingStrategy
}

// GetDefaultSchedulingPeriodBySchedulingStrategyOk returns a tuple with the DefaultSchedulingPeriodBySchedulingStrategy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportingTaskDefinition) GetDefaultSchedulingPeriodBySchedulingStrategyOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.DefaultSchedulingPeriodBySchedulingStrategy) {
		return nil, false
	}
	return o.DefaultSchedulingPeriodBySchedulingStrategy, true
}

// HasDefaultSchedulingPeriodBySchedulingStrategy returns a boolean if a field has been set.
func (o *ReportingTaskDefinition) HasDefaultSchedulingPeriodBySchedulingStrategy() bool {
	if o != nil && !IsNil(o.DefaultSchedulingPeriodBySchedulingStrategy) {
		return true
	}

	return false
}

// SetDefaultSchedulingPeriodBySchedulingStrategy gets a reference to the given map[string]string and assigns it to the DefaultSchedulingPeriodBySchedulingStrategy field.
func (o *ReportingTaskDefinition) SetDefaultSchedulingPeriodBySchedulingStrategy(v map[string]string) {
	o.DefaultSchedulingPeriodBySchedulingStrategy = &v
}

func (o ReportingTaskDefinition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReportingTaskDefinition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Group) {
		toSerialize["group"] = o.Group
	}
	if !IsNil(o.Artifact) {
		toSerialize["artifact"] = o.Artifact
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	toSerialize["type"] = o.Type
	if !IsNil(o.TypeDescription) {
		toSerialize["typeDescription"] = o.TypeDescription
	}
	if !IsNil(o.BuildInfo) {
		toSerialize["buildInfo"] = o.BuildInfo
	}
	if !IsNil(o.ProvidedApiImplementations) {
		toSerialize["providedApiImplementations"] = o.ProvidedApiImplementations
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.SeeAlso) {
		toSerialize["seeAlso"] = o.SeeAlso
	}
	if !IsNil(o.Deprecated) {
		toSerialize["deprecated"] = o.Deprecated
	}
	if !IsNil(o.DeprecationReason) {
		toSerialize["deprecationReason"] = o.DeprecationReason
	}
	if !IsNil(o.DeprecationAlternatives) {
		toSerialize["deprecationAlternatives"] = o.DeprecationAlternatives
	}
	if !IsNil(o.Restricted) {
		toSerialize["restricted"] = o.Restricted
	}
	if !IsNil(o.RestrictedExplanation) {
		toSerialize["restrictedExplanation"] = o.RestrictedExplanation
	}
	if !IsNil(o.ExplicitRestrictions) {
		toSerialize["explicitRestrictions"] = o.ExplicitRestrictions
	}
	if !IsNil(o.Stateful) {
		toSerialize["stateful"] = o.Stateful
	}
	if !IsNil(o.SystemResourceConsiderations) {
		toSerialize["systemResourceConsiderations"] = o.SystemResourceConsiderations
	}
	if !IsNil(o.AdditionalDetails) {
		toSerialize["additionalDetails"] = o.AdditionalDetails
	}
	if !IsNil(o.PropertyDescriptors) {
		toSerialize["propertyDescriptors"] = o.PropertyDescriptors
	}
	if !IsNil(o.SupportsDynamicProperties) {
		toSerialize["supportsDynamicProperties"] = o.SupportsDynamicProperties
	}
	if !IsNil(o.DynamicProperties) {
		toSerialize["dynamicProperties"] = o.DynamicProperties
	}
	if !IsNil(o.SupportedSchedulingStrategies) {
		toSerialize["supportedSchedulingStrategies"] = o.SupportedSchedulingStrategies
	}
	if !IsNil(o.DefaultSchedulingStrategy) {
		toSerialize["defaultSchedulingStrategy"] = o.DefaultSchedulingStrategy
	}
	if !IsNil(o.DefaultSchedulingPeriodBySchedulingStrategy) {
		toSerialize["defaultSchedulingPeriodBySchedulingStrategy"] = o.DefaultSchedulingPeriodBySchedulingStrategy
	}
	return toSerialize, nil
}

type NullableReportingTaskDefinition struct {
	value *ReportingTaskDefinition
	isSet bool
}

func (v NullableReportingTaskDefinition) Get() *ReportingTaskDefinition {
	return v.value
}

func (v *NullableReportingTaskDefinition) Set(val *ReportingTaskDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableReportingTaskDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableReportingTaskDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReportingTaskDefinition(val *ReportingTaskDefinition) *NullableReportingTaskDefinition {
	return &NullableReportingTaskDefinition{value: val, isSet: true}
}

func (v NullableReportingTaskDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReportingTaskDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


