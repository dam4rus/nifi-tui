/*
NiFi Rest API

The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.

API version: 2.0.0
Contact: dev@nifi.apache.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nifiapi

import (
	"encoding/json"
)

// checks if the JVMFlowDiagnosticsSnapshotDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JVMFlowDiagnosticsSnapshotDTO{}

// JVMFlowDiagnosticsSnapshotDTO struct for JVMFlowDiagnosticsSnapshotDTO
type JVMFlowDiagnosticsSnapshotDTO struct {
	// How long this node has been running, formatted as hours:minutes:seconds.milliseconds
	Uptime *string `json:"uptime,omitempty"`
	// The name of the Time Zone that is configured, if available
	TimeZone *string `json:"timeZone,omitempty"`
	// The number of timer-driven threads that are active
	ActiveTimerDrivenThreads *int32 `json:"activeTimerDrivenThreads,omitempty"`
	// The number of event-driven threads that are active
	ActiveEventDrivenThreads *int32 `json:"activeEventDrivenThreads,omitempty"`
	// The NiFi Bundles (NARs) that are loaded by NiFi
	BundlesLoaded []BundleDTO `json:"bundlesLoaded,omitempty"`
}

// NewJVMFlowDiagnosticsSnapshotDTO instantiates a new JVMFlowDiagnosticsSnapshotDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJVMFlowDiagnosticsSnapshotDTO() *JVMFlowDiagnosticsSnapshotDTO {
	this := JVMFlowDiagnosticsSnapshotDTO{}
	return &this
}

// NewJVMFlowDiagnosticsSnapshotDTOWithDefaults instantiates a new JVMFlowDiagnosticsSnapshotDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJVMFlowDiagnosticsSnapshotDTOWithDefaults() *JVMFlowDiagnosticsSnapshotDTO {
	this := JVMFlowDiagnosticsSnapshotDTO{}
	return &this
}

// GetUptime returns the Uptime field value if set, zero value otherwise.
func (o *JVMFlowDiagnosticsSnapshotDTO) GetUptime() string {
	if o == nil || IsNil(o.Uptime) {
		var ret string
		return ret
	}
	return *o.Uptime
}

// GetUptimeOk returns a tuple with the Uptime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JVMFlowDiagnosticsSnapshotDTO) GetUptimeOk() (*string, bool) {
	if o == nil || IsNil(o.Uptime) {
		return nil, false
	}
	return o.Uptime, true
}

// HasUptime returns a boolean if a field has been set.
func (o *JVMFlowDiagnosticsSnapshotDTO) HasUptime() bool {
	if o != nil && !IsNil(o.Uptime) {
		return true
	}

	return false
}

// SetUptime gets a reference to the given string and assigns it to the Uptime field.
func (o *JVMFlowDiagnosticsSnapshotDTO) SetUptime(v string) {
	o.Uptime = &v
}

// GetTimeZone returns the TimeZone field value if set, zero value otherwise.
func (o *JVMFlowDiagnosticsSnapshotDTO) GetTimeZone() string {
	if o == nil || IsNil(o.TimeZone) {
		var ret string
		return ret
	}
	return *o.TimeZone
}

// GetTimeZoneOk returns a tuple with the TimeZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JVMFlowDiagnosticsSnapshotDTO) GetTimeZoneOk() (*string, bool) {
	if o == nil || IsNil(o.TimeZone) {
		return nil, false
	}
	return o.TimeZone, true
}

// HasTimeZone returns a boolean if a field has been set.
func (o *JVMFlowDiagnosticsSnapshotDTO) HasTimeZone() bool {
	if o != nil && !IsNil(o.TimeZone) {
		return true
	}

	return false
}

// SetTimeZone gets a reference to the given string and assigns it to the TimeZone field.
func (o *JVMFlowDiagnosticsSnapshotDTO) SetTimeZone(v string) {
	o.TimeZone = &v
}

// GetActiveTimerDrivenThreads returns the ActiveTimerDrivenThreads field value if set, zero value otherwise.
func (o *JVMFlowDiagnosticsSnapshotDTO) GetActiveTimerDrivenThreads() int32 {
	if o == nil || IsNil(o.ActiveTimerDrivenThreads) {
		var ret int32
		return ret
	}
	return *o.ActiveTimerDrivenThreads
}

// GetActiveTimerDrivenThreadsOk returns a tuple with the ActiveTimerDrivenThreads field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JVMFlowDiagnosticsSnapshotDTO) GetActiveTimerDrivenThreadsOk() (*int32, bool) {
	if o == nil || IsNil(o.ActiveTimerDrivenThreads) {
		return nil, false
	}
	return o.ActiveTimerDrivenThreads, true
}

// HasActiveTimerDrivenThreads returns a boolean if a field has been set.
func (o *JVMFlowDiagnosticsSnapshotDTO) HasActiveTimerDrivenThreads() bool {
	if o != nil && !IsNil(o.ActiveTimerDrivenThreads) {
		return true
	}

	return false
}

// SetActiveTimerDrivenThreads gets a reference to the given int32 and assigns it to the ActiveTimerDrivenThreads field.
func (o *JVMFlowDiagnosticsSnapshotDTO) SetActiveTimerDrivenThreads(v int32) {
	o.ActiveTimerDrivenThreads = &v
}

// GetActiveEventDrivenThreads returns the ActiveEventDrivenThreads field value if set, zero value otherwise.
func (o *JVMFlowDiagnosticsSnapshotDTO) GetActiveEventDrivenThreads() int32 {
	if o == nil || IsNil(o.ActiveEventDrivenThreads) {
		var ret int32
		return ret
	}
	return *o.ActiveEventDrivenThreads
}

// GetActiveEventDrivenThreadsOk returns a tuple with the ActiveEventDrivenThreads field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JVMFlowDiagnosticsSnapshotDTO) GetActiveEventDrivenThreadsOk() (*int32, bool) {
	if o == nil || IsNil(o.ActiveEventDrivenThreads) {
		return nil, false
	}
	return o.ActiveEventDrivenThreads, true
}

// HasActiveEventDrivenThreads returns a boolean if a field has been set.
func (o *JVMFlowDiagnosticsSnapshotDTO) HasActiveEventDrivenThreads() bool {
	if o != nil && !IsNil(o.ActiveEventDrivenThreads) {
		return true
	}

	return false
}

// SetActiveEventDrivenThreads gets a reference to the given int32 and assigns it to the ActiveEventDrivenThreads field.
func (o *JVMFlowDiagnosticsSnapshotDTO) SetActiveEventDrivenThreads(v int32) {
	o.ActiveEventDrivenThreads = &v
}

// GetBundlesLoaded returns the BundlesLoaded field value if set, zero value otherwise.
func (o *JVMFlowDiagnosticsSnapshotDTO) GetBundlesLoaded() []BundleDTO {
	if o == nil || IsNil(o.BundlesLoaded) {
		var ret []BundleDTO
		return ret
	}
	return o.BundlesLoaded
}

// GetBundlesLoadedOk returns a tuple with the BundlesLoaded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JVMFlowDiagnosticsSnapshotDTO) GetBundlesLoadedOk() ([]BundleDTO, bool) {
	if o == nil || IsNil(o.BundlesLoaded) {
		return nil, false
	}
	return o.BundlesLoaded, true
}

// HasBundlesLoaded returns a boolean if a field has been set.
func (o *JVMFlowDiagnosticsSnapshotDTO) HasBundlesLoaded() bool {
	if o != nil && !IsNil(o.BundlesLoaded) {
		return true
	}

	return false
}

// SetBundlesLoaded gets a reference to the given []BundleDTO and assigns it to the BundlesLoaded field.
func (o *JVMFlowDiagnosticsSnapshotDTO) SetBundlesLoaded(v []BundleDTO) {
	o.BundlesLoaded = v
}

func (o JVMFlowDiagnosticsSnapshotDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JVMFlowDiagnosticsSnapshotDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Uptime) {
		toSerialize["uptime"] = o.Uptime
	}
	if !IsNil(o.TimeZone) {
		toSerialize["timeZone"] = o.TimeZone
	}
	if !IsNil(o.ActiveTimerDrivenThreads) {
		toSerialize["activeTimerDrivenThreads"] = o.ActiveTimerDrivenThreads
	}
	if !IsNil(o.ActiveEventDrivenThreads) {
		toSerialize["activeEventDrivenThreads"] = o.ActiveEventDrivenThreads
	}
	if !IsNil(o.BundlesLoaded) {
		toSerialize["bundlesLoaded"] = o.BundlesLoaded
	}
	return toSerialize, nil
}

type NullableJVMFlowDiagnosticsSnapshotDTO struct {
	value *JVMFlowDiagnosticsSnapshotDTO
	isSet bool
}

func (v NullableJVMFlowDiagnosticsSnapshotDTO) Get() *JVMFlowDiagnosticsSnapshotDTO {
	return v.value
}

func (v *NullableJVMFlowDiagnosticsSnapshotDTO) Set(val *JVMFlowDiagnosticsSnapshotDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableJVMFlowDiagnosticsSnapshotDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableJVMFlowDiagnosticsSnapshotDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJVMFlowDiagnosticsSnapshotDTO(val *JVMFlowDiagnosticsSnapshotDTO) *NullableJVMFlowDiagnosticsSnapshotDTO {
	return &NullableJVMFlowDiagnosticsSnapshotDTO{value: val, isSet: true}
}

func (v NullableJVMFlowDiagnosticsSnapshotDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJVMFlowDiagnosticsSnapshotDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


