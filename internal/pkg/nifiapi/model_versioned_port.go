/*
NiFi Rest API

The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.

API version: 2.0.0
Contact: dev@nifi.apache.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nifiapi

import (
	"encoding/json"
)

// checks if the VersionedPort type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VersionedPort{}

// VersionedPort struct for VersionedPort
type VersionedPort struct {
	// The component's unique identifier
	Identifier *string `json:"identifier,omitempty"`
	// The instance ID of an existing component that is described by this VersionedComponent, or null if this is not mapped to an instantiated component
	InstanceIdentifier *string `json:"instanceIdentifier,omitempty"`
	// The component's name
	Name *string `json:"name,omitempty"`
	// The user-supplied comments for the component
	Comments *string `json:"comments,omitempty"`
	Position *Position `json:"position,omitempty"`
	// The type of port.
	Type *string `json:"type,omitempty"`
	// The number of tasks that should be concurrently scheduled for the port.
	ConcurrentlySchedulableTaskCount *int32 `json:"concurrentlySchedulableTaskCount,omitempty"`
	// The scheduled state of the component
	ScheduledState *string `json:"scheduledState,omitempty"`
	// Whether or not this port allows remote access for site-to-site
	AllowRemoteAccess *bool `json:"allowRemoteAccess,omitempty"`
	ComponentType *string `json:"componentType,omitempty"`
	// The ID of the Process Group that this component belongs to
	GroupIdentifier *string `json:"groupIdentifier,omitempty"`
}

// NewVersionedPort instantiates a new VersionedPort object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVersionedPort() *VersionedPort {
	this := VersionedPort{}
	return &this
}

// NewVersionedPortWithDefaults instantiates a new VersionedPort object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVersionedPortWithDefaults() *VersionedPort {
	this := VersionedPort{}
	return &this
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *VersionedPort) GetIdentifier() string {
	if o == nil || IsNil(o.Identifier) {
		var ret string
		return ret
	}
	return *o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionedPort) GetIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.Identifier) {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *VersionedPort) HasIdentifier() bool {
	if o != nil && !IsNil(o.Identifier) {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given string and assigns it to the Identifier field.
func (o *VersionedPort) SetIdentifier(v string) {
	o.Identifier = &v
}

// GetInstanceIdentifier returns the InstanceIdentifier field value if set, zero value otherwise.
func (o *VersionedPort) GetInstanceIdentifier() string {
	if o == nil || IsNil(o.InstanceIdentifier) {
		var ret string
		return ret
	}
	return *o.InstanceIdentifier
}

// GetInstanceIdentifierOk returns a tuple with the InstanceIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionedPort) GetInstanceIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.InstanceIdentifier) {
		return nil, false
	}
	return o.InstanceIdentifier, true
}

// HasInstanceIdentifier returns a boolean if a field has been set.
func (o *VersionedPort) HasInstanceIdentifier() bool {
	if o != nil && !IsNil(o.InstanceIdentifier) {
		return true
	}

	return false
}

// SetInstanceIdentifier gets a reference to the given string and assigns it to the InstanceIdentifier field.
func (o *VersionedPort) SetInstanceIdentifier(v string) {
	o.InstanceIdentifier = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *VersionedPort) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionedPort) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *VersionedPort) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *VersionedPort) SetName(v string) {
	o.Name = &v
}

// GetComments returns the Comments field value if set, zero value otherwise.
func (o *VersionedPort) GetComments() string {
	if o == nil || IsNil(o.Comments) {
		var ret string
		return ret
	}
	return *o.Comments
}

// GetCommentsOk returns a tuple with the Comments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionedPort) GetCommentsOk() (*string, bool) {
	if o == nil || IsNil(o.Comments) {
		return nil, false
	}
	return o.Comments, true
}

// HasComments returns a boolean if a field has been set.
func (o *VersionedPort) HasComments() bool {
	if o != nil && !IsNil(o.Comments) {
		return true
	}

	return false
}

// SetComments gets a reference to the given string and assigns it to the Comments field.
func (o *VersionedPort) SetComments(v string) {
	o.Comments = &v
}

// GetPosition returns the Position field value if set, zero value otherwise.
func (o *VersionedPort) GetPosition() Position {
	if o == nil || IsNil(o.Position) {
		var ret Position
		return ret
	}
	return *o.Position
}

// GetPositionOk returns a tuple with the Position field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionedPort) GetPositionOk() (*Position, bool) {
	if o == nil || IsNil(o.Position) {
		return nil, false
	}
	return o.Position, true
}

// HasPosition returns a boolean if a field has been set.
func (o *VersionedPort) HasPosition() bool {
	if o != nil && !IsNil(o.Position) {
		return true
	}

	return false
}

// SetPosition gets a reference to the given Position and assigns it to the Position field.
func (o *VersionedPort) SetPosition(v Position) {
	o.Position = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *VersionedPort) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionedPort) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *VersionedPort) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *VersionedPort) SetType(v string) {
	o.Type = &v
}

// GetConcurrentlySchedulableTaskCount returns the ConcurrentlySchedulableTaskCount field value if set, zero value otherwise.
func (o *VersionedPort) GetConcurrentlySchedulableTaskCount() int32 {
	if o == nil || IsNil(o.ConcurrentlySchedulableTaskCount) {
		var ret int32
		return ret
	}
	return *o.ConcurrentlySchedulableTaskCount
}

// GetConcurrentlySchedulableTaskCountOk returns a tuple with the ConcurrentlySchedulableTaskCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionedPort) GetConcurrentlySchedulableTaskCountOk() (*int32, bool) {
	if o == nil || IsNil(o.ConcurrentlySchedulableTaskCount) {
		return nil, false
	}
	return o.ConcurrentlySchedulableTaskCount, true
}

// HasConcurrentlySchedulableTaskCount returns a boolean if a field has been set.
func (o *VersionedPort) HasConcurrentlySchedulableTaskCount() bool {
	if o != nil && !IsNil(o.ConcurrentlySchedulableTaskCount) {
		return true
	}

	return false
}

// SetConcurrentlySchedulableTaskCount gets a reference to the given int32 and assigns it to the ConcurrentlySchedulableTaskCount field.
func (o *VersionedPort) SetConcurrentlySchedulableTaskCount(v int32) {
	o.ConcurrentlySchedulableTaskCount = &v
}

// GetScheduledState returns the ScheduledState field value if set, zero value otherwise.
func (o *VersionedPort) GetScheduledState() string {
	if o == nil || IsNil(o.ScheduledState) {
		var ret string
		return ret
	}
	return *o.ScheduledState
}

// GetScheduledStateOk returns a tuple with the ScheduledState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionedPort) GetScheduledStateOk() (*string, bool) {
	if o == nil || IsNil(o.ScheduledState) {
		return nil, false
	}
	return o.ScheduledState, true
}

// HasScheduledState returns a boolean if a field has been set.
func (o *VersionedPort) HasScheduledState() bool {
	if o != nil && !IsNil(o.ScheduledState) {
		return true
	}

	return false
}

// SetScheduledState gets a reference to the given string and assigns it to the ScheduledState field.
func (o *VersionedPort) SetScheduledState(v string) {
	o.ScheduledState = &v
}

// GetAllowRemoteAccess returns the AllowRemoteAccess field value if set, zero value otherwise.
func (o *VersionedPort) GetAllowRemoteAccess() bool {
	if o == nil || IsNil(o.AllowRemoteAccess) {
		var ret bool
		return ret
	}
	return *o.AllowRemoteAccess
}

// GetAllowRemoteAccessOk returns a tuple with the AllowRemoteAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionedPort) GetAllowRemoteAccessOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowRemoteAccess) {
		return nil, false
	}
	return o.AllowRemoteAccess, true
}

// HasAllowRemoteAccess returns a boolean if a field has been set.
func (o *VersionedPort) HasAllowRemoteAccess() bool {
	if o != nil && !IsNil(o.AllowRemoteAccess) {
		return true
	}

	return false
}

// SetAllowRemoteAccess gets a reference to the given bool and assigns it to the AllowRemoteAccess field.
func (o *VersionedPort) SetAllowRemoteAccess(v bool) {
	o.AllowRemoteAccess = &v
}

// GetComponentType returns the ComponentType field value if set, zero value otherwise.
func (o *VersionedPort) GetComponentType() string {
	if o == nil || IsNil(o.ComponentType) {
		var ret string
		return ret
	}
	return *o.ComponentType
}

// GetComponentTypeOk returns a tuple with the ComponentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionedPort) GetComponentTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ComponentType) {
		return nil, false
	}
	return o.ComponentType, true
}

// HasComponentType returns a boolean if a field has been set.
func (o *VersionedPort) HasComponentType() bool {
	if o != nil && !IsNil(o.ComponentType) {
		return true
	}

	return false
}

// SetComponentType gets a reference to the given string and assigns it to the ComponentType field.
func (o *VersionedPort) SetComponentType(v string) {
	o.ComponentType = &v
}

// GetGroupIdentifier returns the GroupIdentifier field value if set, zero value otherwise.
func (o *VersionedPort) GetGroupIdentifier() string {
	if o == nil || IsNil(o.GroupIdentifier) {
		var ret string
		return ret
	}
	return *o.GroupIdentifier
}

// GetGroupIdentifierOk returns a tuple with the GroupIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionedPort) GetGroupIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.GroupIdentifier) {
		return nil, false
	}
	return o.GroupIdentifier, true
}

// HasGroupIdentifier returns a boolean if a field has been set.
func (o *VersionedPort) HasGroupIdentifier() bool {
	if o != nil && !IsNil(o.GroupIdentifier) {
		return true
	}

	return false
}

// SetGroupIdentifier gets a reference to the given string and assigns it to the GroupIdentifier field.
func (o *VersionedPort) SetGroupIdentifier(v string) {
	o.GroupIdentifier = &v
}

func (o VersionedPort) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VersionedPort) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Identifier) {
		toSerialize["identifier"] = o.Identifier
	}
	if !IsNil(o.InstanceIdentifier) {
		toSerialize["instanceIdentifier"] = o.InstanceIdentifier
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Comments) {
		toSerialize["comments"] = o.Comments
	}
	if !IsNil(o.Position) {
		toSerialize["position"] = o.Position
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.ConcurrentlySchedulableTaskCount) {
		toSerialize["concurrentlySchedulableTaskCount"] = o.ConcurrentlySchedulableTaskCount
	}
	if !IsNil(o.ScheduledState) {
		toSerialize["scheduledState"] = o.ScheduledState
	}
	if !IsNil(o.AllowRemoteAccess) {
		toSerialize["allowRemoteAccess"] = o.AllowRemoteAccess
	}
	if !IsNil(o.ComponentType) {
		toSerialize["componentType"] = o.ComponentType
	}
	if !IsNil(o.GroupIdentifier) {
		toSerialize["groupIdentifier"] = o.GroupIdentifier
	}
	return toSerialize, nil
}

type NullableVersionedPort struct {
	value *VersionedPort
	isSet bool
}

func (v NullableVersionedPort) Get() *VersionedPort {
	return v.value
}

func (v *NullableVersionedPort) Set(val *VersionedPort) {
	v.value = val
	v.isSet = true
}

func (v NullableVersionedPort) IsSet() bool {
	return v.isSet
}

func (v *NullableVersionedPort) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVersionedPort(val *VersionedPort) *NullableVersionedPort {
	return &NullableVersionedPort{value: val, isSet: true}
}

func (v NullableVersionedPort) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVersionedPort) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


