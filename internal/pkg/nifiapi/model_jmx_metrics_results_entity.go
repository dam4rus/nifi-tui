/*
NiFi Rest API

The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.

API version: 2.0.0
Contact: dev@nifi.apache.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nifiapi

import (
	"encoding/json"
)

// checks if the JmxMetricsResultsEntity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JmxMetricsResultsEntity{}

// JmxMetricsResultsEntity struct for JmxMetricsResultsEntity
type JmxMetricsResultsEntity struct {
	JmxMetricsResults []JmxMetricsResultDTO `json:"jmxMetricsResults,omitempty"`
}

// NewJmxMetricsResultsEntity instantiates a new JmxMetricsResultsEntity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJmxMetricsResultsEntity() *JmxMetricsResultsEntity {
	this := JmxMetricsResultsEntity{}
	return &this
}

// NewJmxMetricsResultsEntityWithDefaults instantiates a new JmxMetricsResultsEntity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJmxMetricsResultsEntityWithDefaults() *JmxMetricsResultsEntity {
	this := JmxMetricsResultsEntity{}
	return &this
}

// GetJmxMetricsResults returns the JmxMetricsResults field value if set, zero value otherwise.
func (o *JmxMetricsResultsEntity) GetJmxMetricsResults() []JmxMetricsResultDTO {
	if o == nil || IsNil(o.JmxMetricsResults) {
		var ret []JmxMetricsResultDTO
		return ret
	}
	return o.JmxMetricsResults
}

// GetJmxMetricsResultsOk returns a tuple with the JmxMetricsResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JmxMetricsResultsEntity) GetJmxMetricsResultsOk() ([]JmxMetricsResultDTO, bool) {
	if o == nil || IsNil(o.JmxMetricsResults) {
		return nil, false
	}
	return o.JmxMetricsResults, true
}

// HasJmxMetricsResults returns a boolean if a field has been set.
func (o *JmxMetricsResultsEntity) HasJmxMetricsResults() bool {
	if o != nil && !IsNil(o.JmxMetricsResults) {
		return true
	}

	return false
}

// SetJmxMetricsResults gets a reference to the given []JmxMetricsResultDTO and assigns it to the JmxMetricsResults field.
func (o *JmxMetricsResultsEntity) SetJmxMetricsResults(v []JmxMetricsResultDTO) {
	o.JmxMetricsResults = v
}

func (o JmxMetricsResultsEntity) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JmxMetricsResultsEntity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.JmxMetricsResults) {
		toSerialize["jmxMetricsResults"] = o.JmxMetricsResults
	}
	return toSerialize, nil
}

type NullableJmxMetricsResultsEntity struct {
	value *JmxMetricsResultsEntity
	isSet bool
}

func (v NullableJmxMetricsResultsEntity) Get() *JmxMetricsResultsEntity {
	return v.value
}

func (v *NullableJmxMetricsResultsEntity) Set(val *JmxMetricsResultsEntity) {
	v.value = val
	v.isSet = true
}

func (v NullableJmxMetricsResultsEntity) IsSet() bool {
	return v.isSet
}

func (v *NullableJmxMetricsResultsEntity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJmxMetricsResultsEntity(val *JmxMetricsResultsEntity) *NullableJmxMetricsResultsEntity {
	return &NullableJmxMetricsResultsEntity{value: val, isSet: true}
}

func (v NullableJmxMetricsResultsEntity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJmxMetricsResultsEntity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


