/*
NiFi Rest API

The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.

API version: 2.0.0
Contact: dev@nifi.apache.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nifiapi

import (
	"encoding/json"
)

// checks if the ConnectionStatisticsDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConnectionStatisticsDTO{}

// ConnectionStatisticsDTO struct for ConnectionStatisticsDTO
type ConnectionStatisticsDTO struct {
	// The ID of the connection
	Id *string `json:"id,omitempty"`
	// The timestamp of when the stats were last refreshed
	StatsLastRefreshed *string `json:"statsLastRefreshed,omitempty"`
	AggregateSnapshot *ConnectionStatisticsSnapshotDTO `json:"aggregateSnapshot,omitempty"`
	// A list of status snapshots for each node
	NodeSnapshots []NodeConnectionStatisticsSnapshotDTO `json:"nodeSnapshots,omitempty"`
}

// NewConnectionStatisticsDTO instantiates a new ConnectionStatisticsDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectionStatisticsDTO() *ConnectionStatisticsDTO {
	this := ConnectionStatisticsDTO{}
	return &this
}

// NewConnectionStatisticsDTOWithDefaults instantiates a new ConnectionStatisticsDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectionStatisticsDTOWithDefaults() *ConnectionStatisticsDTO {
	this := ConnectionStatisticsDTO{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ConnectionStatisticsDTO) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionStatisticsDTO) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ConnectionStatisticsDTO) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ConnectionStatisticsDTO) SetId(v string) {
	o.Id = &v
}

// GetStatsLastRefreshed returns the StatsLastRefreshed field value if set, zero value otherwise.
func (o *ConnectionStatisticsDTO) GetStatsLastRefreshed() string {
	if o == nil || IsNil(o.StatsLastRefreshed) {
		var ret string
		return ret
	}
	return *o.StatsLastRefreshed
}

// GetStatsLastRefreshedOk returns a tuple with the StatsLastRefreshed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionStatisticsDTO) GetStatsLastRefreshedOk() (*string, bool) {
	if o == nil || IsNil(o.StatsLastRefreshed) {
		return nil, false
	}
	return o.StatsLastRefreshed, true
}

// HasStatsLastRefreshed returns a boolean if a field has been set.
func (o *ConnectionStatisticsDTO) HasStatsLastRefreshed() bool {
	if o != nil && !IsNil(o.StatsLastRefreshed) {
		return true
	}

	return false
}

// SetStatsLastRefreshed gets a reference to the given string and assigns it to the StatsLastRefreshed field.
func (o *ConnectionStatisticsDTO) SetStatsLastRefreshed(v string) {
	o.StatsLastRefreshed = &v
}

// GetAggregateSnapshot returns the AggregateSnapshot field value if set, zero value otherwise.
func (o *ConnectionStatisticsDTO) GetAggregateSnapshot() ConnectionStatisticsSnapshotDTO {
	if o == nil || IsNil(o.AggregateSnapshot) {
		var ret ConnectionStatisticsSnapshotDTO
		return ret
	}
	return *o.AggregateSnapshot
}

// GetAggregateSnapshotOk returns a tuple with the AggregateSnapshot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionStatisticsDTO) GetAggregateSnapshotOk() (*ConnectionStatisticsSnapshotDTO, bool) {
	if o == nil || IsNil(o.AggregateSnapshot) {
		return nil, false
	}
	return o.AggregateSnapshot, true
}

// HasAggregateSnapshot returns a boolean if a field has been set.
func (o *ConnectionStatisticsDTO) HasAggregateSnapshot() bool {
	if o != nil && !IsNil(o.AggregateSnapshot) {
		return true
	}

	return false
}

// SetAggregateSnapshot gets a reference to the given ConnectionStatisticsSnapshotDTO and assigns it to the AggregateSnapshot field.
func (o *ConnectionStatisticsDTO) SetAggregateSnapshot(v ConnectionStatisticsSnapshotDTO) {
	o.AggregateSnapshot = &v
}

// GetNodeSnapshots returns the NodeSnapshots field value if set, zero value otherwise.
func (o *ConnectionStatisticsDTO) GetNodeSnapshots() []NodeConnectionStatisticsSnapshotDTO {
	if o == nil || IsNil(o.NodeSnapshots) {
		var ret []NodeConnectionStatisticsSnapshotDTO
		return ret
	}
	return o.NodeSnapshots
}

// GetNodeSnapshotsOk returns a tuple with the NodeSnapshots field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionStatisticsDTO) GetNodeSnapshotsOk() ([]NodeConnectionStatisticsSnapshotDTO, bool) {
	if o == nil || IsNil(o.NodeSnapshots) {
		return nil, false
	}
	return o.NodeSnapshots, true
}

// HasNodeSnapshots returns a boolean if a field has been set.
func (o *ConnectionStatisticsDTO) HasNodeSnapshots() bool {
	if o != nil && !IsNil(o.NodeSnapshots) {
		return true
	}

	return false
}

// SetNodeSnapshots gets a reference to the given []NodeConnectionStatisticsSnapshotDTO and assigns it to the NodeSnapshots field.
func (o *ConnectionStatisticsDTO) SetNodeSnapshots(v []NodeConnectionStatisticsSnapshotDTO) {
	o.NodeSnapshots = v
}

func (o ConnectionStatisticsDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConnectionStatisticsDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.StatsLastRefreshed) {
		toSerialize["statsLastRefreshed"] = o.StatsLastRefreshed
	}
	if !IsNil(o.AggregateSnapshot) {
		toSerialize["aggregateSnapshot"] = o.AggregateSnapshot
	}
	if !IsNil(o.NodeSnapshots) {
		toSerialize["nodeSnapshots"] = o.NodeSnapshots
	}
	return toSerialize, nil
}

type NullableConnectionStatisticsDTO struct {
	value *ConnectionStatisticsDTO
	isSet bool
}

func (v NullableConnectionStatisticsDTO) Get() *ConnectionStatisticsDTO {
	return v.value
}

func (v *NullableConnectionStatisticsDTO) Set(val *ConnectionStatisticsDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectionStatisticsDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectionStatisticsDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectionStatisticsDTO(val *ConnectionStatisticsDTO) *NullableConnectionStatisticsDTO {
	return &NullableConnectionStatisticsDTO{value: val, isSet: true}
}

func (v NullableConnectionStatisticsDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectionStatisticsDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


