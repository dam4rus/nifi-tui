/*
NiFi Rest API

The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.

API version: 2.0.0
Contact: dev@nifi.apache.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nifiapi

import (
	"encoding/json"
)

// checks if the ProcessorDefinition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProcessorDefinition{}

// ProcessorDefinition struct for ProcessorDefinition
type ProcessorDefinition struct {
	// The group name of the bundle that provides the referenced type.
	Group *string `json:"group,omitempty"`
	// The artifact name of the bundle that provides the referenced type.
	Artifact *string `json:"artifact,omitempty"`
	// The version of the bundle that provides the referenced type.
	Version *string `json:"version,omitempty"`
	// The fully-qualified class type
	Type string `json:"type"`
	// The description of the type.
	TypeDescription *string `json:"typeDescription,omitempty"`
	BuildInfo *BuildInfo `json:"buildInfo,omitempty"`
	// If this type represents a provider for an interface, this lists the APIs it implements
	ProvidedApiImplementations []DefinedType `json:"providedApiImplementations,omitempty"`
	// The tags associated with this type
	Tags []string `json:"tags,omitempty"`
	// The names of other component types that may be related
	SeeAlso []string `json:"seeAlso,omitempty"`
	// Whether or not the component has been deprecated
	Deprecated *bool `json:"deprecated,omitempty"`
	// If this component has been deprecated, this optional field can be used to provide an explanation
	DeprecationReason *string `json:"deprecationReason,omitempty"`
	// If this component has been deprecated, this optional field provides alternatives to use
	DeprecationAlternatives []string `json:"deprecationAlternatives,omitempty"`
	// Whether or not the component has a general restriction
	Restricted *bool `json:"restricted,omitempty"`
	// An optional description of the general restriction
	RestrictedExplanation *string `json:"restrictedExplanation,omitempty"`
	// Explicit restrictions that indicate a require permission to use the component
	ExplicitRestrictions []Restriction `json:"explicitRestrictions,omitempty"`
	Stateful *Stateful `json:"stateful,omitempty"`
	// The system resource considerations for the given component
	SystemResourceConsiderations []SystemResourceConsideration `json:"systemResourceConsiderations,omitempty"`
	// Indicates if the component has additional details documentation
	AdditionalDetails *bool `json:"additionalDetails,omitempty"`
	// Descriptions of configuration properties applicable to this component.
	PropertyDescriptors *map[string]PropertyDescriptor `json:"propertyDescriptors,omitempty"`
	// Whether or not this component makes use of dynamic (user-set) properties.
	SupportsDynamicProperties *bool `json:"supportsDynamicProperties,omitempty"`
	// Describes the dynamic properties supported by this component
	DynamicProperties []DynamicProperty `json:"dynamicProperties,omitempty"`
	// Any input requirements this processor has.
	InputRequirement *string `json:"inputRequirement,omitempty"`
	// The supported relationships for this processor.
	SupportedRelationships []Relationship `json:"supportedRelationships,omitempty"`
	// Whether or not this processor supports dynamic relationships.
	SupportsDynamicRelationships *bool `json:"supportsDynamicRelationships,omitempty"`
	DynamicRelationship *DynamicRelationship `json:"dynamicRelationship,omitempty"`
	// Whether or not this processor should be triggered serially (i.e. no concurrent execution).
	TriggerSerially *bool `json:"triggerSerially,omitempty"`
	// Whether or not this processor should be triggered when incoming queues are empty.
	TriggerWhenEmpty *bool `json:"triggerWhenEmpty,omitempty"`
	// Whether or not this processor should be triggered when any destination queue has room.
	TriggerWhenAnyDestinationAvailable *bool `json:"triggerWhenAnyDestinationAvailable,omitempty"`
	// Whether or not this processor supports batching. If a Processor uses this annotation, it allows the Framework to batch calls to session commits, as well as allowing the Framework to return the same session multiple times.
	SupportsBatching *bool `json:"supportsBatching,omitempty"`
	// Whether or not this processor supports event driven scheduling. Indicates to the framework that the Processor is eligible to be scheduled to run based on the occurrence of an \"Event\" (e.g., when a FlowFile is enqueued in an incoming Connection), rather than being triggered periodically.
	SupportsEventDriven *bool `json:"supportsEventDriven,omitempty"`
	// Whether or not this processor should be scheduled only on the primary node in a cluster.
	PrimaryNodeOnly *bool `json:"primaryNodeOnly,omitempty"`
	// Whether or not this processor is considered side-effect free. Side-effect free indicate that the processor's operations on FlowFiles can be safely repeated across process sessions.
	SideEffectFree *bool `json:"sideEffectFree,omitempty"`
	// The supported scheduling strategies, such as TIME_DRIVER, CRON, or EVENT_DRIVEN.
	SupportedSchedulingStrategies []string `json:"supportedSchedulingStrategies,omitempty"`
	// The default scheduling strategy for the processor.
	DefaultSchedulingStrategy *string `json:"defaultSchedulingStrategy,omitempty"`
	// The default concurrent tasks for each scheduling strategy.
	DefaultConcurrentTasksBySchedulingStrategy *map[string]int32 `json:"defaultConcurrentTasksBySchedulingStrategy,omitempty"`
	// The default scheduling period for each scheduling strategy. The scheduling period is expected to be a time period, such as \"30 sec\".
	DefaultSchedulingPeriodBySchedulingStrategy *map[string]string `json:"defaultSchedulingPeriodBySchedulingStrategy,omitempty"`
	// The default penalty duration as a time period, such as \"30 sec\".
	DefaultPenaltyDuration *string `json:"defaultPenaltyDuration,omitempty"`
	// The default yield duration as a time period, such as \"1 sec\".
	DefaultYieldDuration *string `json:"defaultYieldDuration,omitempty"`
	// The default bulletin level, such as WARN, INFO, DEBUG, etc.
	DefaultBulletinLevel *string `json:"defaultBulletinLevel,omitempty"`
	// The FlowFile attributes this processor reads
	ReadsAttributes []Attribute `json:"readsAttributes,omitempty"`
	// The FlowFile attributes this processor writes/updates
	WritesAttributes []Attribute `json:"writesAttributes,omitempty"`
}

// NewProcessorDefinition instantiates a new ProcessorDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProcessorDefinition(type_ string) *ProcessorDefinition {
	this := ProcessorDefinition{}
	this.Type = type_
	return &this
}

// NewProcessorDefinitionWithDefaults instantiates a new ProcessorDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProcessorDefinitionWithDefaults() *ProcessorDefinition {
	this := ProcessorDefinition{}
	return &this
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *ProcessorDefinition) GetGroup() string {
	if o == nil || IsNil(o.Group) {
		var ret string
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessorDefinition) GetGroupOk() (*string, bool) {
	if o == nil || IsNil(o.Group) {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *ProcessorDefinition) HasGroup() bool {
	if o != nil && !IsNil(o.Group) {
		return true
	}

	return false
}

// SetGroup gets a reference to the given string and assigns it to the Group field.
func (o *ProcessorDefinition) SetGroup(v string) {
	o.Group = &v
}

// GetArtifact returns the Artifact field value if set, zero value otherwise.
func (o *ProcessorDefinition) GetArtifact() string {
	if o == nil || IsNil(o.Artifact) {
		var ret string
		return ret
	}
	return *o.Artifact
}

// GetArtifactOk returns a tuple with the Artifact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessorDefinition) GetArtifactOk() (*string, bool) {
	if o == nil || IsNil(o.Artifact) {
		return nil, false
	}
	return o.Artifact, true
}

// HasArtifact returns a boolean if a field has been set.
func (o *ProcessorDefinition) HasArtifact() bool {
	if o != nil && !IsNil(o.Artifact) {
		return true
	}

	return false
}

// SetArtifact gets a reference to the given string and assigns it to the Artifact field.
func (o *ProcessorDefinition) SetArtifact(v string) {
	o.Artifact = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *ProcessorDefinition) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessorDefinition) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *ProcessorDefinition) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *ProcessorDefinition) SetVersion(v string) {
	o.Version = &v
}

// GetType returns the Type field value
func (o *ProcessorDefinition) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ProcessorDefinition) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ProcessorDefinition) SetType(v string) {
	o.Type = v
}

// GetTypeDescription returns the TypeDescription field value if set, zero value otherwise.
func (o *ProcessorDefinition) GetTypeDescription() string {
	if o == nil || IsNil(o.TypeDescription) {
		var ret string
		return ret
	}
	return *o.TypeDescription
}

// GetTypeDescriptionOk returns a tuple with the TypeDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessorDefinition) GetTypeDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.TypeDescription) {
		return nil, false
	}
	return o.TypeDescription, true
}

// HasTypeDescription returns a boolean if a field has been set.
func (o *ProcessorDefinition) HasTypeDescription() bool {
	if o != nil && !IsNil(o.TypeDescription) {
		return true
	}

	return false
}

// SetTypeDescription gets a reference to the given string and assigns it to the TypeDescription field.
func (o *ProcessorDefinition) SetTypeDescription(v string) {
	o.TypeDescription = &v
}

// GetBuildInfo returns the BuildInfo field value if set, zero value otherwise.
func (o *ProcessorDefinition) GetBuildInfo() BuildInfo {
	if o == nil || IsNil(o.BuildInfo) {
		var ret BuildInfo
		return ret
	}
	return *o.BuildInfo
}

// GetBuildInfoOk returns a tuple with the BuildInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessorDefinition) GetBuildInfoOk() (*BuildInfo, bool) {
	if o == nil || IsNil(o.BuildInfo) {
		return nil, false
	}
	return o.BuildInfo, true
}

// HasBuildInfo returns a boolean if a field has been set.
func (o *ProcessorDefinition) HasBuildInfo() bool {
	if o != nil && !IsNil(o.BuildInfo) {
		return true
	}

	return false
}

// SetBuildInfo gets a reference to the given BuildInfo and assigns it to the BuildInfo field.
func (o *ProcessorDefinition) SetBuildInfo(v BuildInfo) {
	o.BuildInfo = &v
}

// GetProvidedApiImplementations returns the ProvidedApiImplementations field value if set, zero value otherwise.
func (o *ProcessorDefinition) GetProvidedApiImplementations() []DefinedType {
	if o == nil || IsNil(o.ProvidedApiImplementations) {
		var ret []DefinedType
		return ret
	}
	return o.ProvidedApiImplementations
}

// GetProvidedApiImplementationsOk returns a tuple with the ProvidedApiImplementations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessorDefinition) GetProvidedApiImplementationsOk() ([]DefinedType, bool) {
	if o == nil || IsNil(o.ProvidedApiImplementations) {
		return nil, false
	}
	return o.ProvidedApiImplementations, true
}

// HasProvidedApiImplementations returns a boolean if a field has been set.
func (o *ProcessorDefinition) HasProvidedApiImplementations() bool {
	if o != nil && !IsNil(o.ProvidedApiImplementations) {
		return true
	}

	return false
}

// SetProvidedApiImplementations gets a reference to the given []DefinedType and assigns it to the ProvidedApiImplementations field.
func (o *ProcessorDefinition) SetProvidedApiImplementations(v []DefinedType) {
	o.ProvidedApiImplementations = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *ProcessorDefinition) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessorDefinition) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *ProcessorDefinition) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *ProcessorDefinition) SetTags(v []string) {
	o.Tags = v
}

// GetSeeAlso returns the SeeAlso field value if set, zero value otherwise.
func (o *ProcessorDefinition) GetSeeAlso() []string {
	if o == nil || IsNil(o.SeeAlso) {
		var ret []string
		return ret
	}
	return o.SeeAlso
}

// GetSeeAlsoOk returns a tuple with the SeeAlso field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessorDefinition) GetSeeAlsoOk() ([]string, bool) {
	if o == nil || IsNil(o.SeeAlso) {
		return nil, false
	}
	return o.SeeAlso, true
}

// HasSeeAlso returns a boolean if a field has been set.
func (o *ProcessorDefinition) HasSeeAlso() bool {
	if o != nil && !IsNil(o.SeeAlso) {
		return true
	}

	return false
}

// SetSeeAlso gets a reference to the given []string and assigns it to the SeeAlso field.
func (o *ProcessorDefinition) SetSeeAlso(v []string) {
	o.SeeAlso = v
}

// GetDeprecated returns the Deprecated field value if set, zero value otherwise.
func (o *ProcessorDefinition) GetDeprecated() bool {
	if o == nil || IsNil(o.Deprecated) {
		var ret bool
		return ret
	}
	return *o.Deprecated
}

// GetDeprecatedOk returns a tuple with the Deprecated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessorDefinition) GetDeprecatedOk() (*bool, bool) {
	if o == nil || IsNil(o.Deprecated) {
		return nil, false
	}
	return o.Deprecated, true
}

// HasDeprecated returns a boolean if a field has been set.
func (o *ProcessorDefinition) HasDeprecated() bool {
	if o != nil && !IsNil(o.Deprecated) {
		return true
	}

	return false
}

// SetDeprecated gets a reference to the given bool and assigns it to the Deprecated field.
func (o *ProcessorDefinition) SetDeprecated(v bool) {
	o.Deprecated = &v
}

// GetDeprecationReason returns the DeprecationReason field value if set, zero value otherwise.
func (o *ProcessorDefinition) GetDeprecationReason() string {
	if o == nil || IsNil(o.DeprecationReason) {
		var ret string
		return ret
	}
	return *o.DeprecationReason
}

// GetDeprecationReasonOk returns a tuple with the DeprecationReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessorDefinition) GetDeprecationReasonOk() (*string, bool) {
	if o == nil || IsNil(o.DeprecationReason) {
		return nil, false
	}
	return o.DeprecationReason, true
}

// HasDeprecationReason returns a boolean if a field has been set.
func (o *ProcessorDefinition) HasDeprecationReason() bool {
	if o != nil && !IsNil(o.DeprecationReason) {
		return true
	}

	return false
}

// SetDeprecationReason gets a reference to the given string and assigns it to the DeprecationReason field.
func (o *ProcessorDefinition) SetDeprecationReason(v string) {
	o.DeprecationReason = &v
}

// GetDeprecationAlternatives returns the DeprecationAlternatives field value if set, zero value otherwise.
func (o *ProcessorDefinition) GetDeprecationAlternatives() []string {
	if o == nil || IsNil(o.DeprecationAlternatives) {
		var ret []string
		return ret
	}
	return o.DeprecationAlternatives
}

// GetDeprecationAlternativesOk returns a tuple with the DeprecationAlternatives field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessorDefinition) GetDeprecationAlternativesOk() ([]string, bool) {
	if o == nil || IsNil(o.DeprecationAlternatives) {
		return nil, false
	}
	return o.DeprecationAlternatives, true
}

// HasDeprecationAlternatives returns a boolean if a field has been set.
func (o *ProcessorDefinition) HasDeprecationAlternatives() bool {
	if o != nil && !IsNil(o.DeprecationAlternatives) {
		return true
	}

	return false
}

// SetDeprecationAlternatives gets a reference to the given []string and assigns it to the DeprecationAlternatives field.
func (o *ProcessorDefinition) SetDeprecationAlternatives(v []string) {
	o.DeprecationAlternatives = v
}

// GetRestricted returns the Restricted field value if set, zero value otherwise.
func (o *ProcessorDefinition) GetRestricted() bool {
	if o == nil || IsNil(o.Restricted) {
		var ret bool
		return ret
	}
	return *o.Restricted
}

// GetRestrictedOk returns a tuple with the Restricted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessorDefinition) GetRestrictedOk() (*bool, bool) {
	if o == nil || IsNil(o.Restricted) {
		return nil, false
	}
	return o.Restricted, true
}

// HasRestricted returns a boolean if a field has been set.
func (o *ProcessorDefinition) HasRestricted() bool {
	if o != nil && !IsNil(o.Restricted) {
		return true
	}

	return false
}

// SetRestricted gets a reference to the given bool and assigns it to the Restricted field.
func (o *ProcessorDefinition) SetRestricted(v bool) {
	o.Restricted = &v
}

// GetRestrictedExplanation returns the RestrictedExplanation field value if set, zero value otherwise.
func (o *ProcessorDefinition) GetRestrictedExplanation() string {
	if o == nil || IsNil(o.RestrictedExplanation) {
		var ret string
		return ret
	}
	return *o.RestrictedExplanation
}

// GetRestrictedExplanationOk returns a tuple with the RestrictedExplanation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessorDefinition) GetRestrictedExplanationOk() (*string, bool) {
	if o == nil || IsNil(o.RestrictedExplanation) {
		return nil, false
	}
	return o.RestrictedExplanation, true
}

// HasRestrictedExplanation returns a boolean if a field has been set.
func (o *ProcessorDefinition) HasRestrictedExplanation() bool {
	if o != nil && !IsNil(o.RestrictedExplanation) {
		return true
	}

	return false
}

// SetRestrictedExplanation gets a reference to the given string and assigns it to the RestrictedExplanation field.
func (o *ProcessorDefinition) SetRestrictedExplanation(v string) {
	o.RestrictedExplanation = &v
}

// GetExplicitRestrictions returns the ExplicitRestrictions field value if set, zero value otherwise.
func (o *ProcessorDefinition) GetExplicitRestrictions() []Restriction {
	if o == nil || IsNil(o.ExplicitRestrictions) {
		var ret []Restriction
		return ret
	}
	return o.ExplicitRestrictions
}

// GetExplicitRestrictionsOk returns a tuple with the ExplicitRestrictions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessorDefinition) GetExplicitRestrictionsOk() ([]Restriction, bool) {
	if o == nil || IsNil(o.ExplicitRestrictions) {
		return nil, false
	}
	return o.ExplicitRestrictions, true
}

// HasExplicitRestrictions returns a boolean if a field has been set.
func (o *ProcessorDefinition) HasExplicitRestrictions() bool {
	if o != nil && !IsNil(o.ExplicitRestrictions) {
		return true
	}

	return false
}

// SetExplicitRestrictions gets a reference to the given []Restriction and assigns it to the ExplicitRestrictions field.
func (o *ProcessorDefinition) SetExplicitRestrictions(v []Restriction) {
	o.ExplicitRestrictions = v
}

// GetStateful returns the Stateful field value if set, zero value otherwise.
func (o *ProcessorDefinition) GetStateful() Stateful {
	if o == nil || IsNil(o.Stateful) {
		var ret Stateful
		return ret
	}
	return *o.Stateful
}

// GetStatefulOk returns a tuple with the Stateful field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessorDefinition) GetStatefulOk() (*Stateful, bool) {
	if o == nil || IsNil(o.Stateful) {
		return nil, false
	}
	return o.Stateful, true
}

// HasStateful returns a boolean if a field has been set.
func (o *ProcessorDefinition) HasStateful() bool {
	if o != nil && !IsNil(o.Stateful) {
		return true
	}

	return false
}

// SetStateful gets a reference to the given Stateful and assigns it to the Stateful field.
func (o *ProcessorDefinition) SetStateful(v Stateful) {
	o.Stateful = &v
}

// GetSystemResourceConsiderations returns the SystemResourceConsiderations field value if set, zero value otherwise.
func (o *ProcessorDefinition) GetSystemResourceConsiderations() []SystemResourceConsideration {
	if o == nil || IsNil(o.SystemResourceConsiderations) {
		var ret []SystemResourceConsideration
		return ret
	}
	return o.SystemResourceConsiderations
}

// GetSystemResourceConsiderationsOk returns a tuple with the SystemResourceConsiderations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessorDefinition) GetSystemResourceConsiderationsOk() ([]SystemResourceConsideration, bool) {
	if o == nil || IsNil(o.SystemResourceConsiderations) {
		return nil, false
	}
	return o.SystemResourceConsiderations, true
}

// HasSystemResourceConsiderations returns a boolean if a field has been set.
func (o *ProcessorDefinition) HasSystemResourceConsiderations() bool {
	if o != nil && !IsNil(o.SystemResourceConsiderations) {
		return true
	}

	return false
}

// SetSystemResourceConsiderations gets a reference to the given []SystemResourceConsideration and assigns it to the SystemResourceConsiderations field.
func (o *ProcessorDefinition) SetSystemResourceConsiderations(v []SystemResourceConsideration) {
	o.SystemResourceConsiderations = v
}

// GetAdditionalDetails returns the AdditionalDetails field value if set, zero value otherwise.
func (o *ProcessorDefinition) GetAdditionalDetails() bool {
	if o == nil || IsNil(o.AdditionalDetails) {
		var ret bool
		return ret
	}
	return *o.AdditionalDetails
}

// GetAdditionalDetailsOk returns a tuple with the AdditionalDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessorDefinition) GetAdditionalDetailsOk() (*bool, bool) {
	if o == nil || IsNil(o.AdditionalDetails) {
		return nil, false
	}
	return o.AdditionalDetails, true
}

// HasAdditionalDetails returns a boolean if a field has been set.
func (o *ProcessorDefinition) HasAdditionalDetails() bool {
	if o != nil && !IsNil(o.AdditionalDetails) {
		return true
	}

	return false
}

// SetAdditionalDetails gets a reference to the given bool and assigns it to the AdditionalDetails field.
func (o *ProcessorDefinition) SetAdditionalDetails(v bool) {
	o.AdditionalDetails = &v
}

// GetPropertyDescriptors returns the PropertyDescriptors field value if set, zero value otherwise.
func (o *ProcessorDefinition) GetPropertyDescriptors() map[string]PropertyDescriptor {
	if o == nil || IsNil(o.PropertyDescriptors) {
		var ret map[string]PropertyDescriptor
		return ret
	}
	return *o.PropertyDescriptors
}

// GetPropertyDescriptorsOk returns a tuple with the PropertyDescriptors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessorDefinition) GetPropertyDescriptorsOk() (*map[string]PropertyDescriptor, bool) {
	if o == nil || IsNil(o.PropertyDescriptors) {
		return nil, false
	}
	return o.PropertyDescriptors, true
}

// HasPropertyDescriptors returns a boolean if a field has been set.
func (o *ProcessorDefinition) HasPropertyDescriptors() bool {
	if o != nil && !IsNil(o.PropertyDescriptors) {
		return true
	}

	return false
}

// SetPropertyDescriptors gets a reference to the given map[string]PropertyDescriptor and assigns it to the PropertyDescriptors field.
func (o *ProcessorDefinition) SetPropertyDescriptors(v map[string]PropertyDescriptor) {
	o.PropertyDescriptors = &v
}

// GetSupportsDynamicProperties returns the SupportsDynamicProperties field value if set, zero value otherwise.
func (o *ProcessorDefinition) GetSupportsDynamicProperties() bool {
	if o == nil || IsNil(o.SupportsDynamicProperties) {
		var ret bool
		return ret
	}
	return *o.SupportsDynamicProperties
}

// GetSupportsDynamicPropertiesOk returns a tuple with the SupportsDynamicProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessorDefinition) GetSupportsDynamicPropertiesOk() (*bool, bool) {
	if o == nil || IsNil(o.SupportsDynamicProperties) {
		return nil, false
	}
	return o.SupportsDynamicProperties, true
}

// HasSupportsDynamicProperties returns a boolean if a field has been set.
func (o *ProcessorDefinition) HasSupportsDynamicProperties() bool {
	if o != nil && !IsNil(o.SupportsDynamicProperties) {
		return true
	}

	return false
}

// SetSupportsDynamicProperties gets a reference to the given bool and assigns it to the SupportsDynamicProperties field.
func (o *ProcessorDefinition) SetSupportsDynamicProperties(v bool) {
	o.SupportsDynamicProperties = &v
}

// GetDynamicProperties returns the DynamicProperties field value if set, zero value otherwise.
func (o *ProcessorDefinition) GetDynamicProperties() []DynamicProperty {
	if o == nil || IsNil(o.DynamicProperties) {
		var ret []DynamicProperty
		return ret
	}
	return o.DynamicProperties
}

// GetDynamicPropertiesOk returns a tuple with the DynamicProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessorDefinition) GetDynamicPropertiesOk() ([]DynamicProperty, bool) {
	if o == nil || IsNil(o.DynamicProperties) {
		return nil, false
	}
	return o.DynamicProperties, true
}

// HasDynamicProperties returns a boolean if a field has been set.
func (o *ProcessorDefinition) HasDynamicProperties() bool {
	if o != nil && !IsNil(o.DynamicProperties) {
		return true
	}

	return false
}

// SetDynamicProperties gets a reference to the given []DynamicProperty and assigns it to the DynamicProperties field.
func (o *ProcessorDefinition) SetDynamicProperties(v []DynamicProperty) {
	o.DynamicProperties = v
}

// GetInputRequirement returns the InputRequirement field value if set, zero value otherwise.
func (o *ProcessorDefinition) GetInputRequirement() string {
	if o == nil || IsNil(o.InputRequirement) {
		var ret string
		return ret
	}
	return *o.InputRequirement
}

// GetInputRequirementOk returns a tuple with the InputRequirement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessorDefinition) GetInputRequirementOk() (*string, bool) {
	if o == nil || IsNil(o.InputRequirement) {
		return nil, false
	}
	return o.InputRequirement, true
}

// HasInputRequirement returns a boolean if a field has been set.
func (o *ProcessorDefinition) HasInputRequirement() bool {
	if o != nil && !IsNil(o.InputRequirement) {
		return true
	}

	return false
}

// SetInputRequirement gets a reference to the given string and assigns it to the InputRequirement field.
func (o *ProcessorDefinition) SetInputRequirement(v string) {
	o.InputRequirement = &v
}

// GetSupportedRelationships returns the SupportedRelationships field value if set, zero value otherwise.
func (o *ProcessorDefinition) GetSupportedRelationships() []Relationship {
	if o == nil || IsNil(o.SupportedRelationships) {
		var ret []Relationship
		return ret
	}
	return o.SupportedRelationships
}

// GetSupportedRelationshipsOk returns a tuple with the SupportedRelationships field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessorDefinition) GetSupportedRelationshipsOk() ([]Relationship, bool) {
	if o == nil || IsNil(o.SupportedRelationships) {
		return nil, false
	}
	return o.SupportedRelationships, true
}

// HasSupportedRelationships returns a boolean if a field has been set.
func (o *ProcessorDefinition) HasSupportedRelationships() bool {
	if o != nil && !IsNil(o.SupportedRelationships) {
		return true
	}

	return false
}

// SetSupportedRelationships gets a reference to the given []Relationship and assigns it to the SupportedRelationships field.
func (o *ProcessorDefinition) SetSupportedRelationships(v []Relationship) {
	o.SupportedRelationships = v
}

// GetSupportsDynamicRelationships returns the SupportsDynamicRelationships field value if set, zero value otherwise.
func (o *ProcessorDefinition) GetSupportsDynamicRelationships() bool {
	if o == nil || IsNil(o.SupportsDynamicRelationships) {
		var ret bool
		return ret
	}
	return *o.SupportsDynamicRelationships
}

// GetSupportsDynamicRelationshipsOk returns a tuple with the SupportsDynamicRelationships field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessorDefinition) GetSupportsDynamicRelationshipsOk() (*bool, bool) {
	if o == nil || IsNil(o.SupportsDynamicRelationships) {
		return nil, false
	}
	return o.SupportsDynamicRelationships, true
}

// HasSupportsDynamicRelationships returns a boolean if a field has been set.
func (o *ProcessorDefinition) HasSupportsDynamicRelationships() bool {
	if o != nil && !IsNil(o.SupportsDynamicRelationships) {
		return true
	}

	return false
}

// SetSupportsDynamicRelationships gets a reference to the given bool and assigns it to the SupportsDynamicRelationships field.
func (o *ProcessorDefinition) SetSupportsDynamicRelationships(v bool) {
	o.SupportsDynamicRelationships = &v
}

// GetDynamicRelationship returns the DynamicRelationship field value if set, zero value otherwise.
func (o *ProcessorDefinition) GetDynamicRelationship() DynamicRelationship {
	if o == nil || IsNil(o.DynamicRelationship) {
		var ret DynamicRelationship
		return ret
	}
	return *o.DynamicRelationship
}

// GetDynamicRelationshipOk returns a tuple with the DynamicRelationship field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessorDefinition) GetDynamicRelationshipOk() (*DynamicRelationship, bool) {
	if o == nil || IsNil(o.DynamicRelationship) {
		return nil, false
	}
	return o.DynamicRelationship, true
}

// HasDynamicRelationship returns a boolean if a field has been set.
func (o *ProcessorDefinition) HasDynamicRelationship() bool {
	if o != nil && !IsNil(o.DynamicRelationship) {
		return true
	}

	return false
}

// SetDynamicRelationship gets a reference to the given DynamicRelationship and assigns it to the DynamicRelationship field.
func (o *ProcessorDefinition) SetDynamicRelationship(v DynamicRelationship) {
	o.DynamicRelationship = &v
}

// GetTriggerSerially returns the TriggerSerially field value if set, zero value otherwise.
func (o *ProcessorDefinition) GetTriggerSerially() bool {
	if o == nil || IsNil(o.TriggerSerially) {
		var ret bool
		return ret
	}
	return *o.TriggerSerially
}

// GetTriggerSeriallyOk returns a tuple with the TriggerSerially field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessorDefinition) GetTriggerSeriallyOk() (*bool, bool) {
	if o == nil || IsNil(o.TriggerSerially) {
		return nil, false
	}
	return o.TriggerSerially, true
}

// HasTriggerSerially returns a boolean if a field has been set.
func (o *ProcessorDefinition) HasTriggerSerially() bool {
	if o != nil && !IsNil(o.TriggerSerially) {
		return true
	}

	return false
}

// SetTriggerSerially gets a reference to the given bool and assigns it to the TriggerSerially field.
func (o *ProcessorDefinition) SetTriggerSerially(v bool) {
	o.TriggerSerially = &v
}

// GetTriggerWhenEmpty returns the TriggerWhenEmpty field value if set, zero value otherwise.
func (o *ProcessorDefinition) GetTriggerWhenEmpty() bool {
	if o == nil || IsNil(o.TriggerWhenEmpty) {
		var ret bool
		return ret
	}
	return *o.TriggerWhenEmpty
}

// GetTriggerWhenEmptyOk returns a tuple with the TriggerWhenEmpty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessorDefinition) GetTriggerWhenEmptyOk() (*bool, bool) {
	if o == nil || IsNil(o.TriggerWhenEmpty) {
		return nil, false
	}
	return o.TriggerWhenEmpty, true
}

// HasTriggerWhenEmpty returns a boolean if a field has been set.
func (o *ProcessorDefinition) HasTriggerWhenEmpty() bool {
	if o != nil && !IsNil(o.TriggerWhenEmpty) {
		return true
	}

	return false
}

// SetTriggerWhenEmpty gets a reference to the given bool and assigns it to the TriggerWhenEmpty field.
func (o *ProcessorDefinition) SetTriggerWhenEmpty(v bool) {
	o.TriggerWhenEmpty = &v
}

// GetTriggerWhenAnyDestinationAvailable returns the TriggerWhenAnyDestinationAvailable field value if set, zero value otherwise.
func (o *ProcessorDefinition) GetTriggerWhenAnyDestinationAvailable() bool {
	if o == nil || IsNil(o.TriggerWhenAnyDestinationAvailable) {
		var ret bool
		return ret
	}
	return *o.TriggerWhenAnyDestinationAvailable
}

// GetTriggerWhenAnyDestinationAvailableOk returns a tuple with the TriggerWhenAnyDestinationAvailable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessorDefinition) GetTriggerWhenAnyDestinationAvailableOk() (*bool, bool) {
	if o == nil || IsNil(o.TriggerWhenAnyDestinationAvailable) {
		return nil, false
	}
	return o.TriggerWhenAnyDestinationAvailable, true
}

// HasTriggerWhenAnyDestinationAvailable returns a boolean if a field has been set.
func (o *ProcessorDefinition) HasTriggerWhenAnyDestinationAvailable() bool {
	if o != nil && !IsNil(o.TriggerWhenAnyDestinationAvailable) {
		return true
	}

	return false
}

// SetTriggerWhenAnyDestinationAvailable gets a reference to the given bool and assigns it to the TriggerWhenAnyDestinationAvailable field.
func (o *ProcessorDefinition) SetTriggerWhenAnyDestinationAvailable(v bool) {
	o.TriggerWhenAnyDestinationAvailable = &v
}

// GetSupportsBatching returns the SupportsBatching field value if set, zero value otherwise.
func (o *ProcessorDefinition) GetSupportsBatching() bool {
	if o == nil || IsNil(o.SupportsBatching) {
		var ret bool
		return ret
	}
	return *o.SupportsBatching
}

// GetSupportsBatchingOk returns a tuple with the SupportsBatching field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessorDefinition) GetSupportsBatchingOk() (*bool, bool) {
	if o == nil || IsNil(o.SupportsBatching) {
		return nil, false
	}
	return o.SupportsBatching, true
}

// HasSupportsBatching returns a boolean if a field has been set.
func (o *ProcessorDefinition) HasSupportsBatching() bool {
	if o != nil && !IsNil(o.SupportsBatching) {
		return true
	}

	return false
}

// SetSupportsBatching gets a reference to the given bool and assigns it to the SupportsBatching field.
func (o *ProcessorDefinition) SetSupportsBatching(v bool) {
	o.SupportsBatching = &v
}

// GetSupportsEventDriven returns the SupportsEventDriven field value if set, zero value otherwise.
func (o *ProcessorDefinition) GetSupportsEventDriven() bool {
	if o == nil || IsNil(o.SupportsEventDriven) {
		var ret bool
		return ret
	}
	return *o.SupportsEventDriven
}

// GetSupportsEventDrivenOk returns a tuple with the SupportsEventDriven field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessorDefinition) GetSupportsEventDrivenOk() (*bool, bool) {
	if o == nil || IsNil(o.SupportsEventDriven) {
		return nil, false
	}
	return o.SupportsEventDriven, true
}

// HasSupportsEventDriven returns a boolean if a field has been set.
func (o *ProcessorDefinition) HasSupportsEventDriven() bool {
	if o != nil && !IsNil(o.SupportsEventDriven) {
		return true
	}

	return false
}

// SetSupportsEventDriven gets a reference to the given bool and assigns it to the SupportsEventDriven field.
func (o *ProcessorDefinition) SetSupportsEventDriven(v bool) {
	o.SupportsEventDriven = &v
}

// GetPrimaryNodeOnly returns the PrimaryNodeOnly field value if set, zero value otherwise.
func (o *ProcessorDefinition) GetPrimaryNodeOnly() bool {
	if o == nil || IsNil(o.PrimaryNodeOnly) {
		var ret bool
		return ret
	}
	return *o.PrimaryNodeOnly
}

// GetPrimaryNodeOnlyOk returns a tuple with the PrimaryNodeOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessorDefinition) GetPrimaryNodeOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.PrimaryNodeOnly) {
		return nil, false
	}
	return o.PrimaryNodeOnly, true
}

// HasPrimaryNodeOnly returns a boolean if a field has been set.
func (o *ProcessorDefinition) HasPrimaryNodeOnly() bool {
	if o != nil && !IsNil(o.PrimaryNodeOnly) {
		return true
	}

	return false
}

// SetPrimaryNodeOnly gets a reference to the given bool and assigns it to the PrimaryNodeOnly field.
func (o *ProcessorDefinition) SetPrimaryNodeOnly(v bool) {
	o.PrimaryNodeOnly = &v
}

// GetSideEffectFree returns the SideEffectFree field value if set, zero value otherwise.
func (o *ProcessorDefinition) GetSideEffectFree() bool {
	if o == nil || IsNil(o.SideEffectFree) {
		var ret bool
		return ret
	}
	return *o.SideEffectFree
}

// GetSideEffectFreeOk returns a tuple with the SideEffectFree field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessorDefinition) GetSideEffectFreeOk() (*bool, bool) {
	if o == nil || IsNil(o.SideEffectFree) {
		return nil, false
	}
	return o.SideEffectFree, true
}

// HasSideEffectFree returns a boolean if a field has been set.
func (o *ProcessorDefinition) HasSideEffectFree() bool {
	if o != nil && !IsNil(o.SideEffectFree) {
		return true
	}

	return false
}

// SetSideEffectFree gets a reference to the given bool and assigns it to the SideEffectFree field.
func (o *ProcessorDefinition) SetSideEffectFree(v bool) {
	o.SideEffectFree = &v
}

// GetSupportedSchedulingStrategies returns the SupportedSchedulingStrategies field value if set, zero value otherwise.
func (o *ProcessorDefinition) GetSupportedSchedulingStrategies() []string {
	if o == nil || IsNil(o.SupportedSchedulingStrategies) {
		var ret []string
		return ret
	}
	return o.SupportedSchedulingStrategies
}

// GetSupportedSchedulingStrategiesOk returns a tuple with the SupportedSchedulingStrategies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessorDefinition) GetSupportedSchedulingStrategiesOk() ([]string, bool) {
	if o == nil || IsNil(o.SupportedSchedulingStrategies) {
		return nil, false
	}
	return o.SupportedSchedulingStrategies, true
}

// HasSupportedSchedulingStrategies returns a boolean if a field has been set.
func (o *ProcessorDefinition) HasSupportedSchedulingStrategies() bool {
	if o != nil && !IsNil(o.SupportedSchedulingStrategies) {
		return true
	}

	return false
}

// SetSupportedSchedulingStrategies gets a reference to the given []string and assigns it to the SupportedSchedulingStrategies field.
func (o *ProcessorDefinition) SetSupportedSchedulingStrategies(v []string) {
	o.SupportedSchedulingStrategies = v
}

// GetDefaultSchedulingStrategy returns the DefaultSchedulingStrategy field value if set, zero value otherwise.
func (o *ProcessorDefinition) GetDefaultSchedulingStrategy() string {
	if o == nil || IsNil(o.DefaultSchedulingStrategy) {
		var ret string
		return ret
	}
	return *o.DefaultSchedulingStrategy
}

// GetDefaultSchedulingStrategyOk returns a tuple with the DefaultSchedulingStrategy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessorDefinition) GetDefaultSchedulingStrategyOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultSchedulingStrategy) {
		return nil, false
	}
	return o.DefaultSchedulingStrategy, true
}

// HasDefaultSchedulingStrategy returns a boolean if a field has been set.
func (o *ProcessorDefinition) HasDefaultSchedulingStrategy() bool {
	if o != nil && !IsNil(o.DefaultSchedulingStrategy) {
		return true
	}

	return false
}

// SetDefaultSchedulingStrategy gets a reference to the given string and assigns it to the DefaultSchedulingStrategy field.
func (o *ProcessorDefinition) SetDefaultSchedulingStrategy(v string) {
	o.DefaultSchedulingStrategy = &v
}

// GetDefaultConcurrentTasksBySchedulingStrategy returns the DefaultConcurrentTasksBySchedulingStrategy field value if set, zero value otherwise.
func (o *ProcessorDefinition) GetDefaultConcurrentTasksBySchedulingStrategy() map[string]int32 {
	if o == nil || IsNil(o.DefaultConcurrentTasksBySchedulingStrategy) {
		var ret map[string]int32
		return ret
	}
	return *o.DefaultConcurrentTasksBySchedulingStrategy
}

// GetDefaultConcurrentTasksBySchedulingStrategyOk returns a tuple with the DefaultConcurrentTasksBySchedulingStrategy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessorDefinition) GetDefaultConcurrentTasksBySchedulingStrategyOk() (*map[string]int32, bool) {
	if o == nil || IsNil(o.DefaultConcurrentTasksBySchedulingStrategy) {
		return nil, false
	}
	return o.DefaultConcurrentTasksBySchedulingStrategy, true
}

// HasDefaultConcurrentTasksBySchedulingStrategy returns a boolean if a field has been set.
func (o *ProcessorDefinition) HasDefaultConcurrentTasksBySchedulingStrategy() bool {
	if o != nil && !IsNil(o.DefaultConcurrentTasksBySchedulingStrategy) {
		return true
	}

	return false
}

// SetDefaultConcurrentTasksBySchedulingStrategy gets a reference to the given map[string]int32 and assigns it to the DefaultConcurrentTasksBySchedulingStrategy field.
func (o *ProcessorDefinition) SetDefaultConcurrentTasksBySchedulingStrategy(v map[string]int32) {
	o.DefaultConcurrentTasksBySchedulingStrategy = &v
}

// GetDefaultSchedulingPeriodBySchedulingStrategy returns the DefaultSchedulingPeriodBySchedulingStrategy field value if set, zero value otherwise.
func (o *ProcessorDefinition) GetDefaultSchedulingPeriodBySchedulingStrategy() map[string]string {
	if o == nil || IsNil(o.DefaultSchedulingPeriodBySchedulingStrategy) {
		var ret map[string]string
		return ret
	}
	return *o.DefaultSchedulingPeriodBySchedulingStrategy
}

// GetDefaultSchedulingPeriodBySchedulingStrategyOk returns a tuple with the DefaultSchedulingPeriodBySchedulingStrategy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessorDefinition) GetDefaultSchedulingPeriodBySchedulingStrategyOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.DefaultSchedulingPeriodBySchedulingStrategy) {
		return nil, false
	}
	return o.DefaultSchedulingPeriodBySchedulingStrategy, true
}

// HasDefaultSchedulingPeriodBySchedulingStrategy returns a boolean if a field has been set.
func (o *ProcessorDefinition) HasDefaultSchedulingPeriodBySchedulingStrategy() bool {
	if o != nil && !IsNil(o.DefaultSchedulingPeriodBySchedulingStrategy) {
		return true
	}

	return false
}

// SetDefaultSchedulingPeriodBySchedulingStrategy gets a reference to the given map[string]string and assigns it to the DefaultSchedulingPeriodBySchedulingStrategy field.
func (o *ProcessorDefinition) SetDefaultSchedulingPeriodBySchedulingStrategy(v map[string]string) {
	o.DefaultSchedulingPeriodBySchedulingStrategy = &v
}

// GetDefaultPenaltyDuration returns the DefaultPenaltyDuration field value if set, zero value otherwise.
func (o *ProcessorDefinition) GetDefaultPenaltyDuration() string {
	if o == nil || IsNil(o.DefaultPenaltyDuration) {
		var ret string
		return ret
	}
	return *o.DefaultPenaltyDuration
}

// GetDefaultPenaltyDurationOk returns a tuple with the DefaultPenaltyDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessorDefinition) GetDefaultPenaltyDurationOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultPenaltyDuration) {
		return nil, false
	}
	return o.DefaultPenaltyDuration, true
}

// HasDefaultPenaltyDuration returns a boolean if a field has been set.
func (o *ProcessorDefinition) HasDefaultPenaltyDuration() bool {
	if o != nil && !IsNil(o.DefaultPenaltyDuration) {
		return true
	}

	return false
}

// SetDefaultPenaltyDuration gets a reference to the given string and assigns it to the DefaultPenaltyDuration field.
func (o *ProcessorDefinition) SetDefaultPenaltyDuration(v string) {
	o.DefaultPenaltyDuration = &v
}

// GetDefaultYieldDuration returns the DefaultYieldDuration field value if set, zero value otherwise.
func (o *ProcessorDefinition) GetDefaultYieldDuration() string {
	if o == nil || IsNil(o.DefaultYieldDuration) {
		var ret string
		return ret
	}
	return *o.DefaultYieldDuration
}

// GetDefaultYieldDurationOk returns a tuple with the DefaultYieldDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessorDefinition) GetDefaultYieldDurationOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultYieldDuration) {
		return nil, false
	}
	return o.DefaultYieldDuration, true
}

// HasDefaultYieldDuration returns a boolean if a field has been set.
func (o *ProcessorDefinition) HasDefaultYieldDuration() bool {
	if o != nil && !IsNil(o.DefaultYieldDuration) {
		return true
	}

	return false
}

// SetDefaultYieldDuration gets a reference to the given string and assigns it to the DefaultYieldDuration field.
func (o *ProcessorDefinition) SetDefaultYieldDuration(v string) {
	o.DefaultYieldDuration = &v
}

// GetDefaultBulletinLevel returns the DefaultBulletinLevel field value if set, zero value otherwise.
func (o *ProcessorDefinition) GetDefaultBulletinLevel() string {
	if o == nil || IsNil(o.DefaultBulletinLevel) {
		var ret string
		return ret
	}
	return *o.DefaultBulletinLevel
}

// GetDefaultBulletinLevelOk returns a tuple with the DefaultBulletinLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessorDefinition) GetDefaultBulletinLevelOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultBulletinLevel) {
		return nil, false
	}
	return o.DefaultBulletinLevel, true
}

// HasDefaultBulletinLevel returns a boolean if a field has been set.
func (o *ProcessorDefinition) HasDefaultBulletinLevel() bool {
	if o != nil && !IsNil(o.DefaultBulletinLevel) {
		return true
	}

	return false
}

// SetDefaultBulletinLevel gets a reference to the given string and assigns it to the DefaultBulletinLevel field.
func (o *ProcessorDefinition) SetDefaultBulletinLevel(v string) {
	o.DefaultBulletinLevel = &v
}

// GetReadsAttributes returns the ReadsAttributes field value if set, zero value otherwise.
func (o *ProcessorDefinition) GetReadsAttributes() []Attribute {
	if o == nil || IsNil(o.ReadsAttributes) {
		var ret []Attribute
		return ret
	}
	return o.ReadsAttributes
}

// GetReadsAttributesOk returns a tuple with the ReadsAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessorDefinition) GetReadsAttributesOk() ([]Attribute, bool) {
	if o == nil || IsNil(o.ReadsAttributes) {
		return nil, false
	}
	return o.ReadsAttributes, true
}

// HasReadsAttributes returns a boolean if a field has been set.
func (o *ProcessorDefinition) HasReadsAttributes() bool {
	if o != nil && !IsNil(o.ReadsAttributes) {
		return true
	}

	return false
}

// SetReadsAttributes gets a reference to the given []Attribute and assigns it to the ReadsAttributes field.
func (o *ProcessorDefinition) SetReadsAttributes(v []Attribute) {
	o.ReadsAttributes = v
}

// GetWritesAttributes returns the WritesAttributes field value if set, zero value otherwise.
func (o *ProcessorDefinition) GetWritesAttributes() []Attribute {
	if o == nil || IsNil(o.WritesAttributes) {
		var ret []Attribute
		return ret
	}
	return o.WritesAttributes
}

// GetWritesAttributesOk returns a tuple with the WritesAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessorDefinition) GetWritesAttributesOk() ([]Attribute, bool) {
	if o == nil || IsNil(o.WritesAttributes) {
		return nil, false
	}
	return o.WritesAttributes, true
}

// HasWritesAttributes returns a boolean if a field has been set.
func (o *ProcessorDefinition) HasWritesAttributes() bool {
	if o != nil && !IsNil(o.WritesAttributes) {
		return true
	}

	return false
}

// SetWritesAttributes gets a reference to the given []Attribute and assigns it to the WritesAttributes field.
func (o *ProcessorDefinition) SetWritesAttributes(v []Attribute) {
	o.WritesAttributes = v
}

func (o ProcessorDefinition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProcessorDefinition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Group) {
		toSerialize["group"] = o.Group
	}
	if !IsNil(o.Artifact) {
		toSerialize["artifact"] = o.Artifact
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	toSerialize["type"] = o.Type
	if !IsNil(o.TypeDescription) {
		toSerialize["typeDescription"] = o.TypeDescription
	}
	if !IsNil(o.BuildInfo) {
		toSerialize["buildInfo"] = o.BuildInfo
	}
	if !IsNil(o.ProvidedApiImplementations) {
		toSerialize["providedApiImplementations"] = o.ProvidedApiImplementations
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.SeeAlso) {
		toSerialize["seeAlso"] = o.SeeAlso
	}
	if !IsNil(o.Deprecated) {
		toSerialize["deprecated"] = o.Deprecated
	}
	if !IsNil(o.DeprecationReason) {
		toSerialize["deprecationReason"] = o.DeprecationReason
	}
	if !IsNil(o.DeprecationAlternatives) {
		toSerialize["deprecationAlternatives"] = o.DeprecationAlternatives
	}
	if !IsNil(o.Restricted) {
		toSerialize["restricted"] = o.Restricted
	}
	if !IsNil(o.RestrictedExplanation) {
		toSerialize["restrictedExplanation"] = o.RestrictedExplanation
	}
	if !IsNil(o.ExplicitRestrictions) {
		toSerialize["explicitRestrictions"] = o.ExplicitRestrictions
	}
	if !IsNil(o.Stateful) {
		toSerialize["stateful"] = o.Stateful
	}
	if !IsNil(o.SystemResourceConsiderations) {
		toSerialize["systemResourceConsiderations"] = o.SystemResourceConsiderations
	}
	if !IsNil(o.AdditionalDetails) {
		toSerialize["additionalDetails"] = o.AdditionalDetails
	}
	if !IsNil(o.PropertyDescriptors) {
		toSerialize["propertyDescriptors"] = o.PropertyDescriptors
	}
	if !IsNil(o.SupportsDynamicProperties) {
		toSerialize["supportsDynamicProperties"] = o.SupportsDynamicProperties
	}
	if !IsNil(o.DynamicProperties) {
		toSerialize["dynamicProperties"] = o.DynamicProperties
	}
	if !IsNil(o.InputRequirement) {
		toSerialize["inputRequirement"] = o.InputRequirement
	}
	if !IsNil(o.SupportedRelationships) {
		toSerialize["supportedRelationships"] = o.SupportedRelationships
	}
	if !IsNil(o.SupportsDynamicRelationships) {
		toSerialize["supportsDynamicRelationships"] = o.SupportsDynamicRelationships
	}
	if !IsNil(o.DynamicRelationship) {
		toSerialize["dynamicRelationship"] = o.DynamicRelationship
	}
	if !IsNil(o.TriggerSerially) {
		toSerialize["triggerSerially"] = o.TriggerSerially
	}
	if !IsNil(o.TriggerWhenEmpty) {
		toSerialize["triggerWhenEmpty"] = o.TriggerWhenEmpty
	}
	if !IsNil(o.TriggerWhenAnyDestinationAvailable) {
		toSerialize["triggerWhenAnyDestinationAvailable"] = o.TriggerWhenAnyDestinationAvailable
	}
	if !IsNil(o.SupportsBatching) {
		toSerialize["supportsBatching"] = o.SupportsBatching
	}
	if !IsNil(o.SupportsEventDriven) {
		toSerialize["supportsEventDriven"] = o.SupportsEventDriven
	}
	if !IsNil(o.PrimaryNodeOnly) {
		toSerialize["primaryNodeOnly"] = o.PrimaryNodeOnly
	}
	if !IsNil(o.SideEffectFree) {
		toSerialize["sideEffectFree"] = o.SideEffectFree
	}
	if !IsNil(o.SupportedSchedulingStrategies) {
		toSerialize["supportedSchedulingStrategies"] = o.SupportedSchedulingStrategies
	}
	if !IsNil(o.DefaultSchedulingStrategy) {
		toSerialize["defaultSchedulingStrategy"] = o.DefaultSchedulingStrategy
	}
	if !IsNil(o.DefaultConcurrentTasksBySchedulingStrategy) {
		toSerialize["defaultConcurrentTasksBySchedulingStrategy"] = o.DefaultConcurrentTasksBySchedulingStrategy
	}
	if !IsNil(o.DefaultSchedulingPeriodBySchedulingStrategy) {
		toSerialize["defaultSchedulingPeriodBySchedulingStrategy"] = o.DefaultSchedulingPeriodBySchedulingStrategy
	}
	if !IsNil(o.DefaultPenaltyDuration) {
		toSerialize["defaultPenaltyDuration"] = o.DefaultPenaltyDuration
	}
	if !IsNil(o.DefaultYieldDuration) {
		toSerialize["defaultYieldDuration"] = o.DefaultYieldDuration
	}
	if !IsNil(o.DefaultBulletinLevel) {
		toSerialize["defaultBulletinLevel"] = o.DefaultBulletinLevel
	}
	if !IsNil(o.ReadsAttributes) {
		toSerialize["readsAttributes"] = o.ReadsAttributes
	}
	if !IsNil(o.WritesAttributes) {
		toSerialize["writesAttributes"] = o.WritesAttributes
	}
	return toSerialize, nil
}

type NullableProcessorDefinition struct {
	value *ProcessorDefinition
	isSet bool
}

func (v NullableProcessorDefinition) Get() *ProcessorDefinition {
	return v.value
}

func (v *NullableProcessorDefinition) Set(val *ProcessorDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableProcessorDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableProcessorDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProcessorDefinition(val *ProcessorDefinition) *NullableProcessorDefinition {
	return &NullableProcessorDefinition{value: val, isSet: true}
}

func (v NullableProcessorDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProcessorDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


