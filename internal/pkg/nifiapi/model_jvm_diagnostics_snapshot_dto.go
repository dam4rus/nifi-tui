/*
NiFi Rest API

The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.

API version: 2.0.0
Contact: dev@nifi.apache.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nifiapi

import (
	"encoding/json"
)

// checks if the JVMDiagnosticsSnapshotDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JVMDiagnosticsSnapshotDTO{}

// JVMDiagnosticsSnapshotDTO struct for JVMDiagnosticsSnapshotDTO
type JVMDiagnosticsSnapshotDTO struct {
	SystemDiagnosticsDto *JVMSystemDiagnosticsSnapshotDTO `json:"systemDiagnosticsDto,omitempty"`
	FlowDiagnosticsDto *JVMFlowDiagnosticsSnapshotDTO `json:"flowDiagnosticsDto,omitempty"`
	ControllerDiagnostics *JVMControllerDiagnosticsSnapshotDTO `json:"controllerDiagnostics,omitempty"`
}

// NewJVMDiagnosticsSnapshotDTO instantiates a new JVMDiagnosticsSnapshotDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJVMDiagnosticsSnapshotDTO() *JVMDiagnosticsSnapshotDTO {
	this := JVMDiagnosticsSnapshotDTO{}
	return &this
}

// NewJVMDiagnosticsSnapshotDTOWithDefaults instantiates a new JVMDiagnosticsSnapshotDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJVMDiagnosticsSnapshotDTOWithDefaults() *JVMDiagnosticsSnapshotDTO {
	this := JVMDiagnosticsSnapshotDTO{}
	return &this
}

// GetSystemDiagnosticsDto returns the SystemDiagnosticsDto field value if set, zero value otherwise.
func (o *JVMDiagnosticsSnapshotDTO) GetSystemDiagnosticsDto() JVMSystemDiagnosticsSnapshotDTO {
	if o == nil || IsNil(o.SystemDiagnosticsDto) {
		var ret JVMSystemDiagnosticsSnapshotDTO
		return ret
	}
	return *o.SystemDiagnosticsDto
}

// GetSystemDiagnosticsDtoOk returns a tuple with the SystemDiagnosticsDto field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JVMDiagnosticsSnapshotDTO) GetSystemDiagnosticsDtoOk() (*JVMSystemDiagnosticsSnapshotDTO, bool) {
	if o == nil || IsNil(o.SystemDiagnosticsDto) {
		return nil, false
	}
	return o.SystemDiagnosticsDto, true
}

// HasSystemDiagnosticsDto returns a boolean if a field has been set.
func (o *JVMDiagnosticsSnapshotDTO) HasSystemDiagnosticsDto() bool {
	if o != nil && !IsNil(o.SystemDiagnosticsDto) {
		return true
	}

	return false
}

// SetSystemDiagnosticsDto gets a reference to the given JVMSystemDiagnosticsSnapshotDTO and assigns it to the SystemDiagnosticsDto field.
func (o *JVMDiagnosticsSnapshotDTO) SetSystemDiagnosticsDto(v JVMSystemDiagnosticsSnapshotDTO) {
	o.SystemDiagnosticsDto = &v
}

// GetFlowDiagnosticsDto returns the FlowDiagnosticsDto field value if set, zero value otherwise.
func (o *JVMDiagnosticsSnapshotDTO) GetFlowDiagnosticsDto() JVMFlowDiagnosticsSnapshotDTO {
	if o == nil || IsNil(o.FlowDiagnosticsDto) {
		var ret JVMFlowDiagnosticsSnapshotDTO
		return ret
	}
	return *o.FlowDiagnosticsDto
}

// GetFlowDiagnosticsDtoOk returns a tuple with the FlowDiagnosticsDto field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JVMDiagnosticsSnapshotDTO) GetFlowDiagnosticsDtoOk() (*JVMFlowDiagnosticsSnapshotDTO, bool) {
	if o == nil || IsNil(o.FlowDiagnosticsDto) {
		return nil, false
	}
	return o.FlowDiagnosticsDto, true
}

// HasFlowDiagnosticsDto returns a boolean if a field has been set.
func (o *JVMDiagnosticsSnapshotDTO) HasFlowDiagnosticsDto() bool {
	if o != nil && !IsNil(o.FlowDiagnosticsDto) {
		return true
	}

	return false
}

// SetFlowDiagnosticsDto gets a reference to the given JVMFlowDiagnosticsSnapshotDTO and assigns it to the FlowDiagnosticsDto field.
func (o *JVMDiagnosticsSnapshotDTO) SetFlowDiagnosticsDto(v JVMFlowDiagnosticsSnapshotDTO) {
	o.FlowDiagnosticsDto = &v
}

// GetControllerDiagnostics returns the ControllerDiagnostics field value if set, zero value otherwise.
func (o *JVMDiagnosticsSnapshotDTO) GetControllerDiagnostics() JVMControllerDiagnosticsSnapshotDTO {
	if o == nil || IsNil(o.ControllerDiagnostics) {
		var ret JVMControllerDiagnosticsSnapshotDTO
		return ret
	}
	return *o.ControllerDiagnostics
}

// GetControllerDiagnosticsOk returns a tuple with the ControllerDiagnostics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JVMDiagnosticsSnapshotDTO) GetControllerDiagnosticsOk() (*JVMControllerDiagnosticsSnapshotDTO, bool) {
	if o == nil || IsNil(o.ControllerDiagnostics) {
		return nil, false
	}
	return o.ControllerDiagnostics, true
}

// HasControllerDiagnostics returns a boolean if a field has been set.
func (o *JVMDiagnosticsSnapshotDTO) HasControllerDiagnostics() bool {
	if o != nil && !IsNil(o.ControllerDiagnostics) {
		return true
	}

	return false
}

// SetControllerDiagnostics gets a reference to the given JVMControllerDiagnosticsSnapshotDTO and assigns it to the ControllerDiagnostics field.
func (o *JVMDiagnosticsSnapshotDTO) SetControllerDiagnostics(v JVMControllerDiagnosticsSnapshotDTO) {
	o.ControllerDiagnostics = &v
}

func (o JVMDiagnosticsSnapshotDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JVMDiagnosticsSnapshotDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SystemDiagnosticsDto) {
		toSerialize["systemDiagnosticsDto"] = o.SystemDiagnosticsDto
	}
	if !IsNil(o.FlowDiagnosticsDto) {
		toSerialize["flowDiagnosticsDto"] = o.FlowDiagnosticsDto
	}
	if !IsNil(o.ControllerDiagnostics) {
		toSerialize["controllerDiagnostics"] = o.ControllerDiagnostics
	}
	return toSerialize, nil
}

type NullableJVMDiagnosticsSnapshotDTO struct {
	value *JVMDiagnosticsSnapshotDTO
	isSet bool
}

func (v NullableJVMDiagnosticsSnapshotDTO) Get() *JVMDiagnosticsSnapshotDTO {
	return v.value
}

func (v *NullableJVMDiagnosticsSnapshotDTO) Set(val *JVMDiagnosticsSnapshotDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableJVMDiagnosticsSnapshotDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableJVMDiagnosticsSnapshotDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJVMDiagnosticsSnapshotDTO(val *JVMDiagnosticsSnapshotDTO) *NullableJVMDiagnosticsSnapshotDTO {
	return &NullableJVMDiagnosticsSnapshotDTO{value: val, isSet: true}
}

func (v NullableJVMDiagnosticsSnapshotDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJVMDiagnosticsSnapshotDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


