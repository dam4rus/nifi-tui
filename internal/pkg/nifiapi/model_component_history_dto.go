/*
NiFi Rest API

The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.

API version: 2.0.0
Contact: dev@nifi.apache.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nifiapi

import (
	"encoding/json"
)

// checks if the ComponentHistoryDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ComponentHistoryDTO{}

// ComponentHistoryDTO struct for ComponentHistoryDTO
type ComponentHistoryDTO struct {
	// The component id.
	ComponentId *string `json:"componentId,omitempty"`
	// The history for the properties of the component.
	PropertyHistory *map[string]PropertyHistoryDTO `json:"propertyHistory,omitempty"`
}

// NewComponentHistoryDTO instantiates a new ComponentHistoryDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComponentHistoryDTO() *ComponentHistoryDTO {
	this := ComponentHistoryDTO{}
	return &this
}

// NewComponentHistoryDTOWithDefaults instantiates a new ComponentHistoryDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewComponentHistoryDTOWithDefaults() *ComponentHistoryDTO {
	this := ComponentHistoryDTO{}
	return &this
}

// GetComponentId returns the ComponentId field value if set, zero value otherwise.
func (o *ComponentHistoryDTO) GetComponentId() string {
	if o == nil || IsNil(o.ComponentId) {
		var ret string
		return ret
	}
	return *o.ComponentId
}

// GetComponentIdOk returns a tuple with the ComponentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentHistoryDTO) GetComponentIdOk() (*string, bool) {
	if o == nil || IsNil(o.ComponentId) {
		return nil, false
	}
	return o.ComponentId, true
}

// HasComponentId returns a boolean if a field has been set.
func (o *ComponentHistoryDTO) HasComponentId() bool {
	if o != nil && !IsNil(o.ComponentId) {
		return true
	}

	return false
}

// SetComponentId gets a reference to the given string and assigns it to the ComponentId field.
func (o *ComponentHistoryDTO) SetComponentId(v string) {
	o.ComponentId = &v
}

// GetPropertyHistory returns the PropertyHistory field value if set, zero value otherwise.
func (o *ComponentHistoryDTO) GetPropertyHistory() map[string]PropertyHistoryDTO {
	if o == nil || IsNil(o.PropertyHistory) {
		var ret map[string]PropertyHistoryDTO
		return ret
	}
	return *o.PropertyHistory
}

// GetPropertyHistoryOk returns a tuple with the PropertyHistory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentHistoryDTO) GetPropertyHistoryOk() (*map[string]PropertyHistoryDTO, bool) {
	if o == nil || IsNil(o.PropertyHistory) {
		return nil, false
	}
	return o.PropertyHistory, true
}

// HasPropertyHistory returns a boolean if a field has been set.
func (o *ComponentHistoryDTO) HasPropertyHistory() bool {
	if o != nil && !IsNil(o.PropertyHistory) {
		return true
	}

	return false
}

// SetPropertyHistory gets a reference to the given map[string]PropertyHistoryDTO and assigns it to the PropertyHistory field.
func (o *ComponentHistoryDTO) SetPropertyHistory(v map[string]PropertyHistoryDTO) {
	o.PropertyHistory = &v
}

func (o ComponentHistoryDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ComponentHistoryDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ComponentId) {
		toSerialize["componentId"] = o.ComponentId
	}
	if !IsNil(o.PropertyHistory) {
		toSerialize["propertyHistory"] = o.PropertyHistory
	}
	return toSerialize, nil
}

type NullableComponentHistoryDTO struct {
	value *ComponentHistoryDTO
	isSet bool
}

func (v NullableComponentHistoryDTO) Get() *ComponentHistoryDTO {
	return v.value
}

func (v *NullableComponentHistoryDTO) Set(val *ComponentHistoryDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableComponentHistoryDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableComponentHistoryDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComponentHistoryDTO(val *ComponentHistoryDTO) *NullableComponentHistoryDTO {
	return &NullableComponentHistoryDTO{value: val, isSet: true}
}

func (v NullableComponentHistoryDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComponentHistoryDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


