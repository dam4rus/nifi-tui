/*
NiFi Rest API

The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.

API version: 2.0.0
Contact: dev@nifi.apache.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nifiapi

import (
	"encoding/json"
)

// checks if the VersionedPropertyDescriptor type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VersionedPropertyDescriptor{}

// VersionedPropertyDescriptor struct for VersionedPropertyDescriptor
type VersionedPropertyDescriptor struct {
	// The name of the property
	Name *string `json:"name,omitempty"`
	// The display name of the property
	DisplayName *string `json:"displayName,omitempty"`
	// Whether or not the property provides the identifier of a Controller Service
	IdentifiesControllerService *bool `json:"identifiesControllerService,omitempty"`
	// Whether or not the property is considered sensitive
	Sensitive *bool `json:"sensitive,omitempty"`
	ResourceDefinition *VersionedResourceDefinition `json:"resourceDefinition,omitempty"`
}

// NewVersionedPropertyDescriptor instantiates a new VersionedPropertyDescriptor object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVersionedPropertyDescriptor() *VersionedPropertyDescriptor {
	this := VersionedPropertyDescriptor{}
	return &this
}

// NewVersionedPropertyDescriptorWithDefaults instantiates a new VersionedPropertyDescriptor object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVersionedPropertyDescriptorWithDefaults() *VersionedPropertyDescriptor {
	this := VersionedPropertyDescriptor{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *VersionedPropertyDescriptor) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionedPropertyDescriptor) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *VersionedPropertyDescriptor) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *VersionedPropertyDescriptor) SetName(v string) {
	o.Name = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *VersionedPropertyDescriptor) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionedPropertyDescriptor) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *VersionedPropertyDescriptor) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *VersionedPropertyDescriptor) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetIdentifiesControllerService returns the IdentifiesControllerService field value if set, zero value otherwise.
func (o *VersionedPropertyDescriptor) GetIdentifiesControllerService() bool {
	if o == nil || IsNil(o.IdentifiesControllerService) {
		var ret bool
		return ret
	}
	return *o.IdentifiesControllerService
}

// GetIdentifiesControllerServiceOk returns a tuple with the IdentifiesControllerService field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionedPropertyDescriptor) GetIdentifiesControllerServiceOk() (*bool, bool) {
	if o == nil || IsNil(o.IdentifiesControllerService) {
		return nil, false
	}
	return o.IdentifiesControllerService, true
}

// HasIdentifiesControllerService returns a boolean if a field has been set.
func (o *VersionedPropertyDescriptor) HasIdentifiesControllerService() bool {
	if o != nil && !IsNil(o.IdentifiesControllerService) {
		return true
	}

	return false
}

// SetIdentifiesControllerService gets a reference to the given bool and assigns it to the IdentifiesControllerService field.
func (o *VersionedPropertyDescriptor) SetIdentifiesControllerService(v bool) {
	o.IdentifiesControllerService = &v
}

// GetSensitive returns the Sensitive field value if set, zero value otherwise.
func (o *VersionedPropertyDescriptor) GetSensitive() bool {
	if o == nil || IsNil(o.Sensitive) {
		var ret bool
		return ret
	}
	return *o.Sensitive
}

// GetSensitiveOk returns a tuple with the Sensitive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionedPropertyDescriptor) GetSensitiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Sensitive) {
		return nil, false
	}
	return o.Sensitive, true
}

// HasSensitive returns a boolean if a field has been set.
func (o *VersionedPropertyDescriptor) HasSensitive() bool {
	if o != nil && !IsNil(o.Sensitive) {
		return true
	}

	return false
}

// SetSensitive gets a reference to the given bool and assigns it to the Sensitive field.
func (o *VersionedPropertyDescriptor) SetSensitive(v bool) {
	o.Sensitive = &v
}

// GetResourceDefinition returns the ResourceDefinition field value if set, zero value otherwise.
func (o *VersionedPropertyDescriptor) GetResourceDefinition() VersionedResourceDefinition {
	if o == nil || IsNil(o.ResourceDefinition) {
		var ret VersionedResourceDefinition
		return ret
	}
	return *o.ResourceDefinition
}

// GetResourceDefinitionOk returns a tuple with the ResourceDefinition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionedPropertyDescriptor) GetResourceDefinitionOk() (*VersionedResourceDefinition, bool) {
	if o == nil || IsNil(o.ResourceDefinition) {
		return nil, false
	}
	return o.ResourceDefinition, true
}

// HasResourceDefinition returns a boolean if a field has been set.
func (o *VersionedPropertyDescriptor) HasResourceDefinition() bool {
	if o != nil && !IsNil(o.ResourceDefinition) {
		return true
	}

	return false
}

// SetResourceDefinition gets a reference to the given VersionedResourceDefinition and assigns it to the ResourceDefinition field.
func (o *VersionedPropertyDescriptor) SetResourceDefinition(v VersionedResourceDefinition) {
	o.ResourceDefinition = &v
}

func (o VersionedPropertyDescriptor) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VersionedPropertyDescriptor) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.IdentifiesControllerService) {
		toSerialize["identifiesControllerService"] = o.IdentifiesControllerService
	}
	if !IsNil(o.Sensitive) {
		toSerialize["sensitive"] = o.Sensitive
	}
	if !IsNil(o.ResourceDefinition) {
		toSerialize["resourceDefinition"] = o.ResourceDefinition
	}
	return toSerialize, nil
}

type NullableVersionedPropertyDescriptor struct {
	value *VersionedPropertyDescriptor
	isSet bool
}

func (v NullableVersionedPropertyDescriptor) Get() *VersionedPropertyDescriptor {
	return v.value
}

func (v *NullableVersionedPropertyDescriptor) Set(val *VersionedPropertyDescriptor) {
	v.value = val
	v.isSet = true
}

func (v NullableVersionedPropertyDescriptor) IsSet() bool {
	return v.isSet
}

func (v *NullableVersionedPropertyDescriptor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVersionedPropertyDescriptor(val *VersionedPropertyDescriptor) *NullableVersionedPropertyDescriptor {
	return &NullableVersionedPropertyDescriptor{value: val, isSet: true}
}

func (v NullableVersionedPropertyDescriptor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVersionedPropertyDescriptor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


