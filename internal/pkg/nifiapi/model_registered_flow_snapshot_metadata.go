/*
NiFi Rest API

The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.

API version: 2.0.0
Contact: dev@nifi.apache.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nifiapi

import (
	"encoding/json"
)

// checks if the RegisteredFlowSnapshotMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RegisteredFlowSnapshotMetadata{}

// RegisteredFlowSnapshotMetadata struct for RegisteredFlowSnapshotMetadata
type RegisteredFlowSnapshotMetadata struct {
	BucketIdentifier *string `json:"bucketIdentifier,omitempty"`
	FlowIdentifier *string `json:"flowIdentifier,omitempty"`
	Version *int32 `json:"version,omitempty"`
	Timestamp *int64 `json:"timestamp,omitempty"`
	Author *string `json:"author,omitempty"`
	Comments *string `json:"comments,omitempty"`
}

// NewRegisteredFlowSnapshotMetadata instantiates a new RegisteredFlowSnapshotMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegisteredFlowSnapshotMetadata() *RegisteredFlowSnapshotMetadata {
	this := RegisteredFlowSnapshotMetadata{}
	return &this
}

// NewRegisteredFlowSnapshotMetadataWithDefaults instantiates a new RegisteredFlowSnapshotMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegisteredFlowSnapshotMetadataWithDefaults() *RegisteredFlowSnapshotMetadata {
	this := RegisteredFlowSnapshotMetadata{}
	return &this
}

// GetBucketIdentifier returns the BucketIdentifier field value if set, zero value otherwise.
func (o *RegisteredFlowSnapshotMetadata) GetBucketIdentifier() string {
	if o == nil || IsNil(o.BucketIdentifier) {
		var ret string
		return ret
	}
	return *o.BucketIdentifier
}

// GetBucketIdentifierOk returns a tuple with the BucketIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisteredFlowSnapshotMetadata) GetBucketIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.BucketIdentifier) {
		return nil, false
	}
	return o.BucketIdentifier, true
}

// HasBucketIdentifier returns a boolean if a field has been set.
func (o *RegisteredFlowSnapshotMetadata) HasBucketIdentifier() bool {
	if o != nil && !IsNil(o.BucketIdentifier) {
		return true
	}

	return false
}

// SetBucketIdentifier gets a reference to the given string and assigns it to the BucketIdentifier field.
func (o *RegisteredFlowSnapshotMetadata) SetBucketIdentifier(v string) {
	o.BucketIdentifier = &v
}

// GetFlowIdentifier returns the FlowIdentifier field value if set, zero value otherwise.
func (o *RegisteredFlowSnapshotMetadata) GetFlowIdentifier() string {
	if o == nil || IsNil(o.FlowIdentifier) {
		var ret string
		return ret
	}
	return *o.FlowIdentifier
}

// GetFlowIdentifierOk returns a tuple with the FlowIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisteredFlowSnapshotMetadata) GetFlowIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.FlowIdentifier) {
		return nil, false
	}
	return o.FlowIdentifier, true
}

// HasFlowIdentifier returns a boolean if a field has been set.
func (o *RegisteredFlowSnapshotMetadata) HasFlowIdentifier() bool {
	if o != nil && !IsNil(o.FlowIdentifier) {
		return true
	}

	return false
}

// SetFlowIdentifier gets a reference to the given string and assigns it to the FlowIdentifier field.
func (o *RegisteredFlowSnapshotMetadata) SetFlowIdentifier(v string) {
	o.FlowIdentifier = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *RegisteredFlowSnapshotMetadata) GetVersion() int32 {
	if o == nil || IsNil(o.Version) {
		var ret int32
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisteredFlowSnapshotMetadata) GetVersionOk() (*int32, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *RegisteredFlowSnapshotMetadata) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int32 and assigns it to the Version field.
func (o *RegisteredFlowSnapshotMetadata) SetVersion(v int32) {
	o.Version = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *RegisteredFlowSnapshotMetadata) GetTimestamp() int64 {
	if o == nil || IsNil(o.Timestamp) {
		var ret int64
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisteredFlowSnapshotMetadata) GetTimestampOk() (*int64, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *RegisteredFlowSnapshotMetadata) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given int64 and assigns it to the Timestamp field.
func (o *RegisteredFlowSnapshotMetadata) SetTimestamp(v int64) {
	o.Timestamp = &v
}

// GetAuthor returns the Author field value if set, zero value otherwise.
func (o *RegisteredFlowSnapshotMetadata) GetAuthor() string {
	if o == nil || IsNil(o.Author) {
		var ret string
		return ret
	}
	return *o.Author
}

// GetAuthorOk returns a tuple with the Author field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisteredFlowSnapshotMetadata) GetAuthorOk() (*string, bool) {
	if o == nil || IsNil(o.Author) {
		return nil, false
	}
	return o.Author, true
}

// HasAuthor returns a boolean if a field has been set.
func (o *RegisteredFlowSnapshotMetadata) HasAuthor() bool {
	if o != nil && !IsNil(o.Author) {
		return true
	}

	return false
}

// SetAuthor gets a reference to the given string and assigns it to the Author field.
func (o *RegisteredFlowSnapshotMetadata) SetAuthor(v string) {
	o.Author = &v
}

// GetComments returns the Comments field value if set, zero value otherwise.
func (o *RegisteredFlowSnapshotMetadata) GetComments() string {
	if o == nil || IsNil(o.Comments) {
		var ret string
		return ret
	}
	return *o.Comments
}

// GetCommentsOk returns a tuple with the Comments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisteredFlowSnapshotMetadata) GetCommentsOk() (*string, bool) {
	if o == nil || IsNil(o.Comments) {
		return nil, false
	}
	return o.Comments, true
}

// HasComments returns a boolean if a field has been set.
func (o *RegisteredFlowSnapshotMetadata) HasComments() bool {
	if o != nil && !IsNil(o.Comments) {
		return true
	}

	return false
}

// SetComments gets a reference to the given string and assigns it to the Comments field.
func (o *RegisteredFlowSnapshotMetadata) SetComments(v string) {
	o.Comments = &v
}

func (o RegisteredFlowSnapshotMetadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RegisteredFlowSnapshotMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BucketIdentifier) {
		toSerialize["bucketIdentifier"] = o.BucketIdentifier
	}
	if !IsNil(o.FlowIdentifier) {
		toSerialize["flowIdentifier"] = o.FlowIdentifier
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	if !IsNil(o.Author) {
		toSerialize["author"] = o.Author
	}
	if !IsNil(o.Comments) {
		toSerialize["comments"] = o.Comments
	}
	return toSerialize, nil
}

type NullableRegisteredFlowSnapshotMetadata struct {
	value *RegisteredFlowSnapshotMetadata
	isSet bool
}

func (v NullableRegisteredFlowSnapshotMetadata) Get() *RegisteredFlowSnapshotMetadata {
	return v.value
}

func (v *NullableRegisteredFlowSnapshotMetadata) Set(val *RegisteredFlowSnapshotMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableRegisteredFlowSnapshotMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableRegisteredFlowSnapshotMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegisteredFlowSnapshotMetadata(val *RegisteredFlowSnapshotMetadata) *NullableRegisteredFlowSnapshotMetadata {
	return &NullableRegisteredFlowSnapshotMetadata{value: val, isSet: true}
}

func (v NullableRegisteredFlowSnapshotMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegisteredFlowSnapshotMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


