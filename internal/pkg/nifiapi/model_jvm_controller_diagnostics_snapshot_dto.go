/*
NiFi Rest API

The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.

API version: 2.0.0
Contact: dev@nifi.apache.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nifiapi

import (
	"encoding/json"
)

// checks if the JVMControllerDiagnosticsSnapshotDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JVMControllerDiagnosticsSnapshotDTO{}

// JVMControllerDiagnosticsSnapshotDTO struct for JVMControllerDiagnosticsSnapshotDTO
type JVMControllerDiagnosticsSnapshotDTO struct {
	// Whether or not this node is primary node
	PrimaryNode *bool `json:"primaryNode,omitempty"`
	// Whether or not this node is cluster coordinator
	ClusterCoordinator *bool `json:"clusterCoordinator,omitempty"`
	// The maximum number of timer-driven threads
	MaxTimerDrivenThreads *int32 `json:"maxTimerDrivenThreads,omitempty"`
	// The maximum number of event-driven threads
	MaxEventDrivenThreads *int32 `json:"maxEventDrivenThreads,omitempty"`
}

// NewJVMControllerDiagnosticsSnapshotDTO instantiates a new JVMControllerDiagnosticsSnapshotDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJVMControllerDiagnosticsSnapshotDTO() *JVMControllerDiagnosticsSnapshotDTO {
	this := JVMControllerDiagnosticsSnapshotDTO{}
	return &this
}

// NewJVMControllerDiagnosticsSnapshotDTOWithDefaults instantiates a new JVMControllerDiagnosticsSnapshotDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJVMControllerDiagnosticsSnapshotDTOWithDefaults() *JVMControllerDiagnosticsSnapshotDTO {
	this := JVMControllerDiagnosticsSnapshotDTO{}
	return &this
}

// GetPrimaryNode returns the PrimaryNode field value if set, zero value otherwise.
func (o *JVMControllerDiagnosticsSnapshotDTO) GetPrimaryNode() bool {
	if o == nil || IsNil(o.PrimaryNode) {
		var ret bool
		return ret
	}
	return *o.PrimaryNode
}

// GetPrimaryNodeOk returns a tuple with the PrimaryNode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JVMControllerDiagnosticsSnapshotDTO) GetPrimaryNodeOk() (*bool, bool) {
	if o == nil || IsNil(o.PrimaryNode) {
		return nil, false
	}
	return o.PrimaryNode, true
}

// HasPrimaryNode returns a boolean if a field has been set.
func (o *JVMControllerDiagnosticsSnapshotDTO) HasPrimaryNode() bool {
	if o != nil && !IsNil(o.PrimaryNode) {
		return true
	}

	return false
}

// SetPrimaryNode gets a reference to the given bool and assigns it to the PrimaryNode field.
func (o *JVMControllerDiagnosticsSnapshotDTO) SetPrimaryNode(v bool) {
	o.PrimaryNode = &v
}

// GetClusterCoordinator returns the ClusterCoordinator field value if set, zero value otherwise.
func (o *JVMControllerDiagnosticsSnapshotDTO) GetClusterCoordinator() bool {
	if o == nil || IsNil(o.ClusterCoordinator) {
		var ret bool
		return ret
	}
	return *o.ClusterCoordinator
}

// GetClusterCoordinatorOk returns a tuple with the ClusterCoordinator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JVMControllerDiagnosticsSnapshotDTO) GetClusterCoordinatorOk() (*bool, bool) {
	if o == nil || IsNil(o.ClusterCoordinator) {
		return nil, false
	}
	return o.ClusterCoordinator, true
}

// HasClusterCoordinator returns a boolean if a field has been set.
func (o *JVMControllerDiagnosticsSnapshotDTO) HasClusterCoordinator() bool {
	if o != nil && !IsNil(o.ClusterCoordinator) {
		return true
	}

	return false
}

// SetClusterCoordinator gets a reference to the given bool and assigns it to the ClusterCoordinator field.
func (o *JVMControllerDiagnosticsSnapshotDTO) SetClusterCoordinator(v bool) {
	o.ClusterCoordinator = &v
}

// GetMaxTimerDrivenThreads returns the MaxTimerDrivenThreads field value if set, zero value otherwise.
func (o *JVMControllerDiagnosticsSnapshotDTO) GetMaxTimerDrivenThreads() int32 {
	if o == nil || IsNil(o.MaxTimerDrivenThreads) {
		var ret int32
		return ret
	}
	return *o.MaxTimerDrivenThreads
}

// GetMaxTimerDrivenThreadsOk returns a tuple with the MaxTimerDrivenThreads field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JVMControllerDiagnosticsSnapshotDTO) GetMaxTimerDrivenThreadsOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxTimerDrivenThreads) {
		return nil, false
	}
	return o.MaxTimerDrivenThreads, true
}

// HasMaxTimerDrivenThreads returns a boolean if a field has been set.
func (o *JVMControllerDiagnosticsSnapshotDTO) HasMaxTimerDrivenThreads() bool {
	if o != nil && !IsNil(o.MaxTimerDrivenThreads) {
		return true
	}

	return false
}

// SetMaxTimerDrivenThreads gets a reference to the given int32 and assigns it to the MaxTimerDrivenThreads field.
func (o *JVMControllerDiagnosticsSnapshotDTO) SetMaxTimerDrivenThreads(v int32) {
	o.MaxTimerDrivenThreads = &v
}

// GetMaxEventDrivenThreads returns the MaxEventDrivenThreads field value if set, zero value otherwise.
func (o *JVMControllerDiagnosticsSnapshotDTO) GetMaxEventDrivenThreads() int32 {
	if o == nil || IsNil(o.MaxEventDrivenThreads) {
		var ret int32
		return ret
	}
	return *o.MaxEventDrivenThreads
}

// GetMaxEventDrivenThreadsOk returns a tuple with the MaxEventDrivenThreads field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JVMControllerDiagnosticsSnapshotDTO) GetMaxEventDrivenThreadsOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxEventDrivenThreads) {
		return nil, false
	}
	return o.MaxEventDrivenThreads, true
}

// HasMaxEventDrivenThreads returns a boolean if a field has been set.
func (o *JVMControllerDiagnosticsSnapshotDTO) HasMaxEventDrivenThreads() bool {
	if o != nil && !IsNil(o.MaxEventDrivenThreads) {
		return true
	}

	return false
}

// SetMaxEventDrivenThreads gets a reference to the given int32 and assigns it to the MaxEventDrivenThreads field.
func (o *JVMControllerDiagnosticsSnapshotDTO) SetMaxEventDrivenThreads(v int32) {
	o.MaxEventDrivenThreads = &v
}

func (o JVMControllerDiagnosticsSnapshotDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JVMControllerDiagnosticsSnapshotDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PrimaryNode) {
		toSerialize["primaryNode"] = o.PrimaryNode
	}
	if !IsNil(o.ClusterCoordinator) {
		toSerialize["clusterCoordinator"] = o.ClusterCoordinator
	}
	if !IsNil(o.MaxTimerDrivenThreads) {
		toSerialize["maxTimerDrivenThreads"] = o.MaxTimerDrivenThreads
	}
	if !IsNil(o.MaxEventDrivenThreads) {
		toSerialize["maxEventDrivenThreads"] = o.MaxEventDrivenThreads
	}
	return toSerialize, nil
}

type NullableJVMControllerDiagnosticsSnapshotDTO struct {
	value *JVMControllerDiagnosticsSnapshotDTO
	isSet bool
}

func (v NullableJVMControllerDiagnosticsSnapshotDTO) Get() *JVMControllerDiagnosticsSnapshotDTO {
	return v.value
}

func (v *NullableJVMControllerDiagnosticsSnapshotDTO) Set(val *JVMControllerDiagnosticsSnapshotDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableJVMControllerDiagnosticsSnapshotDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableJVMControllerDiagnosticsSnapshotDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJVMControllerDiagnosticsSnapshotDTO(val *JVMControllerDiagnosticsSnapshotDTO) *NullableJVMControllerDiagnosticsSnapshotDTO {
	return &NullableJVMControllerDiagnosticsSnapshotDTO{value: val, isSet: true}
}

func (v NullableJVMControllerDiagnosticsSnapshotDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJVMControllerDiagnosticsSnapshotDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


