/*
NiFi Rest API

The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.

API version: 2.0.0
Contact: dev@nifi.apache.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nifiapi

import (
	"encoding/json"
)

// checks if the PropertyDependency type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PropertyDependency{}

// PropertyDependency struct for PropertyDependency
type PropertyDependency struct {
	// The name of the property that is depended upon
	PropertyName *string `json:"propertyName,omitempty"`
	// The name of the property that is depended upon
	PropertyDisplayName *string `json:"propertyDisplayName,omitempty"`
	// The values that satisfy the dependency
	DependentValues []string `json:"dependentValues,omitempty"`
}

// NewPropertyDependency instantiates a new PropertyDependency object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPropertyDependency() *PropertyDependency {
	this := PropertyDependency{}
	return &this
}

// NewPropertyDependencyWithDefaults instantiates a new PropertyDependency object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPropertyDependencyWithDefaults() *PropertyDependency {
	this := PropertyDependency{}
	return &this
}

// GetPropertyName returns the PropertyName field value if set, zero value otherwise.
func (o *PropertyDependency) GetPropertyName() string {
	if o == nil || IsNil(o.PropertyName) {
		var ret string
		return ret
	}
	return *o.PropertyName
}

// GetPropertyNameOk returns a tuple with the PropertyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertyDependency) GetPropertyNameOk() (*string, bool) {
	if o == nil || IsNil(o.PropertyName) {
		return nil, false
	}
	return o.PropertyName, true
}

// HasPropertyName returns a boolean if a field has been set.
func (o *PropertyDependency) HasPropertyName() bool {
	if o != nil && !IsNil(o.PropertyName) {
		return true
	}

	return false
}

// SetPropertyName gets a reference to the given string and assigns it to the PropertyName field.
func (o *PropertyDependency) SetPropertyName(v string) {
	o.PropertyName = &v
}

// GetPropertyDisplayName returns the PropertyDisplayName field value if set, zero value otherwise.
func (o *PropertyDependency) GetPropertyDisplayName() string {
	if o == nil || IsNil(o.PropertyDisplayName) {
		var ret string
		return ret
	}
	return *o.PropertyDisplayName
}

// GetPropertyDisplayNameOk returns a tuple with the PropertyDisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertyDependency) GetPropertyDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.PropertyDisplayName) {
		return nil, false
	}
	return o.PropertyDisplayName, true
}

// HasPropertyDisplayName returns a boolean if a field has been set.
func (o *PropertyDependency) HasPropertyDisplayName() bool {
	if o != nil && !IsNil(o.PropertyDisplayName) {
		return true
	}

	return false
}

// SetPropertyDisplayName gets a reference to the given string and assigns it to the PropertyDisplayName field.
func (o *PropertyDependency) SetPropertyDisplayName(v string) {
	o.PropertyDisplayName = &v
}

// GetDependentValues returns the DependentValues field value if set, zero value otherwise.
func (o *PropertyDependency) GetDependentValues() []string {
	if o == nil || IsNil(o.DependentValues) {
		var ret []string
		return ret
	}
	return o.DependentValues
}

// GetDependentValuesOk returns a tuple with the DependentValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertyDependency) GetDependentValuesOk() ([]string, bool) {
	if o == nil || IsNil(o.DependentValues) {
		return nil, false
	}
	return o.DependentValues, true
}

// HasDependentValues returns a boolean if a field has been set.
func (o *PropertyDependency) HasDependentValues() bool {
	if o != nil && !IsNil(o.DependentValues) {
		return true
	}

	return false
}

// SetDependentValues gets a reference to the given []string and assigns it to the DependentValues field.
func (o *PropertyDependency) SetDependentValues(v []string) {
	o.DependentValues = v
}

func (o PropertyDependency) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PropertyDependency) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PropertyName) {
		toSerialize["propertyName"] = o.PropertyName
	}
	if !IsNil(o.PropertyDisplayName) {
		toSerialize["propertyDisplayName"] = o.PropertyDisplayName
	}
	if !IsNil(o.DependentValues) {
		toSerialize["dependentValues"] = o.DependentValues
	}
	return toSerialize, nil
}

type NullablePropertyDependency struct {
	value *PropertyDependency
	isSet bool
}

func (v NullablePropertyDependency) Get() *PropertyDependency {
	return v.value
}

func (v *NullablePropertyDependency) Set(val *PropertyDependency) {
	v.value = val
	v.isSet = true
}

func (v NullablePropertyDependency) IsSet() bool {
	return v.isSet
}

func (v *NullablePropertyDependency) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePropertyDependency(val *PropertyDependency) *NullablePropertyDependency {
	return &NullablePropertyDependency{value: val, isSet: true}
}

func (v NullablePropertyDependency) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePropertyDependency) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


