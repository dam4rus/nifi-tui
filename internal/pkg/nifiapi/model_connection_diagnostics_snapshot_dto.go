/*
NiFi Rest API

The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.

API version: 2.0.0
Contact: dev@nifi.apache.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nifiapi

import (
	"encoding/json"
)

// checks if the ConnectionDiagnosticsSnapshotDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConnectionDiagnosticsSnapshotDTO{}

// ConnectionDiagnosticsSnapshotDTO struct for ConnectionDiagnosticsSnapshotDTO
type ConnectionDiagnosticsSnapshotDTO struct {
	// Total number of FlowFiles owned by the Connection
	TotalFlowFileCount *int32 `json:"totalFlowFileCount,omitempty"`
	// Total number of bytes that make up the content for the FlowFiles owned by this Connection
	TotalByteCount *int64 `json:"totalByteCount,omitempty"`
	// The Node Identifier that this information pertains to
	NodeIdentifier *string `json:"nodeIdentifier,omitempty"`
	LocalQueuePartition *LocalQueuePartitionDTO `json:"localQueuePartition,omitempty"`
	RemoteQueuePartitions []RemoteQueuePartitionDTO `json:"remoteQueuePartitions,omitempty"`
}

// NewConnectionDiagnosticsSnapshotDTO instantiates a new ConnectionDiagnosticsSnapshotDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectionDiagnosticsSnapshotDTO() *ConnectionDiagnosticsSnapshotDTO {
	this := ConnectionDiagnosticsSnapshotDTO{}
	return &this
}

// NewConnectionDiagnosticsSnapshotDTOWithDefaults instantiates a new ConnectionDiagnosticsSnapshotDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectionDiagnosticsSnapshotDTOWithDefaults() *ConnectionDiagnosticsSnapshotDTO {
	this := ConnectionDiagnosticsSnapshotDTO{}
	return &this
}

// GetTotalFlowFileCount returns the TotalFlowFileCount field value if set, zero value otherwise.
func (o *ConnectionDiagnosticsSnapshotDTO) GetTotalFlowFileCount() int32 {
	if o == nil || IsNil(o.TotalFlowFileCount) {
		var ret int32
		return ret
	}
	return *o.TotalFlowFileCount
}

// GetTotalFlowFileCountOk returns a tuple with the TotalFlowFileCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionDiagnosticsSnapshotDTO) GetTotalFlowFileCountOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalFlowFileCount) {
		return nil, false
	}
	return o.TotalFlowFileCount, true
}

// HasTotalFlowFileCount returns a boolean if a field has been set.
func (o *ConnectionDiagnosticsSnapshotDTO) HasTotalFlowFileCount() bool {
	if o != nil && !IsNil(o.TotalFlowFileCount) {
		return true
	}

	return false
}

// SetTotalFlowFileCount gets a reference to the given int32 and assigns it to the TotalFlowFileCount field.
func (o *ConnectionDiagnosticsSnapshotDTO) SetTotalFlowFileCount(v int32) {
	o.TotalFlowFileCount = &v
}

// GetTotalByteCount returns the TotalByteCount field value if set, zero value otherwise.
func (o *ConnectionDiagnosticsSnapshotDTO) GetTotalByteCount() int64 {
	if o == nil || IsNil(o.TotalByteCount) {
		var ret int64
		return ret
	}
	return *o.TotalByteCount
}

// GetTotalByteCountOk returns a tuple with the TotalByteCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionDiagnosticsSnapshotDTO) GetTotalByteCountOk() (*int64, bool) {
	if o == nil || IsNil(o.TotalByteCount) {
		return nil, false
	}
	return o.TotalByteCount, true
}

// HasTotalByteCount returns a boolean if a field has been set.
func (o *ConnectionDiagnosticsSnapshotDTO) HasTotalByteCount() bool {
	if o != nil && !IsNil(o.TotalByteCount) {
		return true
	}

	return false
}

// SetTotalByteCount gets a reference to the given int64 and assigns it to the TotalByteCount field.
func (o *ConnectionDiagnosticsSnapshotDTO) SetTotalByteCount(v int64) {
	o.TotalByteCount = &v
}

// GetNodeIdentifier returns the NodeIdentifier field value if set, zero value otherwise.
func (o *ConnectionDiagnosticsSnapshotDTO) GetNodeIdentifier() string {
	if o == nil || IsNil(o.NodeIdentifier) {
		var ret string
		return ret
	}
	return *o.NodeIdentifier
}

// GetNodeIdentifierOk returns a tuple with the NodeIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionDiagnosticsSnapshotDTO) GetNodeIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.NodeIdentifier) {
		return nil, false
	}
	return o.NodeIdentifier, true
}

// HasNodeIdentifier returns a boolean if a field has been set.
func (o *ConnectionDiagnosticsSnapshotDTO) HasNodeIdentifier() bool {
	if o != nil && !IsNil(o.NodeIdentifier) {
		return true
	}

	return false
}

// SetNodeIdentifier gets a reference to the given string and assigns it to the NodeIdentifier field.
func (o *ConnectionDiagnosticsSnapshotDTO) SetNodeIdentifier(v string) {
	o.NodeIdentifier = &v
}

// GetLocalQueuePartition returns the LocalQueuePartition field value if set, zero value otherwise.
func (o *ConnectionDiagnosticsSnapshotDTO) GetLocalQueuePartition() LocalQueuePartitionDTO {
	if o == nil || IsNil(o.LocalQueuePartition) {
		var ret LocalQueuePartitionDTO
		return ret
	}
	return *o.LocalQueuePartition
}

// GetLocalQueuePartitionOk returns a tuple with the LocalQueuePartition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionDiagnosticsSnapshotDTO) GetLocalQueuePartitionOk() (*LocalQueuePartitionDTO, bool) {
	if o == nil || IsNil(o.LocalQueuePartition) {
		return nil, false
	}
	return o.LocalQueuePartition, true
}

// HasLocalQueuePartition returns a boolean if a field has been set.
func (o *ConnectionDiagnosticsSnapshotDTO) HasLocalQueuePartition() bool {
	if o != nil && !IsNil(o.LocalQueuePartition) {
		return true
	}

	return false
}

// SetLocalQueuePartition gets a reference to the given LocalQueuePartitionDTO and assigns it to the LocalQueuePartition field.
func (o *ConnectionDiagnosticsSnapshotDTO) SetLocalQueuePartition(v LocalQueuePartitionDTO) {
	o.LocalQueuePartition = &v
}

// GetRemoteQueuePartitions returns the RemoteQueuePartitions field value if set, zero value otherwise.
func (o *ConnectionDiagnosticsSnapshotDTO) GetRemoteQueuePartitions() []RemoteQueuePartitionDTO {
	if o == nil || IsNil(o.RemoteQueuePartitions) {
		var ret []RemoteQueuePartitionDTO
		return ret
	}
	return o.RemoteQueuePartitions
}

// GetRemoteQueuePartitionsOk returns a tuple with the RemoteQueuePartitions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionDiagnosticsSnapshotDTO) GetRemoteQueuePartitionsOk() ([]RemoteQueuePartitionDTO, bool) {
	if o == nil || IsNil(o.RemoteQueuePartitions) {
		return nil, false
	}
	return o.RemoteQueuePartitions, true
}

// HasRemoteQueuePartitions returns a boolean if a field has been set.
func (o *ConnectionDiagnosticsSnapshotDTO) HasRemoteQueuePartitions() bool {
	if o != nil && !IsNil(o.RemoteQueuePartitions) {
		return true
	}

	return false
}

// SetRemoteQueuePartitions gets a reference to the given []RemoteQueuePartitionDTO and assigns it to the RemoteQueuePartitions field.
func (o *ConnectionDiagnosticsSnapshotDTO) SetRemoteQueuePartitions(v []RemoteQueuePartitionDTO) {
	o.RemoteQueuePartitions = v
}

func (o ConnectionDiagnosticsSnapshotDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConnectionDiagnosticsSnapshotDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TotalFlowFileCount) {
		toSerialize["totalFlowFileCount"] = o.TotalFlowFileCount
	}
	if !IsNil(o.TotalByteCount) {
		toSerialize["totalByteCount"] = o.TotalByteCount
	}
	if !IsNil(o.NodeIdentifier) {
		toSerialize["nodeIdentifier"] = o.NodeIdentifier
	}
	if !IsNil(o.LocalQueuePartition) {
		toSerialize["localQueuePartition"] = o.LocalQueuePartition
	}
	if !IsNil(o.RemoteQueuePartitions) {
		toSerialize["remoteQueuePartitions"] = o.RemoteQueuePartitions
	}
	return toSerialize, nil
}

type NullableConnectionDiagnosticsSnapshotDTO struct {
	value *ConnectionDiagnosticsSnapshotDTO
	isSet bool
}

func (v NullableConnectionDiagnosticsSnapshotDTO) Get() *ConnectionDiagnosticsSnapshotDTO {
	return v.value
}

func (v *NullableConnectionDiagnosticsSnapshotDTO) Set(val *ConnectionDiagnosticsSnapshotDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectionDiagnosticsSnapshotDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectionDiagnosticsSnapshotDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectionDiagnosticsSnapshotDTO(val *ConnectionDiagnosticsSnapshotDTO) *NullableConnectionDiagnosticsSnapshotDTO {
	return &NullableConnectionDiagnosticsSnapshotDTO{value: val, isSet: true}
}

func (v NullableConnectionDiagnosticsSnapshotDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectionDiagnosticsSnapshotDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


