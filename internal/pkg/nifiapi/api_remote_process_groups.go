/*
NiFi Rest API

The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.

API version: 2.0.0
Contact: dev@nifi.apache.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nifiapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// RemoteProcessGroupsAPIService RemoteProcessGroupsAPI service
type RemoteProcessGroupsAPIService service

type RemoteProcessGroupsAPIGetRemoteProcessGroupRequest struct {
	ctx context.Context
	ApiService *RemoteProcessGroupsAPIService
	id string
}

func (r RemoteProcessGroupsAPIGetRemoteProcessGroupRequest) Execute() (*RemoteProcessGroupEntity, *http.Response, error) {
	return r.ApiService.GetRemoteProcessGroupExecute(r)
}

/*
GetRemoteProcessGroup Gets a remote process group

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The remote process group id.
 @return RemoteProcessGroupsAPIGetRemoteProcessGroupRequest
*/
func (a *RemoteProcessGroupsAPIService) GetRemoteProcessGroup(ctx context.Context, id string) RemoteProcessGroupsAPIGetRemoteProcessGroupRequest {
	return RemoteProcessGroupsAPIGetRemoteProcessGroupRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return RemoteProcessGroupEntity
func (a *RemoteProcessGroupsAPIService) GetRemoteProcessGroupExecute(r RemoteProcessGroupsAPIGetRemoteProcessGroupRequest) (*RemoteProcessGroupEntity, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RemoteProcessGroupEntity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RemoteProcessGroupsAPIService.GetRemoteProcessGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/remote-process-groups/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RemoteProcessGroupsAPIGetStateRequest struct {
	ctx context.Context
	ApiService *RemoteProcessGroupsAPIService
	id string
}

func (r RemoteProcessGroupsAPIGetStateRequest) Execute() (*ComponentStateEntity, *http.Response, error) {
	return r.ApiService.GetStateExecute(r)
}

/*
GetState Gets the state for a RemoteProcessGroup

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The processor id.
 @return RemoteProcessGroupsAPIGetStateRequest
*/
func (a *RemoteProcessGroupsAPIService) GetState(ctx context.Context, id string) RemoteProcessGroupsAPIGetStateRequest {
	return RemoteProcessGroupsAPIGetStateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ComponentStateEntity
func (a *RemoteProcessGroupsAPIService) GetStateExecute(r RemoteProcessGroupsAPIGetStateRequest) (*ComponentStateEntity, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComponentStateEntity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RemoteProcessGroupsAPIService.GetState")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/remote-process-groups/{id}/state"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RemoteProcessGroupsAPIRemoveRemoteProcessGroupRequest struct {
	ctx context.Context
	ApiService *RemoteProcessGroupsAPIService
	id string
	version *string
	clientId *string
	disconnectedNodeAcknowledged *bool
}

// The revision is used to verify the client is working with the latest version of the flow.
func (r RemoteProcessGroupsAPIRemoveRemoteProcessGroupRequest) Version(version string) RemoteProcessGroupsAPIRemoveRemoteProcessGroupRequest {
	r.version = &version
	return r
}

// If the client id is not specified, new one will be generated. This value (whether specified or generated) is included in the response.
func (r RemoteProcessGroupsAPIRemoveRemoteProcessGroupRequest) ClientId(clientId string) RemoteProcessGroupsAPIRemoveRemoteProcessGroupRequest {
	r.clientId = &clientId
	return r
}

// Acknowledges that this node is disconnected to allow for mutable requests to proceed.
func (r RemoteProcessGroupsAPIRemoveRemoteProcessGroupRequest) DisconnectedNodeAcknowledged(disconnectedNodeAcknowledged bool) RemoteProcessGroupsAPIRemoveRemoteProcessGroupRequest {
	r.disconnectedNodeAcknowledged = &disconnectedNodeAcknowledged
	return r
}

func (r RemoteProcessGroupsAPIRemoveRemoteProcessGroupRequest) Execute() (*RemoteProcessGroupEntity, *http.Response, error) {
	return r.ApiService.RemoveRemoteProcessGroupExecute(r)
}

/*
RemoveRemoteProcessGroup Deletes a remote process group

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The remote process group id.
 @return RemoteProcessGroupsAPIRemoveRemoteProcessGroupRequest
*/
func (a *RemoteProcessGroupsAPIService) RemoveRemoteProcessGroup(ctx context.Context, id string) RemoteProcessGroupsAPIRemoveRemoteProcessGroupRequest {
	return RemoteProcessGroupsAPIRemoveRemoteProcessGroupRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return RemoteProcessGroupEntity
func (a *RemoteProcessGroupsAPIService) RemoveRemoteProcessGroupExecute(r RemoteProcessGroupsAPIRemoveRemoteProcessGroupRequest) (*RemoteProcessGroupEntity, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RemoteProcessGroupEntity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RemoteProcessGroupsAPIService.RemoveRemoteProcessGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/remote-process-groups/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.version != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "version", r.version, "")
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "clientId", r.clientId, "")
	}
	if r.disconnectedNodeAcknowledged != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "disconnectedNodeAcknowledged", r.disconnectedNodeAcknowledged, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RemoteProcessGroupsAPIUpdateRemoteProcessGroupRequest struct {
	ctx context.Context
	ApiService *RemoteProcessGroupsAPIService
	id string
	body *RemoteProcessGroupEntity
}

// The remote process group.
func (r RemoteProcessGroupsAPIUpdateRemoteProcessGroupRequest) Body(body RemoteProcessGroupEntity) RemoteProcessGroupsAPIUpdateRemoteProcessGroupRequest {
	r.body = &body
	return r
}

func (r RemoteProcessGroupsAPIUpdateRemoteProcessGroupRequest) Execute() (*RemoteProcessGroupEntity, *http.Response, error) {
	return r.ApiService.UpdateRemoteProcessGroupExecute(r)
}

/*
UpdateRemoteProcessGroup Updates a remote process group

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The remote process group id.
 @return RemoteProcessGroupsAPIUpdateRemoteProcessGroupRequest
*/
func (a *RemoteProcessGroupsAPIService) UpdateRemoteProcessGroup(ctx context.Context, id string) RemoteProcessGroupsAPIUpdateRemoteProcessGroupRequest {
	return RemoteProcessGroupsAPIUpdateRemoteProcessGroupRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return RemoteProcessGroupEntity
func (a *RemoteProcessGroupsAPIService) UpdateRemoteProcessGroupExecute(r RemoteProcessGroupsAPIUpdateRemoteProcessGroupRequest) (*RemoteProcessGroupEntity, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RemoteProcessGroupEntity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RemoteProcessGroupsAPIService.UpdateRemoteProcessGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/remote-process-groups/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RemoteProcessGroupsAPIUpdateRemoteProcessGroupInputPortRequest struct {
	ctx context.Context
	ApiService *RemoteProcessGroupsAPIService
	id string
	portId string
	body *RemoteProcessGroupPortEntity
}

// The remote process group port.
func (r RemoteProcessGroupsAPIUpdateRemoteProcessGroupInputPortRequest) Body(body RemoteProcessGroupPortEntity) RemoteProcessGroupsAPIUpdateRemoteProcessGroupInputPortRequest {
	r.body = &body
	return r
}

func (r RemoteProcessGroupsAPIUpdateRemoteProcessGroupInputPortRequest) Execute() (*RemoteProcessGroupPortEntity, *http.Response, error) {
	return r.ApiService.UpdateRemoteProcessGroupInputPortExecute(r)
}

/*
UpdateRemoteProcessGroupInputPort Updates a remote port

Note: This endpoint is subject to change as NiFi and it's REST API evolve.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The remote process group id.
 @param portId The remote process group port id.
 @return RemoteProcessGroupsAPIUpdateRemoteProcessGroupInputPortRequest
*/
func (a *RemoteProcessGroupsAPIService) UpdateRemoteProcessGroupInputPort(ctx context.Context, id string, portId string) RemoteProcessGroupsAPIUpdateRemoteProcessGroupInputPortRequest {
	return RemoteProcessGroupsAPIUpdateRemoteProcessGroupInputPortRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		portId: portId,
	}
}

// Execute executes the request
//  @return RemoteProcessGroupPortEntity
func (a *RemoteProcessGroupsAPIService) UpdateRemoteProcessGroupInputPortExecute(r RemoteProcessGroupsAPIUpdateRemoteProcessGroupInputPortRequest) (*RemoteProcessGroupPortEntity, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RemoteProcessGroupPortEntity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RemoteProcessGroupsAPIService.UpdateRemoteProcessGroupInputPort")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/remote-process-groups/{id}/input-ports/{port-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"port-id"+"}", url.PathEscape(parameterValueToString(r.portId, "portId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RemoteProcessGroupsAPIUpdateRemoteProcessGroupInputPortRunStatusRequest struct {
	ctx context.Context
	ApiService *RemoteProcessGroupsAPIService
	id string
	portId string
	body *RemotePortRunStatusEntity
}

// The remote process group port.
func (r RemoteProcessGroupsAPIUpdateRemoteProcessGroupInputPortRunStatusRequest) Body(body RemotePortRunStatusEntity) RemoteProcessGroupsAPIUpdateRemoteProcessGroupInputPortRunStatusRequest {
	r.body = &body
	return r
}

func (r RemoteProcessGroupsAPIUpdateRemoteProcessGroupInputPortRunStatusRequest) Execute() (*RemoteProcessGroupPortEntity, *http.Response, error) {
	return r.ApiService.UpdateRemoteProcessGroupInputPortRunStatusExecute(r)
}

/*
UpdateRemoteProcessGroupInputPortRunStatus Updates run status of a remote port

Note: This endpoint is subject to change as NiFi and it's REST API evolve.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The remote process group id.
 @param portId The remote process group port id.
 @return RemoteProcessGroupsAPIUpdateRemoteProcessGroupInputPortRunStatusRequest
*/
func (a *RemoteProcessGroupsAPIService) UpdateRemoteProcessGroupInputPortRunStatus(ctx context.Context, id string, portId string) RemoteProcessGroupsAPIUpdateRemoteProcessGroupInputPortRunStatusRequest {
	return RemoteProcessGroupsAPIUpdateRemoteProcessGroupInputPortRunStatusRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		portId: portId,
	}
}

// Execute executes the request
//  @return RemoteProcessGroupPortEntity
func (a *RemoteProcessGroupsAPIService) UpdateRemoteProcessGroupInputPortRunStatusExecute(r RemoteProcessGroupsAPIUpdateRemoteProcessGroupInputPortRunStatusRequest) (*RemoteProcessGroupPortEntity, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RemoteProcessGroupPortEntity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RemoteProcessGroupsAPIService.UpdateRemoteProcessGroupInputPortRunStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/remote-process-groups/{id}/input-ports/{port-id}/run-status"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"port-id"+"}", url.PathEscape(parameterValueToString(r.portId, "portId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RemoteProcessGroupsAPIUpdateRemoteProcessGroupOutputPortRequest struct {
	ctx context.Context
	ApiService *RemoteProcessGroupsAPIService
	id string
	portId string
	body *RemoteProcessGroupPortEntity
}

// The remote process group port.
func (r RemoteProcessGroupsAPIUpdateRemoteProcessGroupOutputPortRequest) Body(body RemoteProcessGroupPortEntity) RemoteProcessGroupsAPIUpdateRemoteProcessGroupOutputPortRequest {
	r.body = &body
	return r
}

func (r RemoteProcessGroupsAPIUpdateRemoteProcessGroupOutputPortRequest) Execute() (*RemoteProcessGroupPortEntity, *http.Response, error) {
	return r.ApiService.UpdateRemoteProcessGroupOutputPortExecute(r)
}

/*
UpdateRemoteProcessGroupOutputPort Updates a remote port

Note: This endpoint is subject to change as NiFi and it's REST API evolve.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The remote process group id.
 @param portId The remote process group port id.
 @return RemoteProcessGroupsAPIUpdateRemoteProcessGroupOutputPortRequest
*/
func (a *RemoteProcessGroupsAPIService) UpdateRemoteProcessGroupOutputPort(ctx context.Context, id string, portId string) RemoteProcessGroupsAPIUpdateRemoteProcessGroupOutputPortRequest {
	return RemoteProcessGroupsAPIUpdateRemoteProcessGroupOutputPortRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		portId: portId,
	}
}

// Execute executes the request
//  @return RemoteProcessGroupPortEntity
func (a *RemoteProcessGroupsAPIService) UpdateRemoteProcessGroupOutputPortExecute(r RemoteProcessGroupsAPIUpdateRemoteProcessGroupOutputPortRequest) (*RemoteProcessGroupPortEntity, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RemoteProcessGroupPortEntity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RemoteProcessGroupsAPIService.UpdateRemoteProcessGroupOutputPort")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/remote-process-groups/{id}/output-ports/{port-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"port-id"+"}", url.PathEscape(parameterValueToString(r.portId, "portId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RemoteProcessGroupsAPIUpdateRemoteProcessGroupOutputPortRunStatusRequest struct {
	ctx context.Context
	ApiService *RemoteProcessGroupsAPIService
	id string
	portId string
	body *RemotePortRunStatusEntity
}

// The remote process group port.
func (r RemoteProcessGroupsAPIUpdateRemoteProcessGroupOutputPortRunStatusRequest) Body(body RemotePortRunStatusEntity) RemoteProcessGroupsAPIUpdateRemoteProcessGroupOutputPortRunStatusRequest {
	r.body = &body
	return r
}

func (r RemoteProcessGroupsAPIUpdateRemoteProcessGroupOutputPortRunStatusRequest) Execute() (*RemoteProcessGroupPortEntity, *http.Response, error) {
	return r.ApiService.UpdateRemoteProcessGroupOutputPortRunStatusExecute(r)
}

/*
UpdateRemoteProcessGroupOutputPortRunStatus Updates run status of a remote port

Note: This endpoint is subject to change as NiFi and it's REST API evolve.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The remote process group id.
 @param portId The remote process group port id.
 @return RemoteProcessGroupsAPIUpdateRemoteProcessGroupOutputPortRunStatusRequest
*/
func (a *RemoteProcessGroupsAPIService) UpdateRemoteProcessGroupOutputPortRunStatus(ctx context.Context, id string, portId string) RemoteProcessGroupsAPIUpdateRemoteProcessGroupOutputPortRunStatusRequest {
	return RemoteProcessGroupsAPIUpdateRemoteProcessGroupOutputPortRunStatusRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		portId: portId,
	}
}

// Execute executes the request
//  @return RemoteProcessGroupPortEntity
func (a *RemoteProcessGroupsAPIService) UpdateRemoteProcessGroupOutputPortRunStatusExecute(r RemoteProcessGroupsAPIUpdateRemoteProcessGroupOutputPortRunStatusRequest) (*RemoteProcessGroupPortEntity, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RemoteProcessGroupPortEntity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RemoteProcessGroupsAPIService.UpdateRemoteProcessGroupOutputPortRunStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/remote-process-groups/{id}/output-ports/{port-id}/run-status"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"port-id"+"}", url.PathEscape(parameterValueToString(r.portId, "portId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RemoteProcessGroupsAPIUpdateRemoteProcessGroupRunStatusRequest struct {
	ctx context.Context
	ApiService *RemoteProcessGroupsAPIService
	id string
	body *RemotePortRunStatusEntity
}

// The remote process group run status.
func (r RemoteProcessGroupsAPIUpdateRemoteProcessGroupRunStatusRequest) Body(body RemotePortRunStatusEntity) RemoteProcessGroupsAPIUpdateRemoteProcessGroupRunStatusRequest {
	r.body = &body
	return r
}

func (r RemoteProcessGroupsAPIUpdateRemoteProcessGroupRunStatusRequest) Execute() (*RemoteProcessGroupEntity, *http.Response, error) {
	return r.ApiService.UpdateRemoteProcessGroupRunStatusExecute(r)
}

/*
UpdateRemoteProcessGroupRunStatus Updates run status of a remote process group

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The remote process group id.
 @return RemoteProcessGroupsAPIUpdateRemoteProcessGroupRunStatusRequest
*/
func (a *RemoteProcessGroupsAPIService) UpdateRemoteProcessGroupRunStatus(ctx context.Context, id string) RemoteProcessGroupsAPIUpdateRemoteProcessGroupRunStatusRequest {
	return RemoteProcessGroupsAPIUpdateRemoteProcessGroupRunStatusRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return RemoteProcessGroupEntity
func (a *RemoteProcessGroupsAPIService) UpdateRemoteProcessGroupRunStatusExecute(r RemoteProcessGroupsAPIUpdateRemoteProcessGroupRunStatusRequest) (*RemoteProcessGroupEntity, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RemoteProcessGroupEntity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RemoteProcessGroupsAPIService.UpdateRemoteProcessGroupRunStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/remote-process-groups/{id}/run-status"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RemoteProcessGroupsAPIUpdateRemoteProcessGroupRunStatusesRequest struct {
	ctx context.Context
	ApiService *RemoteProcessGroupsAPIService
	id string
	body *RemotePortRunStatusEntity
}

// The remote process groups run status.
func (r RemoteProcessGroupsAPIUpdateRemoteProcessGroupRunStatusesRequest) Body(body RemotePortRunStatusEntity) RemoteProcessGroupsAPIUpdateRemoteProcessGroupRunStatusesRequest {
	r.body = &body
	return r
}

func (r RemoteProcessGroupsAPIUpdateRemoteProcessGroupRunStatusesRequest) Execute() (*RemoteProcessGroupEntity, *http.Response, error) {
	return r.ApiService.UpdateRemoteProcessGroupRunStatusesExecute(r)
}

/*
UpdateRemoteProcessGroupRunStatuses Updates run status of all remote process groups in a process group (recursively)

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The process group id.
 @return RemoteProcessGroupsAPIUpdateRemoteProcessGroupRunStatusesRequest
*/
func (a *RemoteProcessGroupsAPIService) UpdateRemoteProcessGroupRunStatuses(ctx context.Context, id string) RemoteProcessGroupsAPIUpdateRemoteProcessGroupRunStatusesRequest {
	return RemoteProcessGroupsAPIUpdateRemoteProcessGroupRunStatusesRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return RemoteProcessGroupEntity
func (a *RemoteProcessGroupsAPIService) UpdateRemoteProcessGroupRunStatusesExecute(r RemoteProcessGroupsAPIUpdateRemoteProcessGroupRunStatusesRequest) (*RemoteProcessGroupEntity, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RemoteProcessGroupEntity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RemoteProcessGroupsAPIService.UpdateRemoteProcessGroupRunStatuses")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/remote-process-groups/process-group/{id}/run-status"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
