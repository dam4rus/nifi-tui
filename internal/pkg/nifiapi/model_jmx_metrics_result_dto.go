/*
NiFi Rest API

The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.

API version: 2.0.0
Contact: dev@nifi.apache.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nifiapi

import (
	"encoding/json"
)

// checks if the JmxMetricsResultDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JmxMetricsResultDTO{}

// JmxMetricsResultDTO struct for JmxMetricsResultDTO
type JmxMetricsResultDTO struct {
	// The bean name of the metrics bean.
	BeanName *string `json:"beanName,omitempty"`
	// The attribute name of the metrics bean's attribute.
	AttributeName *string `json:"attributeName,omitempty"`
	// The attribute value of the the metrics bean's attribute
	AttributeValue map[string]interface{} `json:"attributeValue,omitempty"`
}

// NewJmxMetricsResultDTO instantiates a new JmxMetricsResultDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJmxMetricsResultDTO() *JmxMetricsResultDTO {
	this := JmxMetricsResultDTO{}
	return &this
}

// NewJmxMetricsResultDTOWithDefaults instantiates a new JmxMetricsResultDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJmxMetricsResultDTOWithDefaults() *JmxMetricsResultDTO {
	this := JmxMetricsResultDTO{}
	return &this
}

// GetBeanName returns the BeanName field value if set, zero value otherwise.
func (o *JmxMetricsResultDTO) GetBeanName() string {
	if o == nil || IsNil(o.BeanName) {
		var ret string
		return ret
	}
	return *o.BeanName
}

// GetBeanNameOk returns a tuple with the BeanName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JmxMetricsResultDTO) GetBeanNameOk() (*string, bool) {
	if o == nil || IsNil(o.BeanName) {
		return nil, false
	}
	return o.BeanName, true
}

// HasBeanName returns a boolean if a field has been set.
func (o *JmxMetricsResultDTO) HasBeanName() bool {
	if o != nil && !IsNil(o.BeanName) {
		return true
	}

	return false
}

// SetBeanName gets a reference to the given string and assigns it to the BeanName field.
func (o *JmxMetricsResultDTO) SetBeanName(v string) {
	o.BeanName = &v
}

// GetAttributeName returns the AttributeName field value if set, zero value otherwise.
func (o *JmxMetricsResultDTO) GetAttributeName() string {
	if o == nil || IsNil(o.AttributeName) {
		var ret string
		return ret
	}
	return *o.AttributeName
}

// GetAttributeNameOk returns a tuple with the AttributeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JmxMetricsResultDTO) GetAttributeNameOk() (*string, bool) {
	if o == nil || IsNil(o.AttributeName) {
		return nil, false
	}
	return o.AttributeName, true
}

// HasAttributeName returns a boolean if a field has been set.
func (o *JmxMetricsResultDTO) HasAttributeName() bool {
	if o != nil && !IsNil(o.AttributeName) {
		return true
	}

	return false
}

// SetAttributeName gets a reference to the given string and assigns it to the AttributeName field.
func (o *JmxMetricsResultDTO) SetAttributeName(v string) {
	o.AttributeName = &v
}

// GetAttributeValue returns the AttributeValue field value if set, zero value otherwise.
func (o *JmxMetricsResultDTO) GetAttributeValue() map[string]interface{} {
	if o == nil || IsNil(o.AttributeValue) {
		var ret map[string]interface{}
		return ret
	}
	return o.AttributeValue
}

// GetAttributeValueOk returns a tuple with the AttributeValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JmxMetricsResultDTO) GetAttributeValueOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.AttributeValue) {
		return map[string]interface{}{}, false
	}
	return o.AttributeValue, true
}

// HasAttributeValue returns a boolean if a field has been set.
func (o *JmxMetricsResultDTO) HasAttributeValue() bool {
	if o != nil && !IsNil(o.AttributeValue) {
		return true
	}

	return false
}

// SetAttributeValue gets a reference to the given map[string]interface{} and assigns it to the AttributeValue field.
func (o *JmxMetricsResultDTO) SetAttributeValue(v map[string]interface{}) {
	o.AttributeValue = v
}

func (o JmxMetricsResultDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JmxMetricsResultDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BeanName) {
		toSerialize["beanName"] = o.BeanName
	}
	if !IsNil(o.AttributeName) {
		toSerialize["attributeName"] = o.AttributeName
	}
	if !IsNil(o.AttributeValue) {
		toSerialize["attributeValue"] = o.AttributeValue
	}
	return toSerialize, nil
}

type NullableJmxMetricsResultDTO struct {
	value *JmxMetricsResultDTO
	isSet bool
}

func (v NullableJmxMetricsResultDTO) Get() *JmxMetricsResultDTO {
	return v.value
}

func (v *NullableJmxMetricsResultDTO) Set(val *JmxMetricsResultDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableJmxMetricsResultDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableJmxMetricsResultDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJmxMetricsResultDTO(val *JmxMetricsResultDTO) *NullableJmxMetricsResultDTO {
	return &NullableJmxMetricsResultDTO{value: val, isSet: true}
}

func (v NullableJmxMetricsResultDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJmxMetricsResultDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


