/*
NiFi Rest API

The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.

API version: 2.0.0
Contact: dev@nifi.apache.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nifiapi

import (
	"encoding/json"
)

// checks if the FlowRegistryPermissions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FlowRegistryPermissions{}

// FlowRegistryPermissions struct for FlowRegistryPermissions
type FlowRegistryPermissions struct {
	CanRead *bool `json:"canRead,omitempty"`
	CanWrite *bool `json:"canWrite,omitempty"`
	CanDelete *bool `json:"canDelete,omitempty"`
}

// NewFlowRegistryPermissions instantiates a new FlowRegistryPermissions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFlowRegistryPermissions() *FlowRegistryPermissions {
	this := FlowRegistryPermissions{}
	return &this
}

// NewFlowRegistryPermissionsWithDefaults instantiates a new FlowRegistryPermissions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFlowRegistryPermissionsWithDefaults() *FlowRegistryPermissions {
	this := FlowRegistryPermissions{}
	return &this
}

// GetCanRead returns the CanRead field value if set, zero value otherwise.
func (o *FlowRegistryPermissions) GetCanRead() bool {
	if o == nil || IsNil(o.CanRead) {
		var ret bool
		return ret
	}
	return *o.CanRead
}

// GetCanReadOk returns a tuple with the CanRead field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowRegistryPermissions) GetCanReadOk() (*bool, bool) {
	if o == nil || IsNil(o.CanRead) {
		return nil, false
	}
	return o.CanRead, true
}

// HasCanRead returns a boolean if a field has been set.
func (o *FlowRegistryPermissions) HasCanRead() bool {
	if o != nil && !IsNil(o.CanRead) {
		return true
	}

	return false
}

// SetCanRead gets a reference to the given bool and assigns it to the CanRead field.
func (o *FlowRegistryPermissions) SetCanRead(v bool) {
	o.CanRead = &v
}

// GetCanWrite returns the CanWrite field value if set, zero value otherwise.
func (o *FlowRegistryPermissions) GetCanWrite() bool {
	if o == nil || IsNil(o.CanWrite) {
		var ret bool
		return ret
	}
	return *o.CanWrite
}

// GetCanWriteOk returns a tuple with the CanWrite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowRegistryPermissions) GetCanWriteOk() (*bool, bool) {
	if o == nil || IsNil(o.CanWrite) {
		return nil, false
	}
	return o.CanWrite, true
}

// HasCanWrite returns a boolean if a field has been set.
func (o *FlowRegistryPermissions) HasCanWrite() bool {
	if o != nil && !IsNil(o.CanWrite) {
		return true
	}

	return false
}

// SetCanWrite gets a reference to the given bool and assigns it to the CanWrite field.
func (o *FlowRegistryPermissions) SetCanWrite(v bool) {
	o.CanWrite = &v
}

// GetCanDelete returns the CanDelete field value if set, zero value otherwise.
func (o *FlowRegistryPermissions) GetCanDelete() bool {
	if o == nil || IsNil(o.CanDelete) {
		var ret bool
		return ret
	}
	return *o.CanDelete
}

// GetCanDeleteOk returns a tuple with the CanDelete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowRegistryPermissions) GetCanDeleteOk() (*bool, bool) {
	if o == nil || IsNil(o.CanDelete) {
		return nil, false
	}
	return o.CanDelete, true
}

// HasCanDelete returns a boolean if a field has been set.
func (o *FlowRegistryPermissions) HasCanDelete() bool {
	if o != nil && !IsNil(o.CanDelete) {
		return true
	}

	return false
}

// SetCanDelete gets a reference to the given bool and assigns it to the CanDelete field.
func (o *FlowRegistryPermissions) SetCanDelete(v bool) {
	o.CanDelete = &v
}

func (o FlowRegistryPermissions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FlowRegistryPermissions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CanRead) {
		toSerialize["canRead"] = o.CanRead
	}
	if !IsNil(o.CanWrite) {
		toSerialize["canWrite"] = o.CanWrite
	}
	if !IsNil(o.CanDelete) {
		toSerialize["canDelete"] = o.CanDelete
	}
	return toSerialize, nil
}

type NullableFlowRegistryPermissions struct {
	value *FlowRegistryPermissions
	isSet bool
}

func (v NullableFlowRegistryPermissions) Get() *FlowRegistryPermissions {
	return v.value
}

func (v *NullableFlowRegistryPermissions) Set(val *FlowRegistryPermissions) {
	v.value = val
	v.isSet = true
}

func (v NullableFlowRegistryPermissions) IsSet() bool {
	return v.isSet
}

func (v *NullableFlowRegistryPermissions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFlowRegistryPermissions(val *FlowRegistryPermissions) *NullableFlowRegistryPermissions {
	return &NullableFlowRegistryPermissions{value: val, isSet: true}
}

func (v NullableFlowRegistryPermissions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFlowRegistryPermissions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


