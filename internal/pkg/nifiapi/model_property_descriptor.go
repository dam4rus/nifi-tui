/*
NiFi Rest API

The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.

API version: 2.0.0
Contact: dev@nifi.apache.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nifiapi

import (
	"encoding/json"
)

// checks if the PropertyDescriptor type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PropertyDescriptor{}

// PropertyDescriptor struct for PropertyDescriptor
type PropertyDescriptor struct {
	// The name of the property key
	Name string `json:"name"`
	// The display name of the property key, if different from the name
	DisplayName *string `json:"displayName,omitempty"`
	// The description of what the property does
	Description *string `json:"description,omitempty"`
	// A list of the allowable values for the property
	AllowableValues []PropertyAllowableValue `json:"allowableValues,omitempty"`
	// The default value if a user-set value is not specified
	DefaultValue *string `json:"defaultValue,omitempty"`
	// Whether or not  the property is required for the component
	Required *bool `json:"required,omitempty"`
	// Whether or not  the value of the property is considered sensitive (e.g., passwords and keys)
	Sensitive *bool `json:"sensitive,omitempty"`
	// The scope of expression language supported by this property
	ExpressionLanguageScope *string `json:"expressionLanguageScope,omitempty"`
	// The description of the expression language scope supported by this property
	ExpressionLanguageScopeDescription *string `json:"expressionLanguageScopeDescription,omitempty"`
	TypeProvidedByValue *DefinedType `json:"typeProvidedByValue,omitempty"`
	// A regular expression that can be used to validate the value of this property
	ValidRegex *string `json:"validRegex,omitempty"`
	// Name of the validator used for this property descriptor
	Validator *string `json:"validator,omitempty"`
	// Whether or not the descriptor is for a dynamically added property
	Dynamic *bool `json:"dynamic,omitempty"`
	ResourceDefinition *PropertyResourceDefinition `json:"resourceDefinition,omitempty"`
	// The dependencies that this property has on other properties
	Dependencies []PropertyDependency `json:"dependencies,omitempty"`
}

// NewPropertyDescriptor instantiates a new PropertyDescriptor object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPropertyDescriptor(name string) *PropertyDescriptor {
	this := PropertyDescriptor{}
	this.Name = name
	return &this
}

// NewPropertyDescriptorWithDefaults instantiates a new PropertyDescriptor object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPropertyDescriptorWithDefaults() *PropertyDescriptor {
	this := PropertyDescriptor{}
	return &this
}

// GetName returns the Name field value
func (o *PropertyDescriptor) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *PropertyDescriptor) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *PropertyDescriptor) SetName(v string) {
	o.Name = v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *PropertyDescriptor) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertyDescriptor) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *PropertyDescriptor) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *PropertyDescriptor) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *PropertyDescriptor) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertyDescriptor) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *PropertyDescriptor) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *PropertyDescriptor) SetDescription(v string) {
	o.Description = &v
}

// GetAllowableValues returns the AllowableValues field value if set, zero value otherwise.
func (o *PropertyDescriptor) GetAllowableValues() []PropertyAllowableValue {
	if o == nil || IsNil(o.AllowableValues) {
		var ret []PropertyAllowableValue
		return ret
	}
	return o.AllowableValues
}

// GetAllowableValuesOk returns a tuple with the AllowableValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertyDescriptor) GetAllowableValuesOk() ([]PropertyAllowableValue, bool) {
	if o == nil || IsNil(o.AllowableValues) {
		return nil, false
	}
	return o.AllowableValues, true
}

// HasAllowableValues returns a boolean if a field has been set.
func (o *PropertyDescriptor) HasAllowableValues() bool {
	if o != nil && !IsNil(o.AllowableValues) {
		return true
	}

	return false
}

// SetAllowableValues gets a reference to the given []PropertyAllowableValue and assigns it to the AllowableValues field.
func (o *PropertyDescriptor) SetAllowableValues(v []PropertyAllowableValue) {
	o.AllowableValues = v
}

// GetDefaultValue returns the DefaultValue field value if set, zero value otherwise.
func (o *PropertyDescriptor) GetDefaultValue() string {
	if o == nil || IsNil(o.DefaultValue) {
		var ret string
		return ret
	}
	return *o.DefaultValue
}

// GetDefaultValueOk returns a tuple with the DefaultValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertyDescriptor) GetDefaultValueOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultValue) {
		return nil, false
	}
	return o.DefaultValue, true
}

// HasDefaultValue returns a boolean if a field has been set.
func (o *PropertyDescriptor) HasDefaultValue() bool {
	if o != nil && !IsNil(o.DefaultValue) {
		return true
	}

	return false
}

// SetDefaultValue gets a reference to the given string and assigns it to the DefaultValue field.
func (o *PropertyDescriptor) SetDefaultValue(v string) {
	o.DefaultValue = &v
}

// GetRequired returns the Required field value if set, zero value otherwise.
func (o *PropertyDescriptor) GetRequired() bool {
	if o == nil || IsNil(o.Required) {
		var ret bool
		return ret
	}
	return *o.Required
}

// GetRequiredOk returns a tuple with the Required field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertyDescriptor) GetRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.Required) {
		return nil, false
	}
	return o.Required, true
}

// HasRequired returns a boolean if a field has been set.
func (o *PropertyDescriptor) HasRequired() bool {
	if o != nil && !IsNil(o.Required) {
		return true
	}

	return false
}

// SetRequired gets a reference to the given bool and assigns it to the Required field.
func (o *PropertyDescriptor) SetRequired(v bool) {
	o.Required = &v
}

// GetSensitive returns the Sensitive field value if set, zero value otherwise.
func (o *PropertyDescriptor) GetSensitive() bool {
	if o == nil || IsNil(o.Sensitive) {
		var ret bool
		return ret
	}
	return *o.Sensitive
}

// GetSensitiveOk returns a tuple with the Sensitive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertyDescriptor) GetSensitiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Sensitive) {
		return nil, false
	}
	return o.Sensitive, true
}

// HasSensitive returns a boolean if a field has been set.
func (o *PropertyDescriptor) HasSensitive() bool {
	if o != nil && !IsNil(o.Sensitive) {
		return true
	}

	return false
}

// SetSensitive gets a reference to the given bool and assigns it to the Sensitive field.
func (o *PropertyDescriptor) SetSensitive(v bool) {
	o.Sensitive = &v
}

// GetExpressionLanguageScope returns the ExpressionLanguageScope field value if set, zero value otherwise.
func (o *PropertyDescriptor) GetExpressionLanguageScope() string {
	if o == nil || IsNil(o.ExpressionLanguageScope) {
		var ret string
		return ret
	}
	return *o.ExpressionLanguageScope
}

// GetExpressionLanguageScopeOk returns a tuple with the ExpressionLanguageScope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertyDescriptor) GetExpressionLanguageScopeOk() (*string, bool) {
	if o == nil || IsNil(o.ExpressionLanguageScope) {
		return nil, false
	}
	return o.ExpressionLanguageScope, true
}

// HasExpressionLanguageScope returns a boolean if a field has been set.
func (o *PropertyDescriptor) HasExpressionLanguageScope() bool {
	if o != nil && !IsNil(o.ExpressionLanguageScope) {
		return true
	}

	return false
}

// SetExpressionLanguageScope gets a reference to the given string and assigns it to the ExpressionLanguageScope field.
func (o *PropertyDescriptor) SetExpressionLanguageScope(v string) {
	o.ExpressionLanguageScope = &v
}

// GetExpressionLanguageScopeDescription returns the ExpressionLanguageScopeDescription field value if set, zero value otherwise.
func (o *PropertyDescriptor) GetExpressionLanguageScopeDescription() string {
	if o == nil || IsNil(o.ExpressionLanguageScopeDescription) {
		var ret string
		return ret
	}
	return *o.ExpressionLanguageScopeDescription
}

// GetExpressionLanguageScopeDescriptionOk returns a tuple with the ExpressionLanguageScopeDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertyDescriptor) GetExpressionLanguageScopeDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.ExpressionLanguageScopeDescription) {
		return nil, false
	}
	return o.ExpressionLanguageScopeDescription, true
}

// HasExpressionLanguageScopeDescription returns a boolean if a field has been set.
func (o *PropertyDescriptor) HasExpressionLanguageScopeDescription() bool {
	if o != nil && !IsNil(o.ExpressionLanguageScopeDescription) {
		return true
	}

	return false
}

// SetExpressionLanguageScopeDescription gets a reference to the given string and assigns it to the ExpressionLanguageScopeDescription field.
func (o *PropertyDescriptor) SetExpressionLanguageScopeDescription(v string) {
	o.ExpressionLanguageScopeDescription = &v
}

// GetTypeProvidedByValue returns the TypeProvidedByValue field value if set, zero value otherwise.
func (o *PropertyDescriptor) GetTypeProvidedByValue() DefinedType {
	if o == nil || IsNil(o.TypeProvidedByValue) {
		var ret DefinedType
		return ret
	}
	return *o.TypeProvidedByValue
}

// GetTypeProvidedByValueOk returns a tuple with the TypeProvidedByValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertyDescriptor) GetTypeProvidedByValueOk() (*DefinedType, bool) {
	if o == nil || IsNil(o.TypeProvidedByValue) {
		return nil, false
	}
	return o.TypeProvidedByValue, true
}

// HasTypeProvidedByValue returns a boolean if a field has been set.
func (o *PropertyDescriptor) HasTypeProvidedByValue() bool {
	if o != nil && !IsNil(o.TypeProvidedByValue) {
		return true
	}

	return false
}

// SetTypeProvidedByValue gets a reference to the given DefinedType and assigns it to the TypeProvidedByValue field.
func (o *PropertyDescriptor) SetTypeProvidedByValue(v DefinedType) {
	o.TypeProvidedByValue = &v
}

// GetValidRegex returns the ValidRegex field value if set, zero value otherwise.
func (o *PropertyDescriptor) GetValidRegex() string {
	if o == nil || IsNil(o.ValidRegex) {
		var ret string
		return ret
	}
	return *o.ValidRegex
}

// GetValidRegexOk returns a tuple with the ValidRegex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertyDescriptor) GetValidRegexOk() (*string, bool) {
	if o == nil || IsNil(o.ValidRegex) {
		return nil, false
	}
	return o.ValidRegex, true
}

// HasValidRegex returns a boolean if a field has been set.
func (o *PropertyDescriptor) HasValidRegex() bool {
	if o != nil && !IsNil(o.ValidRegex) {
		return true
	}

	return false
}

// SetValidRegex gets a reference to the given string and assigns it to the ValidRegex field.
func (o *PropertyDescriptor) SetValidRegex(v string) {
	o.ValidRegex = &v
}

// GetValidator returns the Validator field value if set, zero value otherwise.
func (o *PropertyDescriptor) GetValidator() string {
	if o == nil || IsNil(o.Validator) {
		var ret string
		return ret
	}
	return *o.Validator
}

// GetValidatorOk returns a tuple with the Validator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertyDescriptor) GetValidatorOk() (*string, bool) {
	if o == nil || IsNil(o.Validator) {
		return nil, false
	}
	return o.Validator, true
}

// HasValidator returns a boolean if a field has been set.
func (o *PropertyDescriptor) HasValidator() bool {
	if o != nil && !IsNil(o.Validator) {
		return true
	}

	return false
}

// SetValidator gets a reference to the given string and assigns it to the Validator field.
func (o *PropertyDescriptor) SetValidator(v string) {
	o.Validator = &v
}

// GetDynamic returns the Dynamic field value if set, zero value otherwise.
func (o *PropertyDescriptor) GetDynamic() bool {
	if o == nil || IsNil(o.Dynamic) {
		var ret bool
		return ret
	}
	return *o.Dynamic
}

// GetDynamicOk returns a tuple with the Dynamic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertyDescriptor) GetDynamicOk() (*bool, bool) {
	if o == nil || IsNil(o.Dynamic) {
		return nil, false
	}
	return o.Dynamic, true
}

// HasDynamic returns a boolean if a field has been set.
func (o *PropertyDescriptor) HasDynamic() bool {
	if o != nil && !IsNil(o.Dynamic) {
		return true
	}

	return false
}

// SetDynamic gets a reference to the given bool and assigns it to the Dynamic field.
func (o *PropertyDescriptor) SetDynamic(v bool) {
	o.Dynamic = &v
}

// GetResourceDefinition returns the ResourceDefinition field value if set, zero value otherwise.
func (o *PropertyDescriptor) GetResourceDefinition() PropertyResourceDefinition {
	if o == nil || IsNil(o.ResourceDefinition) {
		var ret PropertyResourceDefinition
		return ret
	}
	return *o.ResourceDefinition
}

// GetResourceDefinitionOk returns a tuple with the ResourceDefinition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertyDescriptor) GetResourceDefinitionOk() (*PropertyResourceDefinition, bool) {
	if o == nil || IsNil(o.ResourceDefinition) {
		return nil, false
	}
	return o.ResourceDefinition, true
}

// HasResourceDefinition returns a boolean if a field has been set.
func (o *PropertyDescriptor) HasResourceDefinition() bool {
	if o != nil && !IsNil(o.ResourceDefinition) {
		return true
	}

	return false
}

// SetResourceDefinition gets a reference to the given PropertyResourceDefinition and assigns it to the ResourceDefinition field.
func (o *PropertyDescriptor) SetResourceDefinition(v PropertyResourceDefinition) {
	o.ResourceDefinition = &v
}

// GetDependencies returns the Dependencies field value if set, zero value otherwise.
func (o *PropertyDescriptor) GetDependencies() []PropertyDependency {
	if o == nil || IsNil(o.Dependencies) {
		var ret []PropertyDependency
		return ret
	}
	return o.Dependencies
}

// GetDependenciesOk returns a tuple with the Dependencies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertyDescriptor) GetDependenciesOk() ([]PropertyDependency, bool) {
	if o == nil || IsNil(o.Dependencies) {
		return nil, false
	}
	return o.Dependencies, true
}

// HasDependencies returns a boolean if a field has been set.
func (o *PropertyDescriptor) HasDependencies() bool {
	if o != nil && !IsNil(o.Dependencies) {
		return true
	}

	return false
}

// SetDependencies gets a reference to the given []PropertyDependency and assigns it to the Dependencies field.
func (o *PropertyDescriptor) SetDependencies(v []PropertyDependency) {
	o.Dependencies = v
}

func (o PropertyDescriptor) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PropertyDescriptor) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.AllowableValues) {
		toSerialize["allowableValues"] = o.AllowableValues
	}
	if !IsNil(o.DefaultValue) {
		toSerialize["defaultValue"] = o.DefaultValue
	}
	if !IsNil(o.Required) {
		toSerialize["required"] = o.Required
	}
	if !IsNil(o.Sensitive) {
		toSerialize["sensitive"] = o.Sensitive
	}
	if !IsNil(o.ExpressionLanguageScope) {
		toSerialize["expressionLanguageScope"] = o.ExpressionLanguageScope
	}
	if !IsNil(o.ExpressionLanguageScopeDescription) {
		toSerialize["expressionLanguageScopeDescription"] = o.ExpressionLanguageScopeDescription
	}
	if !IsNil(o.TypeProvidedByValue) {
		toSerialize["typeProvidedByValue"] = o.TypeProvidedByValue
	}
	if !IsNil(o.ValidRegex) {
		toSerialize["validRegex"] = o.ValidRegex
	}
	if !IsNil(o.Validator) {
		toSerialize["validator"] = o.Validator
	}
	if !IsNil(o.Dynamic) {
		toSerialize["dynamic"] = o.Dynamic
	}
	if !IsNil(o.ResourceDefinition) {
		toSerialize["resourceDefinition"] = o.ResourceDefinition
	}
	if !IsNil(o.Dependencies) {
		toSerialize["dependencies"] = o.Dependencies
	}
	return toSerialize, nil
}

type NullablePropertyDescriptor struct {
	value *PropertyDescriptor
	isSet bool
}

func (v NullablePropertyDescriptor) Get() *PropertyDescriptor {
	return v.value
}

func (v *NullablePropertyDescriptor) Set(val *PropertyDescriptor) {
	v.value = val
	v.isSet = true
}

func (v NullablePropertyDescriptor) IsSet() bool {
	return v.isSet
}

func (v *NullablePropertyDescriptor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePropertyDescriptor(val *PropertyDescriptor) *NullablePropertyDescriptor {
	return &NullablePropertyDescriptor{value: val, isSet: true}
}

func (v NullablePropertyDescriptor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePropertyDescriptor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


