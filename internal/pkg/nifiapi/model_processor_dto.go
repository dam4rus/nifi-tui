/*
NiFi Rest API

The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.

API version: 2.0.0
Contact: dev@nifi.apache.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nifiapi

import (
	"encoding/json"
)

// checks if the ProcessorDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProcessorDTO{}

// ProcessorDTO struct for ProcessorDTO
type ProcessorDTO struct {
	// The id of the component.
	Id *string `json:"id,omitempty"`
	// The ID of the corresponding component that is under version control
	VersionedComponentId *string `json:"versionedComponentId,omitempty"`
	// The id of parent process group of this component if applicable.
	ParentGroupId *string `json:"parentGroupId,omitempty"`
	Position *PositionDTO `json:"position,omitempty"`
	// The name of the processor.
	Name *string `json:"name,omitempty"`
	// The type of the processor.
	Type *string `json:"type,omitempty"`
	Bundle *BundleDTO `json:"bundle,omitempty"`
	// The state of the processor
	State *string `json:"state,omitempty"`
	// Styles for the processor (background-color : #eee).
	Style *map[string]string `json:"style,omitempty"`
	// The available relationships that the processor currently supports.
	Relationships []RelationshipDTO `json:"relationships,omitempty"`
	// The description of the processor.
	Description *string `json:"description,omitempty"`
	// Whether the processor supports parallel processing.
	SupportsParallelProcessing *bool `json:"supportsParallelProcessing,omitempty"`
	// Whether the processor supports event driven scheduling.
	SupportsEventDriven *bool `json:"supportsEventDriven,omitempty"`
	// Whether the processor supports batching. This makes the run duration settings available.
	SupportsBatching *bool `json:"supportsBatching,omitempty"`
	// Whether the processor supports sensitive dynamic properties.
	SupportsSensitiveDynamicProperties *bool `json:"supportsSensitiveDynamicProperties,omitempty"`
	// Whether the processor persists state.
	PersistsState *bool `json:"persistsState,omitempty"`
	// Whether the processor requires elevated privileges.
	Restricted *bool `json:"restricted,omitempty"`
	// Whether the processor has been deprecated.
	Deprecated *bool `json:"deprecated,omitempty"`
	// Indicates if the execution node of a processor is restricted to run only on the primary node
	ExecutionNodeRestricted *bool `json:"executionNodeRestricted,omitempty"`
	// Whether the processor has multiple versions available.
	MultipleVersionsAvailable *bool `json:"multipleVersionsAvailable,omitempty"`
	// The input requirement for this processor.
	InputRequirement *string `json:"inputRequirement,omitempty"`
	Config *ProcessorConfigDTO `json:"config,omitempty"`
	// The validation errors for the processor. These validation errors represent the problems with the processor that must be resolved before it can be started.
	ValidationErrors []string `json:"validationErrors,omitempty"`
	// Indicates whether the Processor is valid, invalid, or still in the process of validating (i.e., it is unknown whether or not the Processor is valid)
	ValidationStatus *string `json:"validationStatus,omitempty"`
	// Whether the underlying extension is missing.
	ExtensionMissing *bool `json:"extensionMissing,omitempty"`
}

// NewProcessorDTO instantiates a new ProcessorDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProcessorDTO() *ProcessorDTO {
	this := ProcessorDTO{}
	return &this
}

// NewProcessorDTOWithDefaults instantiates a new ProcessorDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProcessorDTOWithDefaults() *ProcessorDTO {
	this := ProcessorDTO{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ProcessorDTO) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessorDTO) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ProcessorDTO) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ProcessorDTO) SetId(v string) {
	o.Id = &v
}

// GetVersionedComponentId returns the VersionedComponentId field value if set, zero value otherwise.
func (o *ProcessorDTO) GetVersionedComponentId() string {
	if o == nil || IsNil(o.VersionedComponentId) {
		var ret string
		return ret
	}
	return *o.VersionedComponentId
}

// GetVersionedComponentIdOk returns a tuple with the VersionedComponentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessorDTO) GetVersionedComponentIdOk() (*string, bool) {
	if o == nil || IsNil(o.VersionedComponentId) {
		return nil, false
	}
	return o.VersionedComponentId, true
}

// HasVersionedComponentId returns a boolean if a field has been set.
func (o *ProcessorDTO) HasVersionedComponentId() bool {
	if o != nil && !IsNil(o.VersionedComponentId) {
		return true
	}

	return false
}

// SetVersionedComponentId gets a reference to the given string and assigns it to the VersionedComponentId field.
func (o *ProcessorDTO) SetVersionedComponentId(v string) {
	o.VersionedComponentId = &v
}

// GetParentGroupId returns the ParentGroupId field value if set, zero value otherwise.
func (o *ProcessorDTO) GetParentGroupId() string {
	if o == nil || IsNil(o.ParentGroupId) {
		var ret string
		return ret
	}
	return *o.ParentGroupId
}

// GetParentGroupIdOk returns a tuple with the ParentGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessorDTO) GetParentGroupIdOk() (*string, bool) {
	if o == nil || IsNil(o.ParentGroupId) {
		return nil, false
	}
	return o.ParentGroupId, true
}

// HasParentGroupId returns a boolean if a field has been set.
func (o *ProcessorDTO) HasParentGroupId() bool {
	if o != nil && !IsNil(o.ParentGroupId) {
		return true
	}

	return false
}

// SetParentGroupId gets a reference to the given string and assigns it to the ParentGroupId field.
func (o *ProcessorDTO) SetParentGroupId(v string) {
	o.ParentGroupId = &v
}

// GetPosition returns the Position field value if set, zero value otherwise.
func (o *ProcessorDTO) GetPosition() PositionDTO {
	if o == nil || IsNil(o.Position) {
		var ret PositionDTO
		return ret
	}
	return *o.Position
}

// GetPositionOk returns a tuple with the Position field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessorDTO) GetPositionOk() (*PositionDTO, bool) {
	if o == nil || IsNil(o.Position) {
		return nil, false
	}
	return o.Position, true
}

// HasPosition returns a boolean if a field has been set.
func (o *ProcessorDTO) HasPosition() bool {
	if o != nil && !IsNil(o.Position) {
		return true
	}

	return false
}

// SetPosition gets a reference to the given PositionDTO and assigns it to the Position field.
func (o *ProcessorDTO) SetPosition(v PositionDTO) {
	o.Position = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ProcessorDTO) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessorDTO) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ProcessorDTO) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ProcessorDTO) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ProcessorDTO) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessorDTO) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ProcessorDTO) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ProcessorDTO) SetType(v string) {
	o.Type = &v
}

// GetBundle returns the Bundle field value if set, zero value otherwise.
func (o *ProcessorDTO) GetBundle() BundleDTO {
	if o == nil || IsNil(o.Bundle) {
		var ret BundleDTO
		return ret
	}
	return *o.Bundle
}

// GetBundleOk returns a tuple with the Bundle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessorDTO) GetBundleOk() (*BundleDTO, bool) {
	if o == nil || IsNil(o.Bundle) {
		return nil, false
	}
	return o.Bundle, true
}

// HasBundle returns a boolean if a field has been set.
func (o *ProcessorDTO) HasBundle() bool {
	if o != nil && !IsNil(o.Bundle) {
		return true
	}

	return false
}

// SetBundle gets a reference to the given BundleDTO and assigns it to the Bundle field.
func (o *ProcessorDTO) SetBundle(v BundleDTO) {
	o.Bundle = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *ProcessorDTO) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessorDTO) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *ProcessorDTO) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *ProcessorDTO) SetState(v string) {
	o.State = &v
}

// GetStyle returns the Style field value if set, zero value otherwise.
func (o *ProcessorDTO) GetStyle() map[string]string {
	if o == nil || IsNil(o.Style) {
		var ret map[string]string
		return ret
	}
	return *o.Style
}

// GetStyleOk returns a tuple with the Style field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessorDTO) GetStyleOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Style) {
		return nil, false
	}
	return o.Style, true
}

// HasStyle returns a boolean if a field has been set.
func (o *ProcessorDTO) HasStyle() bool {
	if o != nil && !IsNil(o.Style) {
		return true
	}

	return false
}

// SetStyle gets a reference to the given map[string]string and assigns it to the Style field.
func (o *ProcessorDTO) SetStyle(v map[string]string) {
	o.Style = &v
}

// GetRelationships returns the Relationships field value if set, zero value otherwise.
func (o *ProcessorDTO) GetRelationships() []RelationshipDTO {
	if o == nil || IsNil(o.Relationships) {
		var ret []RelationshipDTO
		return ret
	}
	return o.Relationships
}

// GetRelationshipsOk returns a tuple with the Relationships field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessorDTO) GetRelationshipsOk() ([]RelationshipDTO, bool) {
	if o == nil || IsNil(o.Relationships) {
		return nil, false
	}
	return o.Relationships, true
}

// HasRelationships returns a boolean if a field has been set.
func (o *ProcessorDTO) HasRelationships() bool {
	if o != nil && !IsNil(o.Relationships) {
		return true
	}

	return false
}

// SetRelationships gets a reference to the given []RelationshipDTO and assigns it to the Relationships field.
func (o *ProcessorDTO) SetRelationships(v []RelationshipDTO) {
	o.Relationships = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ProcessorDTO) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessorDTO) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ProcessorDTO) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ProcessorDTO) SetDescription(v string) {
	o.Description = &v
}

// GetSupportsParallelProcessing returns the SupportsParallelProcessing field value if set, zero value otherwise.
func (o *ProcessorDTO) GetSupportsParallelProcessing() bool {
	if o == nil || IsNil(o.SupportsParallelProcessing) {
		var ret bool
		return ret
	}
	return *o.SupportsParallelProcessing
}

// GetSupportsParallelProcessingOk returns a tuple with the SupportsParallelProcessing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessorDTO) GetSupportsParallelProcessingOk() (*bool, bool) {
	if o == nil || IsNil(o.SupportsParallelProcessing) {
		return nil, false
	}
	return o.SupportsParallelProcessing, true
}

// HasSupportsParallelProcessing returns a boolean if a field has been set.
func (o *ProcessorDTO) HasSupportsParallelProcessing() bool {
	if o != nil && !IsNil(o.SupportsParallelProcessing) {
		return true
	}

	return false
}

// SetSupportsParallelProcessing gets a reference to the given bool and assigns it to the SupportsParallelProcessing field.
func (o *ProcessorDTO) SetSupportsParallelProcessing(v bool) {
	o.SupportsParallelProcessing = &v
}

// GetSupportsEventDriven returns the SupportsEventDriven field value if set, zero value otherwise.
func (o *ProcessorDTO) GetSupportsEventDriven() bool {
	if o == nil || IsNil(o.SupportsEventDriven) {
		var ret bool
		return ret
	}
	return *o.SupportsEventDriven
}

// GetSupportsEventDrivenOk returns a tuple with the SupportsEventDriven field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessorDTO) GetSupportsEventDrivenOk() (*bool, bool) {
	if o == nil || IsNil(o.SupportsEventDriven) {
		return nil, false
	}
	return o.SupportsEventDriven, true
}

// HasSupportsEventDriven returns a boolean if a field has been set.
func (o *ProcessorDTO) HasSupportsEventDriven() bool {
	if o != nil && !IsNil(o.SupportsEventDriven) {
		return true
	}

	return false
}

// SetSupportsEventDriven gets a reference to the given bool and assigns it to the SupportsEventDriven field.
func (o *ProcessorDTO) SetSupportsEventDriven(v bool) {
	o.SupportsEventDriven = &v
}

// GetSupportsBatching returns the SupportsBatching field value if set, zero value otherwise.
func (o *ProcessorDTO) GetSupportsBatching() bool {
	if o == nil || IsNil(o.SupportsBatching) {
		var ret bool
		return ret
	}
	return *o.SupportsBatching
}

// GetSupportsBatchingOk returns a tuple with the SupportsBatching field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessorDTO) GetSupportsBatchingOk() (*bool, bool) {
	if o == nil || IsNil(o.SupportsBatching) {
		return nil, false
	}
	return o.SupportsBatching, true
}

// HasSupportsBatching returns a boolean if a field has been set.
func (o *ProcessorDTO) HasSupportsBatching() bool {
	if o != nil && !IsNil(o.SupportsBatching) {
		return true
	}

	return false
}

// SetSupportsBatching gets a reference to the given bool and assigns it to the SupportsBatching field.
func (o *ProcessorDTO) SetSupportsBatching(v bool) {
	o.SupportsBatching = &v
}

// GetSupportsSensitiveDynamicProperties returns the SupportsSensitiveDynamicProperties field value if set, zero value otherwise.
func (o *ProcessorDTO) GetSupportsSensitiveDynamicProperties() bool {
	if o == nil || IsNil(o.SupportsSensitiveDynamicProperties) {
		var ret bool
		return ret
	}
	return *o.SupportsSensitiveDynamicProperties
}

// GetSupportsSensitiveDynamicPropertiesOk returns a tuple with the SupportsSensitiveDynamicProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessorDTO) GetSupportsSensitiveDynamicPropertiesOk() (*bool, bool) {
	if o == nil || IsNil(o.SupportsSensitiveDynamicProperties) {
		return nil, false
	}
	return o.SupportsSensitiveDynamicProperties, true
}

// HasSupportsSensitiveDynamicProperties returns a boolean if a field has been set.
func (o *ProcessorDTO) HasSupportsSensitiveDynamicProperties() bool {
	if o != nil && !IsNil(o.SupportsSensitiveDynamicProperties) {
		return true
	}

	return false
}

// SetSupportsSensitiveDynamicProperties gets a reference to the given bool and assigns it to the SupportsSensitiveDynamicProperties field.
func (o *ProcessorDTO) SetSupportsSensitiveDynamicProperties(v bool) {
	o.SupportsSensitiveDynamicProperties = &v
}

// GetPersistsState returns the PersistsState field value if set, zero value otherwise.
func (o *ProcessorDTO) GetPersistsState() bool {
	if o == nil || IsNil(o.PersistsState) {
		var ret bool
		return ret
	}
	return *o.PersistsState
}

// GetPersistsStateOk returns a tuple with the PersistsState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessorDTO) GetPersistsStateOk() (*bool, bool) {
	if o == nil || IsNil(o.PersistsState) {
		return nil, false
	}
	return o.PersistsState, true
}

// HasPersistsState returns a boolean if a field has been set.
func (o *ProcessorDTO) HasPersistsState() bool {
	if o != nil && !IsNil(o.PersistsState) {
		return true
	}

	return false
}

// SetPersistsState gets a reference to the given bool and assigns it to the PersistsState field.
func (o *ProcessorDTO) SetPersistsState(v bool) {
	o.PersistsState = &v
}

// GetRestricted returns the Restricted field value if set, zero value otherwise.
func (o *ProcessorDTO) GetRestricted() bool {
	if o == nil || IsNil(o.Restricted) {
		var ret bool
		return ret
	}
	return *o.Restricted
}

// GetRestrictedOk returns a tuple with the Restricted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessorDTO) GetRestrictedOk() (*bool, bool) {
	if o == nil || IsNil(o.Restricted) {
		return nil, false
	}
	return o.Restricted, true
}

// HasRestricted returns a boolean if a field has been set.
func (o *ProcessorDTO) HasRestricted() bool {
	if o != nil && !IsNil(o.Restricted) {
		return true
	}

	return false
}

// SetRestricted gets a reference to the given bool and assigns it to the Restricted field.
func (o *ProcessorDTO) SetRestricted(v bool) {
	o.Restricted = &v
}

// GetDeprecated returns the Deprecated field value if set, zero value otherwise.
func (o *ProcessorDTO) GetDeprecated() bool {
	if o == nil || IsNil(o.Deprecated) {
		var ret bool
		return ret
	}
	return *o.Deprecated
}

// GetDeprecatedOk returns a tuple with the Deprecated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessorDTO) GetDeprecatedOk() (*bool, bool) {
	if o == nil || IsNil(o.Deprecated) {
		return nil, false
	}
	return o.Deprecated, true
}

// HasDeprecated returns a boolean if a field has been set.
func (o *ProcessorDTO) HasDeprecated() bool {
	if o != nil && !IsNil(o.Deprecated) {
		return true
	}

	return false
}

// SetDeprecated gets a reference to the given bool and assigns it to the Deprecated field.
func (o *ProcessorDTO) SetDeprecated(v bool) {
	o.Deprecated = &v
}

// GetExecutionNodeRestricted returns the ExecutionNodeRestricted field value if set, zero value otherwise.
func (o *ProcessorDTO) GetExecutionNodeRestricted() bool {
	if o == nil || IsNil(o.ExecutionNodeRestricted) {
		var ret bool
		return ret
	}
	return *o.ExecutionNodeRestricted
}

// GetExecutionNodeRestrictedOk returns a tuple with the ExecutionNodeRestricted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessorDTO) GetExecutionNodeRestrictedOk() (*bool, bool) {
	if o == nil || IsNil(o.ExecutionNodeRestricted) {
		return nil, false
	}
	return o.ExecutionNodeRestricted, true
}

// HasExecutionNodeRestricted returns a boolean if a field has been set.
func (o *ProcessorDTO) HasExecutionNodeRestricted() bool {
	if o != nil && !IsNil(o.ExecutionNodeRestricted) {
		return true
	}

	return false
}

// SetExecutionNodeRestricted gets a reference to the given bool and assigns it to the ExecutionNodeRestricted field.
func (o *ProcessorDTO) SetExecutionNodeRestricted(v bool) {
	o.ExecutionNodeRestricted = &v
}

// GetMultipleVersionsAvailable returns the MultipleVersionsAvailable field value if set, zero value otherwise.
func (o *ProcessorDTO) GetMultipleVersionsAvailable() bool {
	if o == nil || IsNil(o.MultipleVersionsAvailable) {
		var ret bool
		return ret
	}
	return *o.MultipleVersionsAvailable
}

// GetMultipleVersionsAvailableOk returns a tuple with the MultipleVersionsAvailable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessorDTO) GetMultipleVersionsAvailableOk() (*bool, bool) {
	if o == nil || IsNil(o.MultipleVersionsAvailable) {
		return nil, false
	}
	return o.MultipleVersionsAvailable, true
}

// HasMultipleVersionsAvailable returns a boolean if a field has been set.
func (o *ProcessorDTO) HasMultipleVersionsAvailable() bool {
	if o != nil && !IsNil(o.MultipleVersionsAvailable) {
		return true
	}

	return false
}

// SetMultipleVersionsAvailable gets a reference to the given bool and assigns it to the MultipleVersionsAvailable field.
func (o *ProcessorDTO) SetMultipleVersionsAvailable(v bool) {
	o.MultipleVersionsAvailable = &v
}

// GetInputRequirement returns the InputRequirement field value if set, zero value otherwise.
func (o *ProcessorDTO) GetInputRequirement() string {
	if o == nil || IsNil(o.InputRequirement) {
		var ret string
		return ret
	}
	return *o.InputRequirement
}

// GetInputRequirementOk returns a tuple with the InputRequirement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessorDTO) GetInputRequirementOk() (*string, bool) {
	if o == nil || IsNil(o.InputRequirement) {
		return nil, false
	}
	return o.InputRequirement, true
}

// HasInputRequirement returns a boolean if a field has been set.
func (o *ProcessorDTO) HasInputRequirement() bool {
	if o != nil && !IsNil(o.InputRequirement) {
		return true
	}

	return false
}

// SetInputRequirement gets a reference to the given string and assigns it to the InputRequirement field.
func (o *ProcessorDTO) SetInputRequirement(v string) {
	o.InputRequirement = &v
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *ProcessorDTO) GetConfig() ProcessorConfigDTO {
	if o == nil || IsNil(o.Config) {
		var ret ProcessorConfigDTO
		return ret
	}
	return *o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessorDTO) GetConfigOk() (*ProcessorConfigDTO, bool) {
	if o == nil || IsNil(o.Config) {
		return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *ProcessorDTO) HasConfig() bool {
	if o != nil && !IsNil(o.Config) {
		return true
	}

	return false
}

// SetConfig gets a reference to the given ProcessorConfigDTO and assigns it to the Config field.
func (o *ProcessorDTO) SetConfig(v ProcessorConfigDTO) {
	o.Config = &v
}

// GetValidationErrors returns the ValidationErrors field value if set, zero value otherwise.
func (o *ProcessorDTO) GetValidationErrors() []string {
	if o == nil || IsNil(o.ValidationErrors) {
		var ret []string
		return ret
	}
	return o.ValidationErrors
}

// GetValidationErrorsOk returns a tuple with the ValidationErrors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessorDTO) GetValidationErrorsOk() ([]string, bool) {
	if o == nil || IsNil(o.ValidationErrors) {
		return nil, false
	}
	return o.ValidationErrors, true
}

// HasValidationErrors returns a boolean if a field has been set.
func (o *ProcessorDTO) HasValidationErrors() bool {
	if o != nil && !IsNil(o.ValidationErrors) {
		return true
	}

	return false
}

// SetValidationErrors gets a reference to the given []string and assigns it to the ValidationErrors field.
func (o *ProcessorDTO) SetValidationErrors(v []string) {
	o.ValidationErrors = v
}

// GetValidationStatus returns the ValidationStatus field value if set, zero value otherwise.
func (o *ProcessorDTO) GetValidationStatus() string {
	if o == nil || IsNil(o.ValidationStatus) {
		var ret string
		return ret
	}
	return *o.ValidationStatus
}

// GetValidationStatusOk returns a tuple with the ValidationStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessorDTO) GetValidationStatusOk() (*string, bool) {
	if o == nil || IsNil(o.ValidationStatus) {
		return nil, false
	}
	return o.ValidationStatus, true
}

// HasValidationStatus returns a boolean if a field has been set.
func (o *ProcessorDTO) HasValidationStatus() bool {
	if o != nil && !IsNil(o.ValidationStatus) {
		return true
	}

	return false
}

// SetValidationStatus gets a reference to the given string and assigns it to the ValidationStatus field.
func (o *ProcessorDTO) SetValidationStatus(v string) {
	o.ValidationStatus = &v
}

// GetExtensionMissing returns the ExtensionMissing field value if set, zero value otherwise.
func (o *ProcessorDTO) GetExtensionMissing() bool {
	if o == nil || IsNil(o.ExtensionMissing) {
		var ret bool
		return ret
	}
	return *o.ExtensionMissing
}

// GetExtensionMissingOk returns a tuple with the ExtensionMissing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessorDTO) GetExtensionMissingOk() (*bool, bool) {
	if o == nil || IsNil(o.ExtensionMissing) {
		return nil, false
	}
	return o.ExtensionMissing, true
}

// HasExtensionMissing returns a boolean if a field has been set.
func (o *ProcessorDTO) HasExtensionMissing() bool {
	if o != nil && !IsNil(o.ExtensionMissing) {
		return true
	}

	return false
}

// SetExtensionMissing gets a reference to the given bool and assigns it to the ExtensionMissing field.
func (o *ProcessorDTO) SetExtensionMissing(v bool) {
	o.ExtensionMissing = &v
}

func (o ProcessorDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProcessorDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.VersionedComponentId) {
		toSerialize["versionedComponentId"] = o.VersionedComponentId
	}
	if !IsNil(o.ParentGroupId) {
		toSerialize["parentGroupId"] = o.ParentGroupId
	}
	if !IsNil(o.Position) {
		toSerialize["position"] = o.Position
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Bundle) {
		toSerialize["bundle"] = o.Bundle
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.Style) {
		toSerialize["style"] = o.Style
	}
	if !IsNil(o.Relationships) {
		toSerialize["relationships"] = o.Relationships
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.SupportsParallelProcessing) {
		toSerialize["supportsParallelProcessing"] = o.SupportsParallelProcessing
	}
	if !IsNil(o.SupportsEventDriven) {
		toSerialize["supportsEventDriven"] = o.SupportsEventDriven
	}
	if !IsNil(o.SupportsBatching) {
		toSerialize["supportsBatching"] = o.SupportsBatching
	}
	if !IsNil(o.SupportsSensitiveDynamicProperties) {
		toSerialize["supportsSensitiveDynamicProperties"] = o.SupportsSensitiveDynamicProperties
	}
	if !IsNil(o.PersistsState) {
		toSerialize["persistsState"] = o.PersistsState
	}
	if !IsNil(o.Restricted) {
		toSerialize["restricted"] = o.Restricted
	}
	if !IsNil(o.Deprecated) {
		toSerialize["deprecated"] = o.Deprecated
	}
	if !IsNil(o.ExecutionNodeRestricted) {
		toSerialize["executionNodeRestricted"] = o.ExecutionNodeRestricted
	}
	if !IsNil(o.MultipleVersionsAvailable) {
		toSerialize["multipleVersionsAvailable"] = o.MultipleVersionsAvailable
	}
	if !IsNil(o.InputRequirement) {
		toSerialize["inputRequirement"] = o.InputRequirement
	}
	if !IsNil(o.Config) {
		toSerialize["config"] = o.Config
	}
	if !IsNil(o.ValidationErrors) {
		toSerialize["validationErrors"] = o.ValidationErrors
	}
	if !IsNil(o.ValidationStatus) {
		toSerialize["validationStatus"] = o.ValidationStatus
	}
	if !IsNil(o.ExtensionMissing) {
		toSerialize["extensionMissing"] = o.ExtensionMissing
	}
	return toSerialize, nil
}

type NullableProcessorDTO struct {
	value *ProcessorDTO
	isSet bool
}

func (v NullableProcessorDTO) Get() *ProcessorDTO {
	return v.value
}

func (v *NullableProcessorDTO) Set(val *ProcessorDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableProcessorDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableProcessorDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProcessorDTO(val *ProcessorDTO) *NullableProcessorDTO {
	return &NullableProcessorDTO{value: val, isSet: true}
}

func (v NullableProcessorDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProcessorDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


