/*
NiFi Rest API

The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.

API version: 2.0.0
Contact: dev@nifi.apache.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nifiapi

import (
	"encoding/json"
)

// checks if the CountersEntity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CountersEntity{}

// CountersEntity struct for CountersEntity
type CountersEntity struct {
	Counters *CountersDTO `json:"counters,omitempty"`
}

// NewCountersEntity instantiates a new CountersEntity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCountersEntity() *CountersEntity {
	this := CountersEntity{}
	return &this
}

// NewCountersEntityWithDefaults instantiates a new CountersEntity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCountersEntityWithDefaults() *CountersEntity {
	this := CountersEntity{}
	return &this
}

// GetCounters returns the Counters field value if set, zero value otherwise.
func (o *CountersEntity) GetCounters() CountersDTO {
	if o == nil || IsNil(o.Counters) {
		var ret CountersDTO
		return ret
	}
	return *o.Counters
}

// GetCountersOk returns a tuple with the Counters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountersEntity) GetCountersOk() (*CountersDTO, bool) {
	if o == nil || IsNil(o.Counters) {
		return nil, false
	}
	return o.Counters, true
}

// HasCounters returns a boolean if a field has been set.
func (o *CountersEntity) HasCounters() bool {
	if o != nil && !IsNil(o.Counters) {
		return true
	}

	return false
}

// SetCounters gets a reference to the given CountersDTO and assigns it to the Counters field.
func (o *CountersEntity) SetCounters(v CountersDTO) {
	o.Counters = &v
}

func (o CountersEntity) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CountersEntity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Counters) {
		toSerialize["counters"] = o.Counters
	}
	return toSerialize, nil
}

type NullableCountersEntity struct {
	value *CountersEntity
	isSet bool
}

func (v NullableCountersEntity) Get() *CountersEntity {
	return v.value
}

func (v *NullableCountersEntity) Set(val *CountersEntity) {
	v.value = val
	v.isSet = true
}

func (v NullableCountersEntity) IsSet() bool {
	return v.isSet
}

func (v *NullableCountersEntity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCountersEntity(val *CountersEntity) *NullableCountersEntity {
	return &NullableCountersEntity{value: val, isSet: true}
}

func (v NullableCountersEntity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCountersEntity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


