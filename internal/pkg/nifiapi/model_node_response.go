/*
NiFi Rest API

The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.

API version: 2.0.0
Contact: dev@nifi.apache.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nifiapi

import (
	"encoding/json"
)

// checks if the NodeResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NodeResponse{}

// NodeResponse struct for NodeResponse
type NodeResponse struct {
	HttpMethod *string `json:"httpMethod,omitempty"`
	RequestUri *string `json:"requestUri,omitempty"`
	Response *Response `json:"response,omitempty"`
	NodeId *NodeIdentifier `json:"nodeId,omitempty"`
	Throwable *Throwable `json:"throwable,omitempty"`
	UpdatedEntity map[string]interface{} `json:"updatedEntity,omitempty"`
	RequestId *string `json:"requestId,omitempty"`
	InputStream map[string]interface{} `json:"inputStream,omitempty"`
	Status *int32 `json:"status,omitempty"`
	ClientResponse *Response `json:"clientResponse,omitempty"`
	Is5xx *bool `json:"is5xx,omitempty"`
	Is2xx *bool `json:"is2xx,omitempty"`
}

// NewNodeResponse instantiates a new NodeResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodeResponse() *NodeResponse {
	this := NodeResponse{}
	return &this
}

// NewNodeResponseWithDefaults instantiates a new NodeResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodeResponseWithDefaults() *NodeResponse {
	this := NodeResponse{}
	return &this
}

// GetHttpMethod returns the HttpMethod field value if set, zero value otherwise.
func (o *NodeResponse) GetHttpMethod() string {
	if o == nil || IsNil(o.HttpMethod) {
		var ret string
		return ret
	}
	return *o.HttpMethod
}

// GetHttpMethodOk returns a tuple with the HttpMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeResponse) GetHttpMethodOk() (*string, bool) {
	if o == nil || IsNil(o.HttpMethod) {
		return nil, false
	}
	return o.HttpMethod, true
}

// HasHttpMethod returns a boolean if a field has been set.
func (o *NodeResponse) HasHttpMethod() bool {
	if o != nil && !IsNil(o.HttpMethod) {
		return true
	}

	return false
}

// SetHttpMethod gets a reference to the given string and assigns it to the HttpMethod field.
func (o *NodeResponse) SetHttpMethod(v string) {
	o.HttpMethod = &v
}

// GetRequestUri returns the RequestUri field value if set, zero value otherwise.
func (o *NodeResponse) GetRequestUri() string {
	if o == nil || IsNil(o.RequestUri) {
		var ret string
		return ret
	}
	return *o.RequestUri
}

// GetRequestUriOk returns a tuple with the RequestUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeResponse) GetRequestUriOk() (*string, bool) {
	if o == nil || IsNil(o.RequestUri) {
		return nil, false
	}
	return o.RequestUri, true
}

// HasRequestUri returns a boolean if a field has been set.
func (o *NodeResponse) HasRequestUri() bool {
	if o != nil && !IsNil(o.RequestUri) {
		return true
	}

	return false
}

// SetRequestUri gets a reference to the given string and assigns it to the RequestUri field.
func (o *NodeResponse) SetRequestUri(v string) {
	o.RequestUri = &v
}

// GetResponse returns the Response field value if set, zero value otherwise.
func (o *NodeResponse) GetResponse() Response {
	if o == nil || IsNil(o.Response) {
		var ret Response
		return ret
	}
	return *o.Response
}

// GetResponseOk returns a tuple with the Response field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeResponse) GetResponseOk() (*Response, bool) {
	if o == nil || IsNil(o.Response) {
		return nil, false
	}
	return o.Response, true
}

// HasResponse returns a boolean if a field has been set.
func (o *NodeResponse) HasResponse() bool {
	if o != nil && !IsNil(o.Response) {
		return true
	}

	return false
}

// SetResponse gets a reference to the given Response and assigns it to the Response field.
func (o *NodeResponse) SetResponse(v Response) {
	o.Response = &v
}

// GetNodeId returns the NodeId field value if set, zero value otherwise.
func (o *NodeResponse) GetNodeId() NodeIdentifier {
	if o == nil || IsNil(o.NodeId) {
		var ret NodeIdentifier
		return ret
	}
	return *o.NodeId
}

// GetNodeIdOk returns a tuple with the NodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeResponse) GetNodeIdOk() (*NodeIdentifier, bool) {
	if o == nil || IsNil(o.NodeId) {
		return nil, false
	}
	return o.NodeId, true
}

// HasNodeId returns a boolean if a field has been set.
func (o *NodeResponse) HasNodeId() bool {
	if o != nil && !IsNil(o.NodeId) {
		return true
	}

	return false
}

// SetNodeId gets a reference to the given NodeIdentifier and assigns it to the NodeId field.
func (o *NodeResponse) SetNodeId(v NodeIdentifier) {
	o.NodeId = &v
}

// GetThrowable returns the Throwable field value if set, zero value otherwise.
func (o *NodeResponse) GetThrowable() Throwable {
	if o == nil || IsNil(o.Throwable) {
		var ret Throwable
		return ret
	}
	return *o.Throwable
}

// GetThrowableOk returns a tuple with the Throwable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeResponse) GetThrowableOk() (*Throwable, bool) {
	if o == nil || IsNil(o.Throwable) {
		return nil, false
	}
	return o.Throwable, true
}

// HasThrowable returns a boolean if a field has been set.
func (o *NodeResponse) HasThrowable() bool {
	if o != nil && !IsNil(o.Throwable) {
		return true
	}

	return false
}

// SetThrowable gets a reference to the given Throwable and assigns it to the Throwable field.
func (o *NodeResponse) SetThrowable(v Throwable) {
	o.Throwable = &v
}

// GetUpdatedEntity returns the UpdatedEntity field value if set, zero value otherwise.
func (o *NodeResponse) GetUpdatedEntity() map[string]interface{} {
	if o == nil || IsNil(o.UpdatedEntity) {
		var ret map[string]interface{}
		return ret
	}
	return o.UpdatedEntity
}

// GetUpdatedEntityOk returns a tuple with the UpdatedEntity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeResponse) GetUpdatedEntityOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.UpdatedEntity) {
		return map[string]interface{}{}, false
	}
	return o.UpdatedEntity, true
}

// HasUpdatedEntity returns a boolean if a field has been set.
func (o *NodeResponse) HasUpdatedEntity() bool {
	if o != nil && !IsNil(o.UpdatedEntity) {
		return true
	}

	return false
}

// SetUpdatedEntity gets a reference to the given map[string]interface{} and assigns it to the UpdatedEntity field.
func (o *NodeResponse) SetUpdatedEntity(v map[string]interface{}) {
	o.UpdatedEntity = v
}

// GetRequestId returns the RequestId field value if set, zero value otherwise.
func (o *NodeResponse) GetRequestId() string {
	if o == nil || IsNil(o.RequestId) {
		var ret string
		return ret
	}
	return *o.RequestId
}

// GetRequestIdOk returns a tuple with the RequestId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeResponse) GetRequestIdOk() (*string, bool) {
	if o == nil || IsNil(o.RequestId) {
		return nil, false
	}
	return o.RequestId, true
}

// HasRequestId returns a boolean if a field has been set.
func (o *NodeResponse) HasRequestId() bool {
	if o != nil && !IsNil(o.RequestId) {
		return true
	}

	return false
}

// SetRequestId gets a reference to the given string and assigns it to the RequestId field.
func (o *NodeResponse) SetRequestId(v string) {
	o.RequestId = &v
}

// GetInputStream returns the InputStream field value if set, zero value otherwise.
func (o *NodeResponse) GetInputStream() map[string]interface{} {
	if o == nil || IsNil(o.InputStream) {
		var ret map[string]interface{}
		return ret
	}
	return o.InputStream
}

// GetInputStreamOk returns a tuple with the InputStream field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeResponse) GetInputStreamOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.InputStream) {
		return map[string]interface{}{}, false
	}
	return o.InputStream, true
}

// HasInputStream returns a boolean if a field has been set.
func (o *NodeResponse) HasInputStream() bool {
	if o != nil && !IsNil(o.InputStream) {
		return true
	}

	return false
}

// SetInputStream gets a reference to the given map[string]interface{} and assigns it to the InputStream field.
func (o *NodeResponse) SetInputStream(v map[string]interface{}) {
	o.InputStream = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *NodeResponse) GetStatus() int32 {
	if o == nil || IsNil(o.Status) {
		var ret int32
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeResponse) GetStatusOk() (*int32, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *NodeResponse) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given int32 and assigns it to the Status field.
func (o *NodeResponse) SetStatus(v int32) {
	o.Status = &v
}

// GetClientResponse returns the ClientResponse field value if set, zero value otherwise.
func (o *NodeResponse) GetClientResponse() Response {
	if o == nil || IsNil(o.ClientResponse) {
		var ret Response
		return ret
	}
	return *o.ClientResponse
}

// GetClientResponseOk returns a tuple with the ClientResponse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeResponse) GetClientResponseOk() (*Response, bool) {
	if o == nil || IsNil(o.ClientResponse) {
		return nil, false
	}
	return o.ClientResponse, true
}

// HasClientResponse returns a boolean if a field has been set.
func (o *NodeResponse) HasClientResponse() bool {
	if o != nil && !IsNil(o.ClientResponse) {
		return true
	}

	return false
}

// SetClientResponse gets a reference to the given Response and assigns it to the ClientResponse field.
func (o *NodeResponse) SetClientResponse(v Response) {
	o.ClientResponse = &v
}

// GetIs5xx returns the Is5xx field value if set, zero value otherwise.
func (o *NodeResponse) GetIs5xx() bool {
	if o == nil || IsNil(o.Is5xx) {
		var ret bool
		return ret
	}
	return *o.Is5xx
}

// GetIs5xxOk returns a tuple with the Is5xx field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeResponse) GetIs5xxOk() (*bool, bool) {
	if o == nil || IsNil(o.Is5xx) {
		return nil, false
	}
	return o.Is5xx, true
}

// HasIs5xx returns a boolean if a field has been set.
func (o *NodeResponse) HasIs5xx() bool {
	if o != nil && !IsNil(o.Is5xx) {
		return true
	}

	return false
}

// SetIs5xx gets a reference to the given bool and assigns it to the Is5xx field.
func (o *NodeResponse) SetIs5xx(v bool) {
	o.Is5xx = &v
}

// GetIs2xx returns the Is2xx field value if set, zero value otherwise.
func (o *NodeResponse) GetIs2xx() bool {
	if o == nil || IsNil(o.Is2xx) {
		var ret bool
		return ret
	}
	return *o.Is2xx
}

// GetIs2xxOk returns a tuple with the Is2xx field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeResponse) GetIs2xxOk() (*bool, bool) {
	if o == nil || IsNil(o.Is2xx) {
		return nil, false
	}
	return o.Is2xx, true
}

// HasIs2xx returns a boolean if a field has been set.
func (o *NodeResponse) HasIs2xx() bool {
	if o != nil && !IsNil(o.Is2xx) {
		return true
	}

	return false
}

// SetIs2xx gets a reference to the given bool and assigns it to the Is2xx field.
func (o *NodeResponse) SetIs2xx(v bool) {
	o.Is2xx = &v
}

func (o NodeResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NodeResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HttpMethod) {
		toSerialize["httpMethod"] = o.HttpMethod
	}
	if !IsNil(o.RequestUri) {
		toSerialize["requestUri"] = o.RequestUri
	}
	if !IsNil(o.Response) {
		toSerialize["response"] = o.Response
	}
	if !IsNil(o.NodeId) {
		toSerialize["nodeId"] = o.NodeId
	}
	if !IsNil(o.Throwable) {
		toSerialize["throwable"] = o.Throwable
	}
	if !IsNil(o.UpdatedEntity) {
		toSerialize["updatedEntity"] = o.UpdatedEntity
	}
	if !IsNil(o.RequestId) {
		toSerialize["requestId"] = o.RequestId
	}
	if !IsNil(o.InputStream) {
		toSerialize["inputStream"] = o.InputStream
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.ClientResponse) {
		toSerialize["clientResponse"] = o.ClientResponse
	}
	if !IsNil(o.Is5xx) {
		toSerialize["is5xx"] = o.Is5xx
	}
	if !IsNil(o.Is2xx) {
		toSerialize["is2xx"] = o.Is2xx
	}
	return toSerialize, nil
}

type NullableNodeResponse struct {
	value *NodeResponse
	isSet bool
}

func (v NullableNodeResponse) Get() *NodeResponse {
	return v.value
}

func (v *NullableNodeResponse) Set(val *NodeResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableNodeResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableNodeResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodeResponse(val *NodeResponse) *NullableNodeResponse {
	return &NullableNodeResponse{value: val, isSet: true}
}

func (v NullableNodeResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodeResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


