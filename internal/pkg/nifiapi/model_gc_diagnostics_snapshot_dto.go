/*
NiFi Rest API

The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.

API version: 2.0.0
Contact: dev@nifi.apache.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nifiapi

import (
	"encoding/json"
	"time"
)

// checks if the GCDiagnosticsSnapshotDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GCDiagnosticsSnapshotDTO{}

// GCDiagnosticsSnapshotDTO struct for GCDiagnosticsSnapshotDTO
type GCDiagnosticsSnapshotDTO struct {
	// The timestamp of when the Snapshot was taken
	Timestamp *time.Time `json:"timestamp,omitempty"`
	// The number of times that Garbage Collection has occurred
	CollectionCount *int64 `json:"collectionCount,omitempty"`
	// The number of milliseconds that the Garbage Collector spent performing Garbage Collection duties
	CollectionMillis *int64 `json:"collectionMillis,omitempty"`
}

// NewGCDiagnosticsSnapshotDTO instantiates a new GCDiagnosticsSnapshotDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGCDiagnosticsSnapshotDTO() *GCDiagnosticsSnapshotDTO {
	this := GCDiagnosticsSnapshotDTO{}
	return &this
}

// NewGCDiagnosticsSnapshotDTOWithDefaults instantiates a new GCDiagnosticsSnapshotDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGCDiagnosticsSnapshotDTOWithDefaults() *GCDiagnosticsSnapshotDTO {
	this := GCDiagnosticsSnapshotDTO{}
	return &this
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *GCDiagnosticsSnapshotDTO) GetTimestamp() time.Time {
	if o == nil || IsNil(o.Timestamp) {
		var ret time.Time
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GCDiagnosticsSnapshotDTO) GetTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *GCDiagnosticsSnapshotDTO) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given time.Time and assigns it to the Timestamp field.
func (o *GCDiagnosticsSnapshotDTO) SetTimestamp(v time.Time) {
	o.Timestamp = &v
}

// GetCollectionCount returns the CollectionCount field value if set, zero value otherwise.
func (o *GCDiagnosticsSnapshotDTO) GetCollectionCount() int64 {
	if o == nil || IsNil(o.CollectionCount) {
		var ret int64
		return ret
	}
	return *o.CollectionCount
}

// GetCollectionCountOk returns a tuple with the CollectionCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GCDiagnosticsSnapshotDTO) GetCollectionCountOk() (*int64, bool) {
	if o == nil || IsNil(o.CollectionCount) {
		return nil, false
	}
	return o.CollectionCount, true
}

// HasCollectionCount returns a boolean if a field has been set.
func (o *GCDiagnosticsSnapshotDTO) HasCollectionCount() bool {
	if o != nil && !IsNil(o.CollectionCount) {
		return true
	}

	return false
}

// SetCollectionCount gets a reference to the given int64 and assigns it to the CollectionCount field.
func (o *GCDiagnosticsSnapshotDTO) SetCollectionCount(v int64) {
	o.CollectionCount = &v
}

// GetCollectionMillis returns the CollectionMillis field value if set, zero value otherwise.
func (o *GCDiagnosticsSnapshotDTO) GetCollectionMillis() int64 {
	if o == nil || IsNil(o.CollectionMillis) {
		var ret int64
		return ret
	}
	return *o.CollectionMillis
}

// GetCollectionMillisOk returns a tuple with the CollectionMillis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GCDiagnosticsSnapshotDTO) GetCollectionMillisOk() (*int64, bool) {
	if o == nil || IsNil(o.CollectionMillis) {
		return nil, false
	}
	return o.CollectionMillis, true
}

// HasCollectionMillis returns a boolean if a field has been set.
func (o *GCDiagnosticsSnapshotDTO) HasCollectionMillis() bool {
	if o != nil && !IsNil(o.CollectionMillis) {
		return true
	}

	return false
}

// SetCollectionMillis gets a reference to the given int64 and assigns it to the CollectionMillis field.
func (o *GCDiagnosticsSnapshotDTO) SetCollectionMillis(v int64) {
	o.CollectionMillis = &v
}

func (o GCDiagnosticsSnapshotDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GCDiagnosticsSnapshotDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	if !IsNil(o.CollectionCount) {
		toSerialize["collectionCount"] = o.CollectionCount
	}
	if !IsNil(o.CollectionMillis) {
		toSerialize["collectionMillis"] = o.CollectionMillis
	}
	return toSerialize, nil
}

type NullableGCDiagnosticsSnapshotDTO struct {
	value *GCDiagnosticsSnapshotDTO
	isSet bool
}

func (v NullableGCDiagnosticsSnapshotDTO) Get() *GCDiagnosticsSnapshotDTO {
	return v.value
}

func (v *NullableGCDiagnosticsSnapshotDTO) Set(val *GCDiagnosticsSnapshotDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableGCDiagnosticsSnapshotDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableGCDiagnosticsSnapshotDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGCDiagnosticsSnapshotDTO(val *GCDiagnosticsSnapshotDTO) *NullableGCDiagnosticsSnapshotDTO {
	return &NullableGCDiagnosticsSnapshotDTO{value: val, isSet: true}
}

func (v NullableGCDiagnosticsSnapshotDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGCDiagnosticsSnapshotDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


