/*
NiFi Rest API

The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.

API version: 2.0.0
Contact: dev@nifi.apache.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nifiapi

import (
	"encoding/json"
)

// checks if the PropertyResourceDefinition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PropertyResourceDefinition{}

// PropertyResourceDefinition struct for PropertyResourceDefinition
type PropertyResourceDefinition struct {
	// The cardinality of the resource definition (i.e. single or multiple)
	Cardinality *string `json:"cardinality,omitempty"`
	// The types of resources that can be referenced
	ResourceTypes []string `json:"resourceTypes,omitempty"`
}

// NewPropertyResourceDefinition instantiates a new PropertyResourceDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPropertyResourceDefinition() *PropertyResourceDefinition {
	this := PropertyResourceDefinition{}
	return &this
}

// NewPropertyResourceDefinitionWithDefaults instantiates a new PropertyResourceDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPropertyResourceDefinitionWithDefaults() *PropertyResourceDefinition {
	this := PropertyResourceDefinition{}
	return &this
}

// GetCardinality returns the Cardinality field value if set, zero value otherwise.
func (o *PropertyResourceDefinition) GetCardinality() string {
	if o == nil || IsNil(o.Cardinality) {
		var ret string
		return ret
	}
	return *o.Cardinality
}

// GetCardinalityOk returns a tuple with the Cardinality field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertyResourceDefinition) GetCardinalityOk() (*string, bool) {
	if o == nil || IsNil(o.Cardinality) {
		return nil, false
	}
	return o.Cardinality, true
}

// HasCardinality returns a boolean if a field has been set.
func (o *PropertyResourceDefinition) HasCardinality() bool {
	if o != nil && !IsNil(o.Cardinality) {
		return true
	}

	return false
}

// SetCardinality gets a reference to the given string and assigns it to the Cardinality field.
func (o *PropertyResourceDefinition) SetCardinality(v string) {
	o.Cardinality = &v
}

// GetResourceTypes returns the ResourceTypes field value if set, zero value otherwise.
func (o *PropertyResourceDefinition) GetResourceTypes() []string {
	if o == nil || IsNil(o.ResourceTypes) {
		var ret []string
		return ret
	}
	return o.ResourceTypes
}

// GetResourceTypesOk returns a tuple with the ResourceTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertyResourceDefinition) GetResourceTypesOk() ([]string, bool) {
	if o == nil || IsNil(o.ResourceTypes) {
		return nil, false
	}
	return o.ResourceTypes, true
}

// HasResourceTypes returns a boolean if a field has been set.
func (o *PropertyResourceDefinition) HasResourceTypes() bool {
	if o != nil && !IsNil(o.ResourceTypes) {
		return true
	}

	return false
}

// SetResourceTypes gets a reference to the given []string and assigns it to the ResourceTypes field.
func (o *PropertyResourceDefinition) SetResourceTypes(v []string) {
	o.ResourceTypes = v
}

func (o PropertyResourceDefinition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PropertyResourceDefinition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Cardinality) {
		toSerialize["cardinality"] = o.Cardinality
	}
	if !IsNil(o.ResourceTypes) {
		toSerialize["resourceTypes"] = o.ResourceTypes
	}
	return toSerialize, nil
}

type NullablePropertyResourceDefinition struct {
	value *PropertyResourceDefinition
	isSet bool
}

func (v NullablePropertyResourceDefinition) Get() *PropertyResourceDefinition {
	return v.value
}

func (v *NullablePropertyResourceDefinition) Set(val *PropertyResourceDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullablePropertyResourceDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullablePropertyResourceDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePropertyResourceDefinition(val *PropertyResourceDefinition) *NullablePropertyResourceDefinition {
	return &NullablePropertyResourceDefinition{value: val, isSet: true}
}

func (v NullablePropertyResourceDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePropertyResourceDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


