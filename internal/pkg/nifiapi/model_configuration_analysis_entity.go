/*
NiFi Rest API

The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.

API version: 2.0.0
Contact: dev@nifi.apache.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nifiapi

import (
	"encoding/json"
)

// checks if the ConfigurationAnalysisEntity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigurationAnalysisEntity{}

// ConfigurationAnalysisEntity struct for ConfigurationAnalysisEntity
type ConfigurationAnalysisEntity struct {
	ConfigurationAnalysis *ConfigurationAnalysisDTO `json:"configurationAnalysis,omitempty"`
}

// NewConfigurationAnalysisEntity instantiates a new ConfigurationAnalysisEntity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigurationAnalysisEntity() *ConfigurationAnalysisEntity {
	this := ConfigurationAnalysisEntity{}
	return &this
}

// NewConfigurationAnalysisEntityWithDefaults instantiates a new ConfigurationAnalysisEntity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigurationAnalysisEntityWithDefaults() *ConfigurationAnalysisEntity {
	this := ConfigurationAnalysisEntity{}
	return &this
}

// GetConfigurationAnalysis returns the ConfigurationAnalysis field value if set, zero value otherwise.
func (o *ConfigurationAnalysisEntity) GetConfigurationAnalysis() ConfigurationAnalysisDTO {
	if o == nil || IsNil(o.ConfigurationAnalysis) {
		var ret ConfigurationAnalysisDTO
		return ret
	}
	return *o.ConfigurationAnalysis
}

// GetConfigurationAnalysisOk returns a tuple with the ConfigurationAnalysis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationAnalysisEntity) GetConfigurationAnalysisOk() (*ConfigurationAnalysisDTO, bool) {
	if o == nil || IsNil(o.ConfigurationAnalysis) {
		return nil, false
	}
	return o.ConfigurationAnalysis, true
}

// HasConfigurationAnalysis returns a boolean if a field has been set.
func (o *ConfigurationAnalysisEntity) HasConfigurationAnalysis() bool {
	if o != nil && !IsNil(o.ConfigurationAnalysis) {
		return true
	}

	return false
}

// SetConfigurationAnalysis gets a reference to the given ConfigurationAnalysisDTO and assigns it to the ConfigurationAnalysis field.
func (o *ConfigurationAnalysisEntity) SetConfigurationAnalysis(v ConfigurationAnalysisDTO) {
	o.ConfigurationAnalysis = &v
}

func (o ConfigurationAnalysisEntity) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigurationAnalysisEntity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ConfigurationAnalysis) {
		toSerialize["configurationAnalysis"] = o.ConfigurationAnalysis
	}
	return toSerialize, nil
}

type NullableConfigurationAnalysisEntity struct {
	value *ConfigurationAnalysisEntity
	isSet bool
}

func (v NullableConfigurationAnalysisEntity) Get() *ConfigurationAnalysisEntity {
	return v.value
}

func (v *NullableConfigurationAnalysisEntity) Set(val *ConfigurationAnalysisEntity) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigurationAnalysisEntity) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigurationAnalysisEntity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigurationAnalysisEntity(val *ConfigurationAnalysisEntity) *NullableConfigurationAnalysisEntity {
	return &NullableConfigurationAnalysisEntity{value: val, isSet: true}
}

func (v NullableConfigurationAnalysisEntity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigurationAnalysisEntity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


