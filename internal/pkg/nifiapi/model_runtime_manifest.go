/*
NiFi Rest API

The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.

API version: 2.0.0
Contact: dev@nifi.apache.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nifiapi

import (
	"encoding/json"
)

// checks if the RuntimeManifest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RuntimeManifest{}

// RuntimeManifest struct for RuntimeManifest
type RuntimeManifest struct {
	// A unique identifier for the manifest
	Identifier *string `json:"identifier,omitempty"`
	// The type of the runtime binary, e.g., 'minifi-java' or 'minifi-cpp'
	AgentType *string `json:"agentType,omitempty"`
	// The version of the runtime binary, e.g., '1.0.1'
	Version *string `json:"version,omitempty"`
	BuildInfo *BuildInfo `json:"buildInfo,omitempty"`
	// All extension bundles included with this runtime
	Bundles []Bundle `json:"bundles,omitempty"`
	SchedulingDefaults *SchedulingDefaults `json:"schedulingDefaults,omitempty"`
}

// NewRuntimeManifest instantiates a new RuntimeManifest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRuntimeManifest() *RuntimeManifest {
	this := RuntimeManifest{}
	return &this
}

// NewRuntimeManifestWithDefaults instantiates a new RuntimeManifest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRuntimeManifestWithDefaults() *RuntimeManifest {
	this := RuntimeManifest{}
	return &this
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *RuntimeManifest) GetIdentifier() string {
	if o == nil || IsNil(o.Identifier) {
		var ret string
		return ret
	}
	return *o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuntimeManifest) GetIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.Identifier) {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *RuntimeManifest) HasIdentifier() bool {
	if o != nil && !IsNil(o.Identifier) {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given string and assigns it to the Identifier field.
func (o *RuntimeManifest) SetIdentifier(v string) {
	o.Identifier = &v
}

// GetAgentType returns the AgentType field value if set, zero value otherwise.
func (o *RuntimeManifest) GetAgentType() string {
	if o == nil || IsNil(o.AgentType) {
		var ret string
		return ret
	}
	return *o.AgentType
}

// GetAgentTypeOk returns a tuple with the AgentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuntimeManifest) GetAgentTypeOk() (*string, bool) {
	if o == nil || IsNil(o.AgentType) {
		return nil, false
	}
	return o.AgentType, true
}

// HasAgentType returns a boolean if a field has been set.
func (o *RuntimeManifest) HasAgentType() bool {
	if o != nil && !IsNil(o.AgentType) {
		return true
	}

	return false
}

// SetAgentType gets a reference to the given string and assigns it to the AgentType field.
func (o *RuntimeManifest) SetAgentType(v string) {
	o.AgentType = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *RuntimeManifest) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuntimeManifest) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *RuntimeManifest) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *RuntimeManifest) SetVersion(v string) {
	o.Version = &v
}

// GetBuildInfo returns the BuildInfo field value if set, zero value otherwise.
func (o *RuntimeManifest) GetBuildInfo() BuildInfo {
	if o == nil || IsNil(o.BuildInfo) {
		var ret BuildInfo
		return ret
	}
	return *o.BuildInfo
}

// GetBuildInfoOk returns a tuple with the BuildInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuntimeManifest) GetBuildInfoOk() (*BuildInfo, bool) {
	if o == nil || IsNil(o.BuildInfo) {
		return nil, false
	}
	return o.BuildInfo, true
}

// HasBuildInfo returns a boolean if a field has been set.
func (o *RuntimeManifest) HasBuildInfo() bool {
	if o != nil && !IsNil(o.BuildInfo) {
		return true
	}

	return false
}

// SetBuildInfo gets a reference to the given BuildInfo and assigns it to the BuildInfo field.
func (o *RuntimeManifest) SetBuildInfo(v BuildInfo) {
	o.BuildInfo = &v
}

// GetBundles returns the Bundles field value if set, zero value otherwise.
func (o *RuntimeManifest) GetBundles() []Bundle {
	if o == nil || IsNil(o.Bundles) {
		var ret []Bundle
		return ret
	}
	return o.Bundles
}

// GetBundlesOk returns a tuple with the Bundles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuntimeManifest) GetBundlesOk() ([]Bundle, bool) {
	if o == nil || IsNil(o.Bundles) {
		return nil, false
	}
	return o.Bundles, true
}

// HasBundles returns a boolean if a field has been set.
func (o *RuntimeManifest) HasBundles() bool {
	if o != nil && !IsNil(o.Bundles) {
		return true
	}

	return false
}

// SetBundles gets a reference to the given []Bundle and assigns it to the Bundles field.
func (o *RuntimeManifest) SetBundles(v []Bundle) {
	o.Bundles = v
}

// GetSchedulingDefaults returns the SchedulingDefaults field value if set, zero value otherwise.
func (o *RuntimeManifest) GetSchedulingDefaults() SchedulingDefaults {
	if o == nil || IsNil(o.SchedulingDefaults) {
		var ret SchedulingDefaults
		return ret
	}
	return *o.SchedulingDefaults
}

// GetSchedulingDefaultsOk returns a tuple with the SchedulingDefaults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuntimeManifest) GetSchedulingDefaultsOk() (*SchedulingDefaults, bool) {
	if o == nil || IsNil(o.SchedulingDefaults) {
		return nil, false
	}
	return o.SchedulingDefaults, true
}

// HasSchedulingDefaults returns a boolean if a field has been set.
func (o *RuntimeManifest) HasSchedulingDefaults() bool {
	if o != nil && !IsNil(o.SchedulingDefaults) {
		return true
	}

	return false
}

// SetSchedulingDefaults gets a reference to the given SchedulingDefaults and assigns it to the SchedulingDefaults field.
func (o *RuntimeManifest) SetSchedulingDefaults(v SchedulingDefaults) {
	o.SchedulingDefaults = &v
}

func (o RuntimeManifest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RuntimeManifest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Identifier) {
		toSerialize["identifier"] = o.Identifier
	}
	if !IsNil(o.AgentType) {
		toSerialize["agentType"] = o.AgentType
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.BuildInfo) {
		toSerialize["buildInfo"] = o.BuildInfo
	}
	if !IsNil(o.Bundles) {
		toSerialize["bundles"] = o.Bundles
	}
	if !IsNil(o.SchedulingDefaults) {
		toSerialize["schedulingDefaults"] = o.SchedulingDefaults
	}
	return toSerialize, nil
}

type NullableRuntimeManifest struct {
	value *RuntimeManifest
	isSet bool
}

func (v NullableRuntimeManifest) Get() *RuntimeManifest {
	return v.value
}

func (v *NullableRuntimeManifest) Set(val *RuntimeManifest) {
	v.value = val
	v.isSet = true
}

func (v NullableRuntimeManifest) IsSet() bool {
	return v.isSet
}

func (v *NullableRuntimeManifest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRuntimeManifest(val *RuntimeManifest) *NullableRuntimeManifest {
	return &NullableRuntimeManifest{value: val, isSet: true}
}

func (v NullableRuntimeManifest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRuntimeManifest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


