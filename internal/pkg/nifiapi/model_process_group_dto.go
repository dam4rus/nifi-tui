/*
NiFi Rest API

The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.

API version: 2.0.0
Contact: dev@nifi.apache.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nifiapi

import (
	"encoding/json"
)

// checks if the ProcessGroupDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProcessGroupDTO{}

// ProcessGroupDTO struct for ProcessGroupDTO
type ProcessGroupDTO struct {
	// The id of the component.
	Id *string `json:"id,omitempty"`
	// The ID of the corresponding component that is under version control
	VersionedComponentId *string `json:"versionedComponentId,omitempty"`
	// The id of parent process group of this component if applicable.
	ParentGroupId *string `json:"parentGroupId,omitempty"`
	Position *PositionDTO `json:"position,omitempty"`
	// The name of the process group.
	Name *string `json:"name,omitempty"`
	// The comments for the process group.
	Comments *string `json:"comments,omitempty"`
	// The variables that are configured for the Process Group. Note that this map contains only those variables that are defined on this Process Group and not any variables that are defined in the parent Process Group, etc. I.e., this Map will not contain all variables that are accessible by components in this Process Group by rather only the variables that are defined for this Process Group itself.
	Variables *map[string]string `json:"variables,omitempty"`
	VersionControlInformation *VersionControlInformationDTO `json:"versionControlInformation,omitempty"`
	ParameterContext *ParameterContextReferenceEntity `json:"parameterContext,omitempty"`
	// The FlowFile Concurrency for this Process Group.
	FlowfileConcurrency *string `json:"flowfileConcurrency,omitempty"`
	// The Outbound Policy that is used for determining how FlowFiles should be transferred out of the Process Group.
	FlowfileOutboundPolicy *string `json:"flowfileOutboundPolicy,omitempty"`
	// The default FlowFile Expiration for this Process Group.
	DefaultFlowFileExpiration *string `json:"defaultFlowFileExpiration,omitempty"`
	// Default value used in this Process Group for the maximum number of objects that can be queued before back pressure is applied.
	DefaultBackPressureObjectThreshold *int64 `json:"defaultBackPressureObjectThreshold,omitempty"`
	// Default value used in this Process Group for the maximum data size of objects that can be queued before back pressure is applied.
	DefaultBackPressureDataSizeThreshold *string `json:"defaultBackPressureDataSizeThreshold,omitempty"`
	// The number of running components in this process group.
	RunningCount *int32 `json:"runningCount,omitempty"`
	// The number of stopped components in the process group.
	StoppedCount *int32 `json:"stoppedCount,omitempty"`
	// The number of invalid components in the process group.
	InvalidCount *int32 `json:"invalidCount,omitempty"`
	// The number of disabled components in the process group.
	DisabledCount *int32 `json:"disabledCount,omitempty"`
	// The number of active remote ports in the process group.
	ActiveRemotePortCount *int32 `json:"activeRemotePortCount,omitempty"`
	// The number of inactive remote ports in the process group.
	InactiveRemotePortCount *int32 `json:"inactiveRemotePortCount,omitempty"`
	// The number of up to date versioned process groups in the process group.
	UpToDateCount *int32 `json:"upToDateCount,omitempty"`
	// The number of locally modified versioned process groups in the process group.
	LocallyModifiedCount *int32 `json:"locallyModifiedCount,omitempty"`
	// The number of stale versioned process groups in the process group.
	StaleCount *int32 `json:"staleCount,omitempty"`
	// The number of locally modified and stale versioned process groups in the process group.
	LocallyModifiedAndStaleCount *int32 `json:"locallyModifiedAndStaleCount,omitempty"`
	// The number of versioned process groups in the process group that are unable to sync to a registry.
	SyncFailureCount *int32 `json:"syncFailureCount,omitempty"`
	// The number of local input ports in the process group.
	LocalInputPortCount *int32 `json:"localInputPortCount,omitempty"`
	// The number of local output ports in the process group.
	LocalOutputPortCount *int32 `json:"localOutputPortCount,omitempty"`
	// The number of public input ports in the process group.
	PublicInputPortCount *int32 `json:"publicInputPortCount,omitempty"`
	// The number of public output ports in the process group.
	PublicOutputPortCount *int32 `json:"publicOutputPortCount,omitempty"`
	Contents *FlowSnippetDTO `json:"contents,omitempty"`
	// The number of input ports in the process group.
	InputPortCount *int32 `json:"inputPortCount,omitempty"`
	// The number of output ports in the process group.
	OutputPortCount *int32 `json:"outputPortCount,omitempty"`
}

// NewProcessGroupDTO instantiates a new ProcessGroupDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProcessGroupDTO() *ProcessGroupDTO {
	this := ProcessGroupDTO{}
	return &this
}

// NewProcessGroupDTOWithDefaults instantiates a new ProcessGroupDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProcessGroupDTOWithDefaults() *ProcessGroupDTO {
	this := ProcessGroupDTO{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ProcessGroupDTO) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessGroupDTO) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ProcessGroupDTO) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ProcessGroupDTO) SetId(v string) {
	o.Id = &v
}

// GetVersionedComponentId returns the VersionedComponentId field value if set, zero value otherwise.
func (o *ProcessGroupDTO) GetVersionedComponentId() string {
	if o == nil || IsNil(o.VersionedComponentId) {
		var ret string
		return ret
	}
	return *o.VersionedComponentId
}

// GetVersionedComponentIdOk returns a tuple with the VersionedComponentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessGroupDTO) GetVersionedComponentIdOk() (*string, bool) {
	if o == nil || IsNil(o.VersionedComponentId) {
		return nil, false
	}
	return o.VersionedComponentId, true
}

// HasVersionedComponentId returns a boolean if a field has been set.
func (o *ProcessGroupDTO) HasVersionedComponentId() bool {
	if o != nil && !IsNil(o.VersionedComponentId) {
		return true
	}

	return false
}

// SetVersionedComponentId gets a reference to the given string and assigns it to the VersionedComponentId field.
func (o *ProcessGroupDTO) SetVersionedComponentId(v string) {
	o.VersionedComponentId = &v
}

// GetParentGroupId returns the ParentGroupId field value if set, zero value otherwise.
func (o *ProcessGroupDTO) GetParentGroupId() string {
	if o == nil || IsNil(o.ParentGroupId) {
		var ret string
		return ret
	}
	return *o.ParentGroupId
}

// GetParentGroupIdOk returns a tuple with the ParentGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessGroupDTO) GetParentGroupIdOk() (*string, bool) {
	if o == nil || IsNil(o.ParentGroupId) {
		return nil, false
	}
	return o.ParentGroupId, true
}

// HasParentGroupId returns a boolean if a field has been set.
func (o *ProcessGroupDTO) HasParentGroupId() bool {
	if o != nil && !IsNil(o.ParentGroupId) {
		return true
	}

	return false
}

// SetParentGroupId gets a reference to the given string and assigns it to the ParentGroupId field.
func (o *ProcessGroupDTO) SetParentGroupId(v string) {
	o.ParentGroupId = &v
}

// GetPosition returns the Position field value if set, zero value otherwise.
func (o *ProcessGroupDTO) GetPosition() PositionDTO {
	if o == nil || IsNil(o.Position) {
		var ret PositionDTO
		return ret
	}
	return *o.Position
}

// GetPositionOk returns a tuple with the Position field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessGroupDTO) GetPositionOk() (*PositionDTO, bool) {
	if o == nil || IsNil(o.Position) {
		return nil, false
	}
	return o.Position, true
}

// HasPosition returns a boolean if a field has been set.
func (o *ProcessGroupDTO) HasPosition() bool {
	if o != nil && !IsNil(o.Position) {
		return true
	}

	return false
}

// SetPosition gets a reference to the given PositionDTO and assigns it to the Position field.
func (o *ProcessGroupDTO) SetPosition(v PositionDTO) {
	o.Position = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ProcessGroupDTO) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessGroupDTO) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ProcessGroupDTO) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ProcessGroupDTO) SetName(v string) {
	o.Name = &v
}

// GetComments returns the Comments field value if set, zero value otherwise.
func (o *ProcessGroupDTO) GetComments() string {
	if o == nil || IsNil(o.Comments) {
		var ret string
		return ret
	}
	return *o.Comments
}

// GetCommentsOk returns a tuple with the Comments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessGroupDTO) GetCommentsOk() (*string, bool) {
	if o == nil || IsNil(o.Comments) {
		return nil, false
	}
	return o.Comments, true
}

// HasComments returns a boolean if a field has been set.
func (o *ProcessGroupDTO) HasComments() bool {
	if o != nil && !IsNil(o.Comments) {
		return true
	}

	return false
}

// SetComments gets a reference to the given string and assigns it to the Comments field.
func (o *ProcessGroupDTO) SetComments(v string) {
	o.Comments = &v
}

// GetVariables returns the Variables field value if set, zero value otherwise.
func (o *ProcessGroupDTO) GetVariables() map[string]string {
	if o == nil || IsNil(o.Variables) {
		var ret map[string]string
		return ret
	}
	return *o.Variables
}

// GetVariablesOk returns a tuple with the Variables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessGroupDTO) GetVariablesOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Variables) {
		return nil, false
	}
	return o.Variables, true
}

// HasVariables returns a boolean if a field has been set.
func (o *ProcessGroupDTO) HasVariables() bool {
	if o != nil && !IsNil(o.Variables) {
		return true
	}

	return false
}

// SetVariables gets a reference to the given map[string]string and assigns it to the Variables field.
func (o *ProcessGroupDTO) SetVariables(v map[string]string) {
	o.Variables = &v
}

// GetVersionControlInformation returns the VersionControlInformation field value if set, zero value otherwise.
func (o *ProcessGroupDTO) GetVersionControlInformation() VersionControlInformationDTO {
	if o == nil || IsNil(o.VersionControlInformation) {
		var ret VersionControlInformationDTO
		return ret
	}
	return *o.VersionControlInformation
}

// GetVersionControlInformationOk returns a tuple with the VersionControlInformation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessGroupDTO) GetVersionControlInformationOk() (*VersionControlInformationDTO, bool) {
	if o == nil || IsNil(o.VersionControlInformation) {
		return nil, false
	}
	return o.VersionControlInformation, true
}

// HasVersionControlInformation returns a boolean if a field has been set.
func (o *ProcessGroupDTO) HasVersionControlInformation() bool {
	if o != nil && !IsNil(o.VersionControlInformation) {
		return true
	}

	return false
}

// SetVersionControlInformation gets a reference to the given VersionControlInformationDTO and assigns it to the VersionControlInformation field.
func (o *ProcessGroupDTO) SetVersionControlInformation(v VersionControlInformationDTO) {
	o.VersionControlInformation = &v
}

// GetParameterContext returns the ParameterContext field value if set, zero value otherwise.
func (o *ProcessGroupDTO) GetParameterContext() ParameterContextReferenceEntity {
	if o == nil || IsNil(o.ParameterContext) {
		var ret ParameterContextReferenceEntity
		return ret
	}
	return *o.ParameterContext
}

// GetParameterContextOk returns a tuple with the ParameterContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessGroupDTO) GetParameterContextOk() (*ParameterContextReferenceEntity, bool) {
	if o == nil || IsNil(o.ParameterContext) {
		return nil, false
	}
	return o.ParameterContext, true
}

// HasParameterContext returns a boolean if a field has been set.
func (o *ProcessGroupDTO) HasParameterContext() bool {
	if o != nil && !IsNil(o.ParameterContext) {
		return true
	}

	return false
}

// SetParameterContext gets a reference to the given ParameterContextReferenceEntity and assigns it to the ParameterContext field.
func (o *ProcessGroupDTO) SetParameterContext(v ParameterContextReferenceEntity) {
	o.ParameterContext = &v
}

// GetFlowfileConcurrency returns the FlowfileConcurrency field value if set, zero value otherwise.
func (o *ProcessGroupDTO) GetFlowfileConcurrency() string {
	if o == nil || IsNil(o.FlowfileConcurrency) {
		var ret string
		return ret
	}
	return *o.FlowfileConcurrency
}

// GetFlowfileConcurrencyOk returns a tuple with the FlowfileConcurrency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessGroupDTO) GetFlowfileConcurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.FlowfileConcurrency) {
		return nil, false
	}
	return o.FlowfileConcurrency, true
}

// HasFlowfileConcurrency returns a boolean if a field has been set.
func (o *ProcessGroupDTO) HasFlowfileConcurrency() bool {
	if o != nil && !IsNil(o.FlowfileConcurrency) {
		return true
	}

	return false
}

// SetFlowfileConcurrency gets a reference to the given string and assigns it to the FlowfileConcurrency field.
func (o *ProcessGroupDTO) SetFlowfileConcurrency(v string) {
	o.FlowfileConcurrency = &v
}

// GetFlowfileOutboundPolicy returns the FlowfileOutboundPolicy field value if set, zero value otherwise.
func (o *ProcessGroupDTO) GetFlowfileOutboundPolicy() string {
	if o == nil || IsNil(o.FlowfileOutboundPolicy) {
		var ret string
		return ret
	}
	return *o.FlowfileOutboundPolicy
}

// GetFlowfileOutboundPolicyOk returns a tuple with the FlowfileOutboundPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessGroupDTO) GetFlowfileOutboundPolicyOk() (*string, bool) {
	if o == nil || IsNil(o.FlowfileOutboundPolicy) {
		return nil, false
	}
	return o.FlowfileOutboundPolicy, true
}

// HasFlowfileOutboundPolicy returns a boolean if a field has been set.
func (o *ProcessGroupDTO) HasFlowfileOutboundPolicy() bool {
	if o != nil && !IsNil(o.FlowfileOutboundPolicy) {
		return true
	}

	return false
}

// SetFlowfileOutboundPolicy gets a reference to the given string and assigns it to the FlowfileOutboundPolicy field.
func (o *ProcessGroupDTO) SetFlowfileOutboundPolicy(v string) {
	o.FlowfileOutboundPolicy = &v
}

// GetDefaultFlowFileExpiration returns the DefaultFlowFileExpiration field value if set, zero value otherwise.
func (o *ProcessGroupDTO) GetDefaultFlowFileExpiration() string {
	if o == nil || IsNil(o.DefaultFlowFileExpiration) {
		var ret string
		return ret
	}
	return *o.DefaultFlowFileExpiration
}

// GetDefaultFlowFileExpirationOk returns a tuple with the DefaultFlowFileExpiration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessGroupDTO) GetDefaultFlowFileExpirationOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultFlowFileExpiration) {
		return nil, false
	}
	return o.DefaultFlowFileExpiration, true
}

// HasDefaultFlowFileExpiration returns a boolean if a field has been set.
func (o *ProcessGroupDTO) HasDefaultFlowFileExpiration() bool {
	if o != nil && !IsNil(o.DefaultFlowFileExpiration) {
		return true
	}

	return false
}

// SetDefaultFlowFileExpiration gets a reference to the given string and assigns it to the DefaultFlowFileExpiration field.
func (o *ProcessGroupDTO) SetDefaultFlowFileExpiration(v string) {
	o.DefaultFlowFileExpiration = &v
}

// GetDefaultBackPressureObjectThreshold returns the DefaultBackPressureObjectThreshold field value if set, zero value otherwise.
func (o *ProcessGroupDTO) GetDefaultBackPressureObjectThreshold() int64 {
	if o == nil || IsNil(o.DefaultBackPressureObjectThreshold) {
		var ret int64
		return ret
	}
	return *o.DefaultBackPressureObjectThreshold
}

// GetDefaultBackPressureObjectThresholdOk returns a tuple with the DefaultBackPressureObjectThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessGroupDTO) GetDefaultBackPressureObjectThresholdOk() (*int64, bool) {
	if o == nil || IsNil(o.DefaultBackPressureObjectThreshold) {
		return nil, false
	}
	return o.DefaultBackPressureObjectThreshold, true
}

// HasDefaultBackPressureObjectThreshold returns a boolean if a field has been set.
func (o *ProcessGroupDTO) HasDefaultBackPressureObjectThreshold() bool {
	if o != nil && !IsNil(o.DefaultBackPressureObjectThreshold) {
		return true
	}

	return false
}

// SetDefaultBackPressureObjectThreshold gets a reference to the given int64 and assigns it to the DefaultBackPressureObjectThreshold field.
func (o *ProcessGroupDTO) SetDefaultBackPressureObjectThreshold(v int64) {
	o.DefaultBackPressureObjectThreshold = &v
}

// GetDefaultBackPressureDataSizeThreshold returns the DefaultBackPressureDataSizeThreshold field value if set, zero value otherwise.
func (o *ProcessGroupDTO) GetDefaultBackPressureDataSizeThreshold() string {
	if o == nil || IsNil(o.DefaultBackPressureDataSizeThreshold) {
		var ret string
		return ret
	}
	return *o.DefaultBackPressureDataSizeThreshold
}

// GetDefaultBackPressureDataSizeThresholdOk returns a tuple with the DefaultBackPressureDataSizeThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessGroupDTO) GetDefaultBackPressureDataSizeThresholdOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultBackPressureDataSizeThreshold) {
		return nil, false
	}
	return o.DefaultBackPressureDataSizeThreshold, true
}

// HasDefaultBackPressureDataSizeThreshold returns a boolean if a field has been set.
func (o *ProcessGroupDTO) HasDefaultBackPressureDataSizeThreshold() bool {
	if o != nil && !IsNil(o.DefaultBackPressureDataSizeThreshold) {
		return true
	}

	return false
}

// SetDefaultBackPressureDataSizeThreshold gets a reference to the given string and assigns it to the DefaultBackPressureDataSizeThreshold field.
func (o *ProcessGroupDTO) SetDefaultBackPressureDataSizeThreshold(v string) {
	o.DefaultBackPressureDataSizeThreshold = &v
}

// GetRunningCount returns the RunningCount field value if set, zero value otherwise.
func (o *ProcessGroupDTO) GetRunningCount() int32 {
	if o == nil || IsNil(o.RunningCount) {
		var ret int32
		return ret
	}
	return *o.RunningCount
}

// GetRunningCountOk returns a tuple with the RunningCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessGroupDTO) GetRunningCountOk() (*int32, bool) {
	if o == nil || IsNil(o.RunningCount) {
		return nil, false
	}
	return o.RunningCount, true
}

// HasRunningCount returns a boolean if a field has been set.
func (o *ProcessGroupDTO) HasRunningCount() bool {
	if o != nil && !IsNil(o.RunningCount) {
		return true
	}

	return false
}

// SetRunningCount gets a reference to the given int32 and assigns it to the RunningCount field.
func (o *ProcessGroupDTO) SetRunningCount(v int32) {
	o.RunningCount = &v
}

// GetStoppedCount returns the StoppedCount field value if set, zero value otherwise.
func (o *ProcessGroupDTO) GetStoppedCount() int32 {
	if o == nil || IsNil(o.StoppedCount) {
		var ret int32
		return ret
	}
	return *o.StoppedCount
}

// GetStoppedCountOk returns a tuple with the StoppedCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessGroupDTO) GetStoppedCountOk() (*int32, bool) {
	if o == nil || IsNil(o.StoppedCount) {
		return nil, false
	}
	return o.StoppedCount, true
}

// HasStoppedCount returns a boolean if a field has been set.
func (o *ProcessGroupDTO) HasStoppedCount() bool {
	if o != nil && !IsNil(o.StoppedCount) {
		return true
	}

	return false
}

// SetStoppedCount gets a reference to the given int32 and assigns it to the StoppedCount field.
func (o *ProcessGroupDTO) SetStoppedCount(v int32) {
	o.StoppedCount = &v
}

// GetInvalidCount returns the InvalidCount field value if set, zero value otherwise.
func (o *ProcessGroupDTO) GetInvalidCount() int32 {
	if o == nil || IsNil(o.InvalidCount) {
		var ret int32
		return ret
	}
	return *o.InvalidCount
}

// GetInvalidCountOk returns a tuple with the InvalidCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessGroupDTO) GetInvalidCountOk() (*int32, bool) {
	if o == nil || IsNil(o.InvalidCount) {
		return nil, false
	}
	return o.InvalidCount, true
}

// HasInvalidCount returns a boolean if a field has been set.
func (o *ProcessGroupDTO) HasInvalidCount() bool {
	if o != nil && !IsNil(o.InvalidCount) {
		return true
	}

	return false
}

// SetInvalidCount gets a reference to the given int32 and assigns it to the InvalidCount field.
func (o *ProcessGroupDTO) SetInvalidCount(v int32) {
	o.InvalidCount = &v
}

// GetDisabledCount returns the DisabledCount field value if set, zero value otherwise.
func (o *ProcessGroupDTO) GetDisabledCount() int32 {
	if o == nil || IsNil(o.DisabledCount) {
		var ret int32
		return ret
	}
	return *o.DisabledCount
}

// GetDisabledCountOk returns a tuple with the DisabledCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessGroupDTO) GetDisabledCountOk() (*int32, bool) {
	if o == nil || IsNil(o.DisabledCount) {
		return nil, false
	}
	return o.DisabledCount, true
}

// HasDisabledCount returns a boolean if a field has been set.
func (o *ProcessGroupDTO) HasDisabledCount() bool {
	if o != nil && !IsNil(o.DisabledCount) {
		return true
	}

	return false
}

// SetDisabledCount gets a reference to the given int32 and assigns it to the DisabledCount field.
func (o *ProcessGroupDTO) SetDisabledCount(v int32) {
	o.DisabledCount = &v
}

// GetActiveRemotePortCount returns the ActiveRemotePortCount field value if set, zero value otherwise.
func (o *ProcessGroupDTO) GetActiveRemotePortCount() int32 {
	if o == nil || IsNil(o.ActiveRemotePortCount) {
		var ret int32
		return ret
	}
	return *o.ActiveRemotePortCount
}

// GetActiveRemotePortCountOk returns a tuple with the ActiveRemotePortCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessGroupDTO) GetActiveRemotePortCountOk() (*int32, bool) {
	if o == nil || IsNil(o.ActiveRemotePortCount) {
		return nil, false
	}
	return o.ActiveRemotePortCount, true
}

// HasActiveRemotePortCount returns a boolean if a field has been set.
func (o *ProcessGroupDTO) HasActiveRemotePortCount() bool {
	if o != nil && !IsNil(o.ActiveRemotePortCount) {
		return true
	}

	return false
}

// SetActiveRemotePortCount gets a reference to the given int32 and assigns it to the ActiveRemotePortCount field.
func (o *ProcessGroupDTO) SetActiveRemotePortCount(v int32) {
	o.ActiveRemotePortCount = &v
}

// GetInactiveRemotePortCount returns the InactiveRemotePortCount field value if set, zero value otherwise.
func (o *ProcessGroupDTO) GetInactiveRemotePortCount() int32 {
	if o == nil || IsNil(o.InactiveRemotePortCount) {
		var ret int32
		return ret
	}
	return *o.InactiveRemotePortCount
}

// GetInactiveRemotePortCountOk returns a tuple with the InactiveRemotePortCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessGroupDTO) GetInactiveRemotePortCountOk() (*int32, bool) {
	if o == nil || IsNil(o.InactiveRemotePortCount) {
		return nil, false
	}
	return o.InactiveRemotePortCount, true
}

// HasInactiveRemotePortCount returns a boolean if a field has been set.
func (o *ProcessGroupDTO) HasInactiveRemotePortCount() bool {
	if o != nil && !IsNil(o.InactiveRemotePortCount) {
		return true
	}

	return false
}

// SetInactiveRemotePortCount gets a reference to the given int32 and assigns it to the InactiveRemotePortCount field.
func (o *ProcessGroupDTO) SetInactiveRemotePortCount(v int32) {
	o.InactiveRemotePortCount = &v
}

// GetUpToDateCount returns the UpToDateCount field value if set, zero value otherwise.
func (o *ProcessGroupDTO) GetUpToDateCount() int32 {
	if o == nil || IsNil(o.UpToDateCount) {
		var ret int32
		return ret
	}
	return *o.UpToDateCount
}

// GetUpToDateCountOk returns a tuple with the UpToDateCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessGroupDTO) GetUpToDateCountOk() (*int32, bool) {
	if o == nil || IsNil(o.UpToDateCount) {
		return nil, false
	}
	return o.UpToDateCount, true
}

// HasUpToDateCount returns a boolean if a field has been set.
func (o *ProcessGroupDTO) HasUpToDateCount() bool {
	if o != nil && !IsNil(o.UpToDateCount) {
		return true
	}

	return false
}

// SetUpToDateCount gets a reference to the given int32 and assigns it to the UpToDateCount field.
func (o *ProcessGroupDTO) SetUpToDateCount(v int32) {
	o.UpToDateCount = &v
}

// GetLocallyModifiedCount returns the LocallyModifiedCount field value if set, zero value otherwise.
func (o *ProcessGroupDTO) GetLocallyModifiedCount() int32 {
	if o == nil || IsNil(o.LocallyModifiedCount) {
		var ret int32
		return ret
	}
	return *o.LocallyModifiedCount
}

// GetLocallyModifiedCountOk returns a tuple with the LocallyModifiedCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessGroupDTO) GetLocallyModifiedCountOk() (*int32, bool) {
	if o == nil || IsNil(o.LocallyModifiedCount) {
		return nil, false
	}
	return o.LocallyModifiedCount, true
}

// HasLocallyModifiedCount returns a boolean if a field has been set.
func (o *ProcessGroupDTO) HasLocallyModifiedCount() bool {
	if o != nil && !IsNil(o.LocallyModifiedCount) {
		return true
	}

	return false
}

// SetLocallyModifiedCount gets a reference to the given int32 and assigns it to the LocallyModifiedCount field.
func (o *ProcessGroupDTO) SetLocallyModifiedCount(v int32) {
	o.LocallyModifiedCount = &v
}

// GetStaleCount returns the StaleCount field value if set, zero value otherwise.
func (o *ProcessGroupDTO) GetStaleCount() int32 {
	if o == nil || IsNil(o.StaleCount) {
		var ret int32
		return ret
	}
	return *o.StaleCount
}

// GetStaleCountOk returns a tuple with the StaleCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessGroupDTO) GetStaleCountOk() (*int32, bool) {
	if o == nil || IsNil(o.StaleCount) {
		return nil, false
	}
	return o.StaleCount, true
}

// HasStaleCount returns a boolean if a field has been set.
func (o *ProcessGroupDTO) HasStaleCount() bool {
	if o != nil && !IsNil(o.StaleCount) {
		return true
	}

	return false
}

// SetStaleCount gets a reference to the given int32 and assigns it to the StaleCount field.
func (o *ProcessGroupDTO) SetStaleCount(v int32) {
	o.StaleCount = &v
}

// GetLocallyModifiedAndStaleCount returns the LocallyModifiedAndStaleCount field value if set, zero value otherwise.
func (o *ProcessGroupDTO) GetLocallyModifiedAndStaleCount() int32 {
	if o == nil || IsNil(o.LocallyModifiedAndStaleCount) {
		var ret int32
		return ret
	}
	return *o.LocallyModifiedAndStaleCount
}

// GetLocallyModifiedAndStaleCountOk returns a tuple with the LocallyModifiedAndStaleCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessGroupDTO) GetLocallyModifiedAndStaleCountOk() (*int32, bool) {
	if o == nil || IsNil(o.LocallyModifiedAndStaleCount) {
		return nil, false
	}
	return o.LocallyModifiedAndStaleCount, true
}

// HasLocallyModifiedAndStaleCount returns a boolean if a field has been set.
func (o *ProcessGroupDTO) HasLocallyModifiedAndStaleCount() bool {
	if o != nil && !IsNil(o.LocallyModifiedAndStaleCount) {
		return true
	}

	return false
}

// SetLocallyModifiedAndStaleCount gets a reference to the given int32 and assigns it to the LocallyModifiedAndStaleCount field.
func (o *ProcessGroupDTO) SetLocallyModifiedAndStaleCount(v int32) {
	o.LocallyModifiedAndStaleCount = &v
}

// GetSyncFailureCount returns the SyncFailureCount field value if set, zero value otherwise.
func (o *ProcessGroupDTO) GetSyncFailureCount() int32 {
	if o == nil || IsNil(o.SyncFailureCount) {
		var ret int32
		return ret
	}
	return *o.SyncFailureCount
}

// GetSyncFailureCountOk returns a tuple with the SyncFailureCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessGroupDTO) GetSyncFailureCountOk() (*int32, bool) {
	if o == nil || IsNil(o.SyncFailureCount) {
		return nil, false
	}
	return o.SyncFailureCount, true
}

// HasSyncFailureCount returns a boolean if a field has been set.
func (o *ProcessGroupDTO) HasSyncFailureCount() bool {
	if o != nil && !IsNil(o.SyncFailureCount) {
		return true
	}

	return false
}

// SetSyncFailureCount gets a reference to the given int32 and assigns it to the SyncFailureCount field.
func (o *ProcessGroupDTO) SetSyncFailureCount(v int32) {
	o.SyncFailureCount = &v
}

// GetLocalInputPortCount returns the LocalInputPortCount field value if set, zero value otherwise.
func (o *ProcessGroupDTO) GetLocalInputPortCount() int32 {
	if o == nil || IsNil(o.LocalInputPortCount) {
		var ret int32
		return ret
	}
	return *o.LocalInputPortCount
}

// GetLocalInputPortCountOk returns a tuple with the LocalInputPortCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessGroupDTO) GetLocalInputPortCountOk() (*int32, bool) {
	if o == nil || IsNil(o.LocalInputPortCount) {
		return nil, false
	}
	return o.LocalInputPortCount, true
}

// HasLocalInputPortCount returns a boolean if a field has been set.
func (o *ProcessGroupDTO) HasLocalInputPortCount() bool {
	if o != nil && !IsNil(o.LocalInputPortCount) {
		return true
	}

	return false
}

// SetLocalInputPortCount gets a reference to the given int32 and assigns it to the LocalInputPortCount field.
func (o *ProcessGroupDTO) SetLocalInputPortCount(v int32) {
	o.LocalInputPortCount = &v
}

// GetLocalOutputPortCount returns the LocalOutputPortCount field value if set, zero value otherwise.
func (o *ProcessGroupDTO) GetLocalOutputPortCount() int32 {
	if o == nil || IsNil(o.LocalOutputPortCount) {
		var ret int32
		return ret
	}
	return *o.LocalOutputPortCount
}

// GetLocalOutputPortCountOk returns a tuple with the LocalOutputPortCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessGroupDTO) GetLocalOutputPortCountOk() (*int32, bool) {
	if o == nil || IsNil(o.LocalOutputPortCount) {
		return nil, false
	}
	return o.LocalOutputPortCount, true
}

// HasLocalOutputPortCount returns a boolean if a field has been set.
func (o *ProcessGroupDTO) HasLocalOutputPortCount() bool {
	if o != nil && !IsNil(o.LocalOutputPortCount) {
		return true
	}

	return false
}

// SetLocalOutputPortCount gets a reference to the given int32 and assigns it to the LocalOutputPortCount field.
func (o *ProcessGroupDTO) SetLocalOutputPortCount(v int32) {
	o.LocalOutputPortCount = &v
}

// GetPublicInputPortCount returns the PublicInputPortCount field value if set, zero value otherwise.
func (o *ProcessGroupDTO) GetPublicInputPortCount() int32 {
	if o == nil || IsNil(o.PublicInputPortCount) {
		var ret int32
		return ret
	}
	return *o.PublicInputPortCount
}

// GetPublicInputPortCountOk returns a tuple with the PublicInputPortCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessGroupDTO) GetPublicInputPortCountOk() (*int32, bool) {
	if o == nil || IsNil(o.PublicInputPortCount) {
		return nil, false
	}
	return o.PublicInputPortCount, true
}

// HasPublicInputPortCount returns a boolean if a field has been set.
func (o *ProcessGroupDTO) HasPublicInputPortCount() bool {
	if o != nil && !IsNil(o.PublicInputPortCount) {
		return true
	}

	return false
}

// SetPublicInputPortCount gets a reference to the given int32 and assigns it to the PublicInputPortCount field.
func (o *ProcessGroupDTO) SetPublicInputPortCount(v int32) {
	o.PublicInputPortCount = &v
}

// GetPublicOutputPortCount returns the PublicOutputPortCount field value if set, zero value otherwise.
func (o *ProcessGroupDTO) GetPublicOutputPortCount() int32 {
	if o == nil || IsNil(o.PublicOutputPortCount) {
		var ret int32
		return ret
	}
	return *o.PublicOutputPortCount
}

// GetPublicOutputPortCountOk returns a tuple with the PublicOutputPortCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessGroupDTO) GetPublicOutputPortCountOk() (*int32, bool) {
	if o == nil || IsNil(o.PublicOutputPortCount) {
		return nil, false
	}
	return o.PublicOutputPortCount, true
}

// HasPublicOutputPortCount returns a boolean if a field has been set.
func (o *ProcessGroupDTO) HasPublicOutputPortCount() bool {
	if o != nil && !IsNil(o.PublicOutputPortCount) {
		return true
	}

	return false
}

// SetPublicOutputPortCount gets a reference to the given int32 and assigns it to the PublicOutputPortCount field.
func (o *ProcessGroupDTO) SetPublicOutputPortCount(v int32) {
	o.PublicOutputPortCount = &v
}

// GetContents returns the Contents field value if set, zero value otherwise.
func (o *ProcessGroupDTO) GetContents() FlowSnippetDTO {
	if o == nil || IsNil(o.Contents) {
		var ret FlowSnippetDTO
		return ret
	}
	return *o.Contents
}

// GetContentsOk returns a tuple with the Contents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessGroupDTO) GetContentsOk() (*FlowSnippetDTO, bool) {
	if o == nil || IsNil(o.Contents) {
		return nil, false
	}
	return o.Contents, true
}

// HasContents returns a boolean if a field has been set.
func (o *ProcessGroupDTO) HasContents() bool {
	if o != nil && !IsNil(o.Contents) {
		return true
	}

	return false
}

// SetContents gets a reference to the given FlowSnippetDTO and assigns it to the Contents field.
func (o *ProcessGroupDTO) SetContents(v FlowSnippetDTO) {
	o.Contents = &v
}

// GetInputPortCount returns the InputPortCount field value if set, zero value otherwise.
func (o *ProcessGroupDTO) GetInputPortCount() int32 {
	if o == nil || IsNil(o.InputPortCount) {
		var ret int32
		return ret
	}
	return *o.InputPortCount
}

// GetInputPortCountOk returns a tuple with the InputPortCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessGroupDTO) GetInputPortCountOk() (*int32, bool) {
	if o == nil || IsNil(o.InputPortCount) {
		return nil, false
	}
	return o.InputPortCount, true
}

// HasInputPortCount returns a boolean if a field has been set.
func (o *ProcessGroupDTO) HasInputPortCount() bool {
	if o != nil && !IsNil(o.InputPortCount) {
		return true
	}

	return false
}

// SetInputPortCount gets a reference to the given int32 and assigns it to the InputPortCount field.
func (o *ProcessGroupDTO) SetInputPortCount(v int32) {
	o.InputPortCount = &v
}

// GetOutputPortCount returns the OutputPortCount field value if set, zero value otherwise.
func (o *ProcessGroupDTO) GetOutputPortCount() int32 {
	if o == nil || IsNil(o.OutputPortCount) {
		var ret int32
		return ret
	}
	return *o.OutputPortCount
}

// GetOutputPortCountOk returns a tuple with the OutputPortCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessGroupDTO) GetOutputPortCountOk() (*int32, bool) {
	if o == nil || IsNil(o.OutputPortCount) {
		return nil, false
	}
	return o.OutputPortCount, true
}

// HasOutputPortCount returns a boolean if a field has been set.
func (o *ProcessGroupDTO) HasOutputPortCount() bool {
	if o != nil && !IsNil(o.OutputPortCount) {
		return true
	}

	return false
}

// SetOutputPortCount gets a reference to the given int32 and assigns it to the OutputPortCount field.
func (o *ProcessGroupDTO) SetOutputPortCount(v int32) {
	o.OutputPortCount = &v
}

func (o ProcessGroupDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProcessGroupDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.VersionedComponentId) {
		toSerialize["versionedComponentId"] = o.VersionedComponentId
	}
	if !IsNil(o.ParentGroupId) {
		toSerialize["parentGroupId"] = o.ParentGroupId
	}
	if !IsNil(o.Position) {
		toSerialize["position"] = o.Position
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Comments) {
		toSerialize["comments"] = o.Comments
	}
	if !IsNil(o.Variables) {
		toSerialize["variables"] = o.Variables
	}
	if !IsNil(o.VersionControlInformation) {
		toSerialize["versionControlInformation"] = o.VersionControlInformation
	}
	if !IsNil(o.ParameterContext) {
		toSerialize["parameterContext"] = o.ParameterContext
	}
	if !IsNil(o.FlowfileConcurrency) {
		toSerialize["flowfileConcurrency"] = o.FlowfileConcurrency
	}
	if !IsNil(o.FlowfileOutboundPolicy) {
		toSerialize["flowfileOutboundPolicy"] = o.FlowfileOutboundPolicy
	}
	if !IsNil(o.DefaultFlowFileExpiration) {
		toSerialize["defaultFlowFileExpiration"] = o.DefaultFlowFileExpiration
	}
	if !IsNil(o.DefaultBackPressureObjectThreshold) {
		toSerialize["defaultBackPressureObjectThreshold"] = o.DefaultBackPressureObjectThreshold
	}
	if !IsNil(o.DefaultBackPressureDataSizeThreshold) {
		toSerialize["defaultBackPressureDataSizeThreshold"] = o.DefaultBackPressureDataSizeThreshold
	}
	if !IsNil(o.RunningCount) {
		toSerialize["runningCount"] = o.RunningCount
	}
	if !IsNil(o.StoppedCount) {
		toSerialize["stoppedCount"] = o.StoppedCount
	}
	if !IsNil(o.InvalidCount) {
		toSerialize["invalidCount"] = o.InvalidCount
	}
	if !IsNil(o.DisabledCount) {
		toSerialize["disabledCount"] = o.DisabledCount
	}
	if !IsNil(o.ActiveRemotePortCount) {
		toSerialize["activeRemotePortCount"] = o.ActiveRemotePortCount
	}
	if !IsNil(o.InactiveRemotePortCount) {
		toSerialize["inactiveRemotePortCount"] = o.InactiveRemotePortCount
	}
	if !IsNil(o.UpToDateCount) {
		toSerialize["upToDateCount"] = o.UpToDateCount
	}
	if !IsNil(o.LocallyModifiedCount) {
		toSerialize["locallyModifiedCount"] = o.LocallyModifiedCount
	}
	if !IsNil(o.StaleCount) {
		toSerialize["staleCount"] = o.StaleCount
	}
	if !IsNil(o.LocallyModifiedAndStaleCount) {
		toSerialize["locallyModifiedAndStaleCount"] = o.LocallyModifiedAndStaleCount
	}
	if !IsNil(o.SyncFailureCount) {
		toSerialize["syncFailureCount"] = o.SyncFailureCount
	}
	if !IsNil(o.LocalInputPortCount) {
		toSerialize["localInputPortCount"] = o.LocalInputPortCount
	}
	if !IsNil(o.LocalOutputPortCount) {
		toSerialize["localOutputPortCount"] = o.LocalOutputPortCount
	}
	if !IsNil(o.PublicInputPortCount) {
		toSerialize["publicInputPortCount"] = o.PublicInputPortCount
	}
	if !IsNil(o.PublicOutputPortCount) {
		toSerialize["publicOutputPortCount"] = o.PublicOutputPortCount
	}
	if !IsNil(o.Contents) {
		toSerialize["contents"] = o.Contents
	}
	if !IsNil(o.InputPortCount) {
		toSerialize["inputPortCount"] = o.InputPortCount
	}
	if !IsNil(o.OutputPortCount) {
		toSerialize["outputPortCount"] = o.OutputPortCount
	}
	return toSerialize, nil
}

type NullableProcessGroupDTO struct {
	value *ProcessGroupDTO
	isSet bool
}

func (v NullableProcessGroupDTO) Get() *ProcessGroupDTO {
	return v.value
}

func (v *NullableProcessGroupDTO) Set(val *ProcessGroupDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableProcessGroupDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableProcessGroupDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProcessGroupDTO(val *ProcessGroupDTO) *NullableProcessGroupDTO {
	return &NullableProcessGroupDTO{value: val, isSet: true}
}

func (v NullableProcessGroupDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProcessGroupDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


