/*
NiFi Rest API

The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.

API version: 2.0.0
Contact: dev@nifi.apache.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nifiapi

import (
	"encoding/json"
)

// checks if the QueueSizeDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QueueSizeDTO{}

// QueueSizeDTO struct for QueueSizeDTO
type QueueSizeDTO struct {
	// The size of objects in a queue.
	ByteCount *int64 `json:"byteCount,omitempty"`
	// The count of objects in a queue.
	ObjectCount *int32 `json:"objectCount,omitempty"`
}

// NewQueueSizeDTO instantiates a new QueueSizeDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQueueSizeDTO() *QueueSizeDTO {
	this := QueueSizeDTO{}
	return &this
}

// NewQueueSizeDTOWithDefaults instantiates a new QueueSizeDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQueueSizeDTOWithDefaults() *QueueSizeDTO {
	this := QueueSizeDTO{}
	return &this
}

// GetByteCount returns the ByteCount field value if set, zero value otherwise.
func (o *QueueSizeDTO) GetByteCount() int64 {
	if o == nil || IsNil(o.ByteCount) {
		var ret int64
		return ret
	}
	return *o.ByteCount
}

// GetByteCountOk returns a tuple with the ByteCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueueSizeDTO) GetByteCountOk() (*int64, bool) {
	if o == nil || IsNil(o.ByteCount) {
		return nil, false
	}
	return o.ByteCount, true
}

// HasByteCount returns a boolean if a field has been set.
func (o *QueueSizeDTO) HasByteCount() bool {
	if o != nil && !IsNil(o.ByteCount) {
		return true
	}

	return false
}

// SetByteCount gets a reference to the given int64 and assigns it to the ByteCount field.
func (o *QueueSizeDTO) SetByteCount(v int64) {
	o.ByteCount = &v
}

// GetObjectCount returns the ObjectCount field value if set, zero value otherwise.
func (o *QueueSizeDTO) GetObjectCount() int32 {
	if o == nil || IsNil(o.ObjectCount) {
		var ret int32
		return ret
	}
	return *o.ObjectCount
}

// GetObjectCountOk returns a tuple with the ObjectCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueueSizeDTO) GetObjectCountOk() (*int32, bool) {
	if o == nil || IsNil(o.ObjectCount) {
		return nil, false
	}
	return o.ObjectCount, true
}

// HasObjectCount returns a boolean if a field has been set.
func (o *QueueSizeDTO) HasObjectCount() bool {
	if o != nil && !IsNil(o.ObjectCount) {
		return true
	}

	return false
}

// SetObjectCount gets a reference to the given int32 and assigns it to the ObjectCount field.
func (o *QueueSizeDTO) SetObjectCount(v int32) {
	o.ObjectCount = &v
}

func (o QueueSizeDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QueueSizeDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ByteCount) {
		toSerialize["byteCount"] = o.ByteCount
	}
	if !IsNil(o.ObjectCount) {
		toSerialize["objectCount"] = o.ObjectCount
	}
	return toSerialize, nil
}

type NullableQueueSizeDTO struct {
	value *QueueSizeDTO
	isSet bool
}

func (v NullableQueueSizeDTO) Get() *QueueSizeDTO {
	return v.value
}

func (v *NullableQueueSizeDTO) Set(val *QueueSizeDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableQueueSizeDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableQueueSizeDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQueueSizeDTO(val *QueueSizeDTO) *NullableQueueSizeDTO {
	return &NullableQueueSizeDTO{value: val, isSet: true}
}

func (v NullableQueueSizeDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQueueSizeDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


