/*
NiFi Rest API

The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.

API version: 2.0.0
Contact: dev@nifi.apache.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nifiapi

import (
	"encoding/json"
)

// checks if the ConnectionStatusSnapshotDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConnectionStatusSnapshotDTO{}

// ConnectionStatusSnapshotDTO struct for ConnectionStatusSnapshotDTO
type ConnectionStatusSnapshotDTO struct {
	// The id of the connection.
	Id *string `json:"id,omitempty"`
	// The id of the process group the connection belongs to.
	GroupId *string `json:"groupId,omitempty"`
	// The name of the connection.
	Name *string `json:"name,omitempty"`
	// The id of the source of the connection.
	SourceId *string `json:"sourceId,omitempty"`
	// The name of the source of the connection.
	SourceName *string `json:"sourceName,omitempty"`
	// The id of the destination of the connection.
	DestinationId *string `json:"destinationId,omitempty"`
	// The name of the destination of the connection.
	DestinationName *string `json:"destinationName,omitempty"`
	Predictions *ConnectionStatusPredictionsSnapshotDTO `json:"predictions,omitempty"`
	// The number of FlowFiles that have come into the connection in the last 5 minutes.
	FlowFilesIn *int32 `json:"flowFilesIn,omitempty"`
	// The size of the FlowFiles that have come into the connection in the last 5 minutes.
	BytesIn *int64 `json:"bytesIn,omitempty"`
	// The input count/size for the connection in the last 5 minutes, pretty printed.
	Input *string `json:"input,omitempty"`
	// The number of FlowFiles that have left the connection in the last 5 minutes.
	FlowFilesOut *int32 `json:"flowFilesOut,omitempty"`
	// The number of bytes that have left the connection in the last 5 minutes.
	BytesOut *int64 `json:"bytesOut,omitempty"`
	// The output count/sie for the connection in the last 5 minutes, pretty printed.
	Output *string `json:"output,omitempty"`
	// The number of FlowFiles that are currently queued in the connection.
	FlowFilesQueued *int32 `json:"flowFilesQueued,omitempty"`
	// The size of the FlowFiles that are currently queued in the connection.
	BytesQueued *int64 `json:"bytesQueued,omitempty"`
	// The total count and size of queued flowfiles formatted.
	Queued *string `json:"queued,omitempty"`
	// The total size of flowfiles that are queued formatted.
	QueuedSize *string `json:"queuedSize,omitempty"`
	// The number of flowfiles that are queued, pretty printed.
	QueuedCount *string `json:"queuedCount,omitempty"`
	// Connection percent use regarding queued flow files count and backpressure threshold if configured.
	PercentUseCount *int32 `json:"percentUseCount,omitempty"`
	// Connection percent use regarding queued flow files size and backpressure threshold if configured.
	PercentUseBytes *int32 `json:"percentUseBytes,omitempty"`
	// The availability of FlowFiles in this connection
	FlowFileAvailability *string `json:"flowFileAvailability,omitempty"`
}

// NewConnectionStatusSnapshotDTO instantiates a new ConnectionStatusSnapshotDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectionStatusSnapshotDTO() *ConnectionStatusSnapshotDTO {
	this := ConnectionStatusSnapshotDTO{}
	return &this
}

// NewConnectionStatusSnapshotDTOWithDefaults instantiates a new ConnectionStatusSnapshotDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectionStatusSnapshotDTOWithDefaults() *ConnectionStatusSnapshotDTO {
	this := ConnectionStatusSnapshotDTO{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ConnectionStatusSnapshotDTO) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionStatusSnapshotDTO) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ConnectionStatusSnapshotDTO) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ConnectionStatusSnapshotDTO) SetId(v string) {
	o.Id = &v
}

// GetGroupId returns the GroupId field value if set, zero value otherwise.
func (o *ConnectionStatusSnapshotDTO) GetGroupId() string {
	if o == nil || IsNil(o.GroupId) {
		var ret string
		return ret
	}
	return *o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionStatusSnapshotDTO) GetGroupIdOk() (*string, bool) {
	if o == nil || IsNil(o.GroupId) {
		return nil, false
	}
	return o.GroupId, true
}

// HasGroupId returns a boolean if a field has been set.
func (o *ConnectionStatusSnapshotDTO) HasGroupId() bool {
	if o != nil && !IsNil(o.GroupId) {
		return true
	}

	return false
}

// SetGroupId gets a reference to the given string and assigns it to the GroupId field.
func (o *ConnectionStatusSnapshotDTO) SetGroupId(v string) {
	o.GroupId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ConnectionStatusSnapshotDTO) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionStatusSnapshotDTO) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ConnectionStatusSnapshotDTO) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ConnectionStatusSnapshotDTO) SetName(v string) {
	o.Name = &v
}

// GetSourceId returns the SourceId field value if set, zero value otherwise.
func (o *ConnectionStatusSnapshotDTO) GetSourceId() string {
	if o == nil || IsNil(o.SourceId) {
		var ret string
		return ret
	}
	return *o.SourceId
}

// GetSourceIdOk returns a tuple with the SourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionStatusSnapshotDTO) GetSourceIdOk() (*string, bool) {
	if o == nil || IsNil(o.SourceId) {
		return nil, false
	}
	return o.SourceId, true
}

// HasSourceId returns a boolean if a field has been set.
func (o *ConnectionStatusSnapshotDTO) HasSourceId() bool {
	if o != nil && !IsNil(o.SourceId) {
		return true
	}

	return false
}

// SetSourceId gets a reference to the given string and assigns it to the SourceId field.
func (o *ConnectionStatusSnapshotDTO) SetSourceId(v string) {
	o.SourceId = &v
}

// GetSourceName returns the SourceName field value if set, zero value otherwise.
func (o *ConnectionStatusSnapshotDTO) GetSourceName() string {
	if o == nil || IsNil(o.SourceName) {
		var ret string
		return ret
	}
	return *o.SourceName
}

// GetSourceNameOk returns a tuple with the SourceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionStatusSnapshotDTO) GetSourceNameOk() (*string, bool) {
	if o == nil || IsNil(o.SourceName) {
		return nil, false
	}
	return o.SourceName, true
}

// HasSourceName returns a boolean if a field has been set.
func (o *ConnectionStatusSnapshotDTO) HasSourceName() bool {
	if o != nil && !IsNil(o.SourceName) {
		return true
	}

	return false
}

// SetSourceName gets a reference to the given string and assigns it to the SourceName field.
func (o *ConnectionStatusSnapshotDTO) SetSourceName(v string) {
	o.SourceName = &v
}

// GetDestinationId returns the DestinationId field value if set, zero value otherwise.
func (o *ConnectionStatusSnapshotDTO) GetDestinationId() string {
	if o == nil || IsNil(o.DestinationId) {
		var ret string
		return ret
	}
	return *o.DestinationId
}

// GetDestinationIdOk returns a tuple with the DestinationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionStatusSnapshotDTO) GetDestinationIdOk() (*string, bool) {
	if o == nil || IsNil(o.DestinationId) {
		return nil, false
	}
	return o.DestinationId, true
}

// HasDestinationId returns a boolean if a field has been set.
func (o *ConnectionStatusSnapshotDTO) HasDestinationId() bool {
	if o != nil && !IsNil(o.DestinationId) {
		return true
	}

	return false
}

// SetDestinationId gets a reference to the given string and assigns it to the DestinationId field.
func (o *ConnectionStatusSnapshotDTO) SetDestinationId(v string) {
	o.DestinationId = &v
}

// GetDestinationName returns the DestinationName field value if set, zero value otherwise.
func (o *ConnectionStatusSnapshotDTO) GetDestinationName() string {
	if o == nil || IsNil(o.DestinationName) {
		var ret string
		return ret
	}
	return *o.DestinationName
}

// GetDestinationNameOk returns a tuple with the DestinationName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionStatusSnapshotDTO) GetDestinationNameOk() (*string, bool) {
	if o == nil || IsNil(o.DestinationName) {
		return nil, false
	}
	return o.DestinationName, true
}

// HasDestinationName returns a boolean if a field has been set.
func (o *ConnectionStatusSnapshotDTO) HasDestinationName() bool {
	if o != nil && !IsNil(o.DestinationName) {
		return true
	}

	return false
}

// SetDestinationName gets a reference to the given string and assigns it to the DestinationName field.
func (o *ConnectionStatusSnapshotDTO) SetDestinationName(v string) {
	o.DestinationName = &v
}

// GetPredictions returns the Predictions field value if set, zero value otherwise.
func (o *ConnectionStatusSnapshotDTO) GetPredictions() ConnectionStatusPredictionsSnapshotDTO {
	if o == nil || IsNil(o.Predictions) {
		var ret ConnectionStatusPredictionsSnapshotDTO
		return ret
	}
	return *o.Predictions
}

// GetPredictionsOk returns a tuple with the Predictions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionStatusSnapshotDTO) GetPredictionsOk() (*ConnectionStatusPredictionsSnapshotDTO, bool) {
	if o == nil || IsNil(o.Predictions) {
		return nil, false
	}
	return o.Predictions, true
}

// HasPredictions returns a boolean if a field has been set.
func (o *ConnectionStatusSnapshotDTO) HasPredictions() bool {
	if o != nil && !IsNil(o.Predictions) {
		return true
	}

	return false
}

// SetPredictions gets a reference to the given ConnectionStatusPredictionsSnapshotDTO and assigns it to the Predictions field.
func (o *ConnectionStatusSnapshotDTO) SetPredictions(v ConnectionStatusPredictionsSnapshotDTO) {
	o.Predictions = &v
}

// GetFlowFilesIn returns the FlowFilesIn field value if set, zero value otherwise.
func (o *ConnectionStatusSnapshotDTO) GetFlowFilesIn() int32 {
	if o == nil || IsNil(o.FlowFilesIn) {
		var ret int32
		return ret
	}
	return *o.FlowFilesIn
}

// GetFlowFilesInOk returns a tuple with the FlowFilesIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionStatusSnapshotDTO) GetFlowFilesInOk() (*int32, bool) {
	if o == nil || IsNil(o.FlowFilesIn) {
		return nil, false
	}
	return o.FlowFilesIn, true
}

// HasFlowFilesIn returns a boolean if a field has been set.
func (o *ConnectionStatusSnapshotDTO) HasFlowFilesIn() bool {
	if o != nil && !IsNil(o.FlowFilesIn) {
		return true
	}

	return false
}

// SetFlowFilesIn gets a reference to the given int32 and assigns it to the FlowFilesIn field.
func (o *ConnectionStatusSnapshotDTO) SetFlowFilesIn(v int32) {
	o.FlowFilesIn = &v
}

// GetBytesIn returns the BytesIn field value if set, zero value otherwise.
func (o *ConnectionStatusSnapshotDTO) GetBytesIn() int64 {
	if o == nil || IsNil(o.BytesIn) {
		var ret int64
		return ret
	}
	return *o.BytesIn
}

// GetBytesInOk returns a tuple with the BytesIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionStatusSnapshotDTO) GetBytesInOk() (*int64, bool) {
	if o == nil || IsNil(o.BytesIn) {
		return nil, false
	}
	return o.BytesIn, true
}

// HasBytesIn returns a boolean if a field has been set.
func (o *ConnectionStatusSnapshotDTO) HasBytesIn() bool {
	if o != nil && !IsNil(o.BytesIn) {
		return true
	}

	return false
}

// SetBytesIn gets a reference to the given int64 and assigns it to the BytesIn field.
func (o *ConnectionStatusSnapshotDTO) SetBytesIn(v int64) {
	o.BytesIn = &v
}

// GetInput returns the Input field value if set, zero value otherwise.
func (o *ConnectionStatusSnapshotDTO) GetInput() string {
	if o == nil || IsNil(o.Input) {
		var ret string
		return ret
	}
	return *o.Input
}

// GetInputOk returns a tuple with the Input field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionStatusSnapshotDTO) GetInputOk() (*string, bool) {
	if o == nil || IsNil(o.Input) {
		return nil, false
	}
	return o.Input, true
}

// HasInput returns a boolean if a field has been set.
func (o *ConnectionStatusSnapshotDTO) HasInput() bool {
	if o != nil && !IsNil(o.Input) {
		return true
	}

	return false
}

// SetInput gets a reference to the given string and assigns it to the Input field.
func (o *ConnectionStatusSnapshotDTO) SetInput(v string) {
	o.Input = &v
}

// GetFlowFilesOut returns the FlowFilesOut field value if set, zero value otherwise.
func (o *ConnectionStatusSnapshotDTO) GetFlowFilesOut() int32 {
	if o == nil || IsNil(o.FlowFilesOut) {
		var ret int32
		return ret
	}
	return *o.FlowFilesOut
}

// GetFlowFilesOutOk returns a tuple with the FlowFilesOut field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionStatusSnapshotDTO) GetFlowFilesOutOk() (*int32, bool) {
	if o == nil || IsNil(o.FlowFilesOut) {
		return nil, false
	}
	return o.FlowFilesOut, true
}

// HasFlowFilesOut returns a boolean if a field has been set.
func (o *ConnectionStatusSnapshotDTO) HasFlowFilesOut() bool {
	if o != nil && !IsNil(o.FlowFilesOut) {
		return true
	}

	return false
}

// SetFlowFilesOut gets a reference to the given int32 and assigns it to the FlowFilesOut field.
func (o *ConnectionStatusSnapshotDTO) SetFlowFilesOut(v int32) {
	o.FlowFilesOut = &v
}

// GetBytesOut returns the BytesOut field value if set, zero value otherwise.
func (o *ConnectionStatusSnapshotDTO) GetBytesOut() int64 {
	if o == nil || IsNil(o.BytesOut) {
		var ret int64
		return ret
	}
	return *o.BytesOut
}

// GetBytesOutOk returns a tuple with the BytesOut field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionStatusSnapshotDTO) GetBytesOutOk() (*int64, bool) {
	if o == nil || IsNil(o.BytesOut) {
		return nil, false
	}
	return o.BytesOut, true
}

// HasBytesOut returns a boolean if a field has been set.
func (o *ConnectionStatusSnapshotDTO) HasBytesOut() bool {
	if o != nil && !IsNil(o.BytesOut) {
		return true
	}

	return false
}

// SetBytesOut gets a reference to the given int64 and assigns it to the BytesOut field.
func (o *ConnectionStatusSnapshotDTO) SetBytesOut(v int64) {
	o.BytesOut = &v
}

// GetOutput returns the Output field value if set, zero value otherwise.
func (o *ConnectionStatusSnapshotDTO) GetOutput() string {
	if o == nil || IsNil(o.Output) {
		var ret string
		return ret
	}
	return *o.Output
}

// GetOutputOk returns a tuple with the Output field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionStatusSnapshotDTO) GetOutputOk() (*string, bool) {
	if o == nil || IsNil(o.Output) {
		return nil, false
	}
	return o.Output, true
}

// HasOutput returns a boolean if a field has been set.
func (o *ConnectionStatusSnapshotDTO) HasOutput() bool {
	if o != nil && !IsNil(o.Output) {
		return true
	}

	return false
}

// SetOutput gets a reference to the given string and assigns it to the Output field.
func (o *ConnectionStatusSnapshotDTO) SetOutput(v string) {
	o.Output = &v
}

// GetFlowFilesQueued returns the FlowFilesQueued field value if set, zero value otherwise.
func (o *ConnectionStatusSnapshotDTO) GetFlowFilesQueued() int32 {
	if o == nil || IsNil(o.FlowFilesQueued) {
		var ret int32
		return ret
	}
	return *o.FlowFilesQueued
}

// GetFlowFilesQueuedOk returns a tuple with the FlowFilesQueued field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionStatusSnapshotDTO) GetFlowFilesQueuedOk() (*int32, bool) {
	if o == nil || IsNil(o.FlowFilesQueued) {
		return nil, false
	}
	return o.FlowFilesQueued, true
}

// HasFlowFilesQueued returns a boolean if a field has been set.
func (o *ConnectionStatusSnapshotDTO) HasFlowFilesQueued() bool {
	if o != nil && !IsNil(o.FlowFilesQueued) {
		return true
	}

	return false
}

// SetFlowFilesQueued gets a reference to the given int32 and assigns it to the FlowFilesQueued field.
func (o *ConnectionStatusSnapshotDTO) SetFlowFilesQueued(v int32) {
	o.FlowFilesQueued = &v
}

// GetBytesQueued returns the BytesQueued field value if set, zero value otherwise.
func (o *ConnectionStatusSnapshotDTO) GetBytesQueued() int64 {
	if o == nil || IsNil(o.BytesQueued) {
		var ret int64
		return ret
	}
	return *o.BytesQueued
}

// GetBytesQueuedOk returns a tuple with the BytesQueued field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionStatusSnapshotDTO) GetBytesQueuedOk() (*int64, bool) {
	if o == nil || IsNil(o.BytesQueued) {
		return nil, false
	}
	return o.BytesQueued, true
}

// HasBytesQueued returns a boolean if a field has been set.
func (o *ConnectionStatusSnapshotDTO) HasBytesQueued() bool {
	if o != nil && !IsNil(o.BytesQueued) {
		return true
	}

	return false
}

// SetBytesQueued gets a reference to the given int64 and assigns it to the BytesQueued field.
func (o *ConnectionStatusSnapshotDTO) SetBytesQueued(v int64) {
	o.BytesQueued = &v
}

// GetQueued returns the Queued field value if set, zero value otherwise.
func (o *ConnectionStatusSnapshotDTO) GetQueued() string {
	if o == nil || IsNil(o.Queued) {
		var ret string
		return ret
	}
	return *o.Queued
}

// GetQueuedOk returns a tuple with the Queued field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionStatusSnapshotDTO) GetQueuedOk() (*string, bool) {
	if o == nil || IsNil(o.Queued) {
		return nil, false
	}
	return o.Queued, true
}

// HasQueued returns a boolean if a field has been set.
func (o *ConnectionStatusSnapshotDTO) HasQueued() bool {
	if o != nil && !IsNil(o.Queued) {
		return true
	}

	return false
}

// SetQueued gets a reference to the given string and assigns it to the Queued field.
func (o *ConnectionStatusSnapshotDTO) SetQueued(v string) {
	o.Queued = &v
}

// GetQueuedSize returns the QueuedSize field value if set, zero value otherwise.
func (o *ConnectionStatusSnapshotDTO) GetQueuedSize() string {
	if o == nil || IsNil(o.QueuedSize) {
		var ret string
		return ret
	}
	return *o.QueuedSize
}

// GetQueuedSizeOk returns a tuple with the QueuedSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionStatusSnapshotDTO) GetQueuedSizeOk() (*string, bool) {
	if o == nil || IsNil(o.QueuedSize) {
		return nil, false
	}
	return o.QueuedSize, true
}

// HasQueuedSize returns a boolean if a field has been set.
func (o *ConnectionStatusSnapshotDTO) HasQueuedSize() bool {
	if o != nil && !IsNil(o.QueuedSize) {
		return true
	}

	return false
}

// SetQueuedSize gets a reference to the given string and assigns it to the QueuedSize field.
func (o *ConnectionStatusSnapshotDTO) SetQueuedSize(v string) {
	o.QueuedSize = &v
}

// GetQueuedCount returns the QueuedCount field value if set, zero value otherwise.
func (o *ConnectionStatusSnapshotDTO) GetQueuedCount() string {
	if o == nil || IsNil(o.QueuedCount) {
		var ret string
		return ret
	}
	return *o.QueuedCount
}

// GetQueuedCountOk returns a tuple with the QueuedCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionStatusSnapshotDTO) GetQueuedCountOk() (*string, bool) {
	if o == nil || IsNil(o.QueuedCount) {
		return nil, false
	}
	return o.QueuedCount, true
}

// HasQueuedCount returns a boolean if a field has been set.
func (o *ConnectionStatusSnapshotDTO) HasQueuedCount() bool {
	if o != nil && !IsNil(o.QueuedCount) {
		return true
	}

	return false
}

// SetQueuedCount gets a reference to the given string and assigns it to the QueuedCount field.
func (o *ConnectionStatusSnapshotDTO) SetQueuedCount(v string) {
	o.QueuedCount = &v
}

// GetPercentUseCount returns the PercentUseCount field value if set, zero value otherwise.
func (o *ConnectionStatusSnapshotDTO) GetPercentUseCount() int32 {
	if o == nil || IsNil(o.PercentUseCount) {
		var ret int32
		return ret
	}
	return *o.PercentUseCount
}

// GetPercentUseCountOk returns a tuple with the PercentUseCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionStatusSnapshotDTO) GetPercentUseCountOk() (*int32, bool) {
	if o == nil || IsNil(o.PercentUseCount) {
		return nil, false
	}
	return o.PercentUseCount, true
}

// HasPercentUseCount returns a boolean if a field has been set.
func (o *ConnectionStatusSnapshotDTO) HasPercentUseCount() bool {
	if o != nil && !IsNil(o.PercentUseCount) {
		return true
	}

	return false
}

// SetPercentUseCount gets a reference to the given int32 and assigns it to the PercentUseCount field.
func (o *ConnectionStatusSnapshotDTO) SetPercentUseCount(v int32) {
	o.PercentUseCount = &v
}

// GetPercentUseBytes returns the PercentUseBytes field value if set, zero value otherwise.
func (o *ConnectionStatusSnapshotDTO) GetPercentUseBytes() int32 {
	if o == nil || IsNil(o.PercentUseBytes) {
		var ret int32
		return ret
	}
	return *o.PercentUseBytes
}

// GetPercentUseBytesOk returns a tuple with the PercentUseBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionStatusSnapshotDTO) GetPercentUseBytesOk() (*int32, bool) {
	if o == nil || IsNil(o.PercentUseBytes) {
		return nil, false
	}
	return o.PercentUseBytes, true
}

// HasPercentUseBytes returns a boolean if a field has been set.
func (o *ConnectionStatusSnapshotDTO) HasPercentUseBytes() bool {
	if o != nil && !IsNil(o.PercentUseBytes) {
		return true
	}

	return false
}

// SetPercentUseBytes gets a reference to the given int32 and assigns it to the PercentUseBytes field.
func (o *ConnectionStatusSnapshotDTO) SetPercentUseBytes(v int32) {
	o.PercentUseBytes = &v
}

// GetFlowFileAvailability returns the FlowFileAvailability field value if set, zero value otherwise.
func (o *ConnectionStatusSnapshotDTO) GetFlowFileAvailability() string {
	if o == nil || IsNil(o.FlowFileAvailability) {
		var ret string
		return ret
	}
	return *o.FlowFileAvailability
}

// GetFlowFileAvailabilityOk returns a tuple with the FlowFileAvailability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionStatusSnapshotDTO) GetFlowFileAvailabilityOk() (*string, bool) {
	if o == nil || IsNil(o.FlowFileAvailability) {
		return nil, false
	}
	return o.FlowFileAvailability, true
}

// HasFlowFileAvailability returns a boolean if a field has been set.
func (o *ConnectionStatusSnapshotDTO) HasFlowFileAvailability() bool {
	if o != nil && !IsNil(o.FlowFileAvailability) {
		return true
	}

	return false
}

// SetFlowFileAvailability gets a reference to the given string and assigns it to the FlowFileAvailability field.
func (o *ConnectionStatusSnapshotDTO) SetFlowFileAvailability(v string) {
	o.FlowFileAvailability = &v
}

func (o ConnectionStatusSnapshotDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConnectionStatusSnapshotDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.GroupId) {
		toSerialize["groupId"] = o.GroupId
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.SourceId) {
		toSerialize["sourceId"] = o.SourceId
	}
	if !IsNil(o.SourceName) {
		toSerialize["sourceName"] = o.SourceName
	}
	if !IsNil(o.DestinationId) {
		toSerialize["destinationId"] = o.DestinationId
	}
	if !IsNil(o.DestinationName) {
		toSerialize["destinationName"] = o.DestinationName
	}
	if !IsNil(o.Predictions) {
		toSerialize["predictions"] = o.Predictions
	}
	if !IsNil(o.FlowFilesIn) {
		toSerialize["flowFilesIn"] = o.FlowFilesIn
	}
	if !IsNil(o.BytesIn) {
		toSerialize["bytesIn"] = o.BytesIn
	}
	if !IsNil(o.Input) {
		toSerialize["input"] = o.Input
	}
	if !IsNil(o.FlowFilesOut) {
		toSerialize["flowFilesOut"] = o.FlowFilesOut
	}
	if !IsNil(o.BytesOut) {
		toSerialize["bytesOut"] = o.BytesOut
	}
	if !IsNil(o.Output) {
		toSerialize["output"] = o.Output
	}
	if !IsNil(o.FlowFilesQueued) {
		toSerialize["flowFilesQueued"] = o.FlowFilesQueued
	}
	if !IsNil(o.BytesQueued) {
		toSerialize["bytesQueued"] = o.BytesQueued
	}
	if !IsNil(o.Queued) {
		toSerialize["queued"] = o.Queued
	}
	if !IsNil(o.QueuedSize) {
		toSerialize["queuedSize"] = o.QueuedSize
	}
	if !IsNil(o.QueuedCount) {
		toSerialize["queuedCount"] = o.QueuedCount
	}
	if !IsNil(o.PercentUseCount) {
		toSerialize["percentUseCount"] = o.PercentUseCount
	}
	if !IsNil(o.PercentUseBytes) {
		toSerialize["percentUseBytes"] = o.PercentUseBytes
	}
	if !IsNil(o.FlowFileAvailability) {
		toSerialize["flowFileAvailability"] = o.FlowFileAvailability
	}
	return toSerialize, nil
}

type NullableConnectionStatusSnapshotDTO struct {
	value *ConnectionStatusSnapshotDTO
	isSet bool
}

func (v NullableConnectionStatusSnapshotDTO) Get() *ConnectionStatusSnapshotDTO {
	return v.value
}

func (v *NullableConnectionStatusSnapshotDTO) Set(val *ConnectionStatusSnapshotDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectionStatusSnapshotDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectionStatusSnapshotDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectionStatusSnapshotDTO(val *ConnectionStatusSnapshotDTO) *NullableConnectionStatusSnapshotDTO {
	return &NullableConnectionStatusSnapshotDTO{value: val, isSet: true}
}

func (v NullableConnectionStatusSnapshotDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectionStatusSnapshotDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


