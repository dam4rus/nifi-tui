/*
NiFi Rest API

The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.

API version: 2.0.0
Contact: dev@nifi.apache.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nifiapi

import (
	"encoding/json"
)

// checks if the UserGroupDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserGroupDTO{}

// UserGroupDTO struct for UserGroupDTO
type UserGroupDTO struct {
	// The id of the component.
	Id *string `json:"id,omitempty"`
	// The ID of the corresponding component that is under version control
	VersionedComponentId *string `json:"versionedComponentId,omitempty"`
	// The id of parent process group of this component if applicable.
	ParentGroupId *string `json:"parentGroupId,omitempty"`
	Position *PositionDTO `json:"position,omitempty"`
	// The identity of the tenant.
	Identity *string `json:"identity,omitempty"`
	// Whether this tenant is configurable.
	Configurable *bool `json:"configurable,omitempty"`
	// The users that belong to the user group.
	Users []TenantEntity `json:"users,omitempty"`
	// The access policies this user group belongs to. This field was incorrectly defined as an AccessPolicyEntity. For compatibility reasons the field will remain of this type, however only the fields that are present in the AccessPolicySummaryEntity will be populated here.
	AccessPolicies []AccessPolicyEntity `json:"accessPolicies,omitempty"`
}

// NewUserGroupDTO instantiates a new UserGroupDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserGroupDTO() *UserGroupDTO {
	this := UserGroupDTO{}
	return &this
}

// NewUserGroupDTOWithDefaults instantiates a new UserGroupDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserGroupDTOWithDefaults() *UserGroupDTO {
	this := UserGroupDTO{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *UserGroupDTO) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserGroupDTO) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *UserGroupDTO) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *UserGroupDTO) SetId(v string) {
	o.Id = &v
}

// GetVersionedComponentId returns the VersionedComponentId field value if set, zero value otherwise.
func (o *UserGroupDTO) GetVersionedComponentId() string {
	if o == nil || IsNil(o.VersionedComponentId) {
		var ret string
		return ret
	}
	return *o.VersionedComponentId
}

// GetVersionedComponentIdOk returns a tuple with the VersionedComponentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserGroupDTO) GetVersionedComponentIdOk() (*string, bool) {
	if o == nil || IsNil(o.VersionedComponentId) {
		return nil, false
	}
	return o.VersionedComponentId, true
}

// HasVersionedComponentId returns a boolean if a field has been set.
func (o *UserGroupDTO) HasVersionedComponentId() bool {
	if o != nil && !IsNil(o.VersionedComponentId) {
		return true
	}

	return false
}

// SetVersionedComponentId gets a reference to the given string and assigns it to the VersionedComponentId field.
func (o *UserGroupDTO) SetVersionedComponentId(v string) {
	o.VersionedComponentId = &v
}

// GetParentGroupId returns the ParentGroupId field value if set, zero value otherwise.
func (o *UserGroupDTO) GetParentGroupId() string {
	if o == nil || IsNil(o.ParentGroupId) {
		var ret string
		return ret
	}
	return *o.ParentGroupId
}

// GetParentGroupIdOk returns a tuple with the ParentGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserGroupDTO) GetParentGroupIdOk() (*string, bool) {
	if o == nil || IsNil(o.ParentGroupId) {
		return nil, false
	}
	return o.ParentGroupId, true
}

// HasParentGroupId returns a boolean if a field has been set.
func (o *UserGroupDTO) HasParentGroupId() bool {
	if o != nil && !IsNil(o.ParentGroupId) {
		return true
	}

	return false
}

// SetParentGroupId gets a reference to the given string and assigns it to the ParentGroupId field.
func (o *UserGroupDTO) SetParentGroupId(v string) {
	o.ParentGroupId = &v
}

// GetPosition returns the Position field value if set, zero value otherwise.
func (o *UserGroupDTO) GetPosition() PositionDTO {
	if o == nil || IsNil(o.Position) {
		var ret PositionDTO
		return ret
	}
	return *o.Position
}

// GetPositionOk returns a tuple with the Position field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserGroupDTO) GetPositionOk() (*PositionDTO, bool) {
	if o == nil || IsNil(o.Position) {
		return nil, false
	}
	return o.Position, true
}

// HasPosition returns a boolean if a field has been set.
func (o *UserGroupDTO) HasPosition() bool {
	if o != nil && !IsNil(o.Position) {
		return true
	}

	return false
}

// SetPosition gets a reference to the given PositionDTO and assigns it to the Position field.
func (o *UserGroupDTO) SetPosition(v PositionDTO) {
	o.Position = &v
}

// GetIdentity returns the Identity field value if set, zero value otherwise.
func (o *UserGroupDTO) GetIdentity() string {
	if o == nil || IsNil(o.Identity) {
		var ret string
		return ret
	}
	return *o.Identity
}

// GetIdentityOk returns a tuple with the Identity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserGroupDTO) GetIdentityOk() (*string, bool) {
	if o == nil || IsNil(o.Identity) {
		return nil, false
	}
	return o.Identity, true
}

// HasIdentity returns a boolean if a field has been set.
func (o *UserGroupDTO) HasIdentity() bool {
	if o != nil && !IsNil(o.Identity) {
		return true
	}

	return false
}

// SetIdentity gets a reference to the given string and assigns it to the Identity field.
func (o *UserGroupDTO) SetIdentity(v string) {
	o.Identity = &v
}

// GetConfigurable returns the Configurable field value if set, zero value otherwise.
func (o *UserGroupDTO) GetConfigurable() bool {
	if o == nil || IsNil(o.Configurable) {
		var ret bool
		return ret
	}
	return *o.Configurable
}

// GetConfigurableOk returns a tuple with the Configurable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserGroupDTO) GetConfigurableOk() (*bool, bool) {
	if o == nil || IsNil(o.Configurable) {
		return nil, false
	}
	return o.Configurable, true
}

// HasConfigurable returns a boolean if a field has been set.
func (o *UserGroupDTO) HasConfigurable() bool {
	if o != nil && !IsNil(o.Configurable) {
		return true
	}

	return false
}

// SetConfigurable gets a reference to the given bool and assigns it to the Configurable field.
func (o *UserGroupDTO) SetConfigurable(v bool) {
	o.Configurable = &v
}

// GetUsers returns the Users field value if set, zero value otherwise.
func (o *UserGroupDTO) GetUsers() []TenantEntity {
	if o == nil || IsNil(o.Users) {
		var ret []TenantEntity
		return ret
	}
	return o.Users
}

// GetUsersOk returns a tuple with the Users field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserGroupDTO) GetUsersOk() ([]TenantEntity, bool) {
	if o == nil || IsNil(o.Users) {
		return nil, false
	}
	return o.Users, true
}

// HasUsers returns a boolean if a field has been set.
func (o *UserGroupDTO) HasUsers() bool {
	if o != nil && !IsNil(o.Users) {
		return true
	}

	return false
}

// SetUsers gets a reference to the given []TenantEntity and assigns it to the Users field.
func (o *UserGroupDTO) SetUsers(v []TenantEntity) {
	o.Users = v
}

// GetAccessPolicies returns the AccessPolicies field value if set, zero value otherwise.
func (o *UserGroupDTO) GetAccessPolicies() []AccessPolicyEntity {
	if o == nil || IsNil(o.AccessPolicies) {
		var ret []AccessPolicyEntity
		return ret
	}
	return o.AccessPolicies
}

// GetAccessPoliciesOk returns a tuple with the AccessPolicies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserGroupDTO) GetAccessPoliciesOk() ([]AccessPolicyEntity, bool) {
	if o == nil || IsNil(o.AccessPolicies) {
		return nil, false
	}
	return o.AccessPolicies, true
}

// HasAccessPolicies returns a boolean if a field has been set.
func (o *UserGroupDTO) HasAccessPolicies() bool {
	if o != nil && !IsNil(o.AccessPolicies) {
		return true
	}

	return false
}

// SetAccessPolicies gets a reference to the given []AccessPolicyEntity and assigns it to the AccessPolicies field.
func (o *UserGroupDTO) SetAccessPolicies(v []AccessPolicyEntity) {
	o.AccessPolicies = v
}

func (o UserGroupDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserGroupDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.VersionedComponentId) {
		toSerialize["versionedComponentId"] = o.VersionedComponentId
	}
	if !IsNil(o.ParentGroupId) {
		toSerialize["parentGroupId"] = o.ParentGroupId
	}
	if !IsNil(o.Position) {
		toSerialize["position"] = o.Position
	}
	if !IsNil(o.Identity) {
		toSerialize["identity"] = o.Identity
	}
	if !IsNil(o.Configurable) {
		toSerialize["configurable"] = o.Configurable
	}
	if !IsNil(o.Users) {
		toSerialize["users"] = o.Users
	}
	if !IsNil(o.AccessPolicies) {
		toSerialize["accessPolicies"] = o.AccessPolicies
	}
	return toSerialize, nil
}

type NullableUserGroupDTO struct {
	value *UserGroupDTO
	isSet bool
}

func (v NullableUserGroupDTO) Get() *UserGroupDTO {
	return v.value
}

func (v *NullableUserGroupDTO) Set(val *UserGroupDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableUserGroupDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableUserGroupDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserGroupDTO(val *UserGroupDTO) *NullableUserGroupDTO {
	return &NullableUserGroupDTO{value: val, isSet: true}
}

func (v NullableUserGroupDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserGroupDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


