/*
NiFi Rest API

The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.

API version: 2.0.0
Contact: dev@nifi.apache.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nifiapi

import (
	"encoding/json"
)

// checks if the ParameterProviderParameterFetchEntity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ParameterProviderParameterFetchEntity{}

// ParameterProviderParameterFetchEntity struct for ParameterProviderParameterFetchEntity
type ParameterProviderParameterFetchEntity struct {
	// The id of the parameter provider.
	Id *string `json:"id,omitempty"`
	Revision *RevisionDTO `json:"revision,omitempty"`
	// Acknowledges that this node is disconnected to allow for mutable requests to proceed.
	DisconnectedNodeAcknowledged *bool `json:"disconnectedNodeAcknowledged,omitempty"`
}

// NewParameterProviderParameterFetchEntity instantiates a new ParameterProviderParameterFetchEntity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewParameterProviderParameterFetchEntity() *ParameterProviderParameterFetchEntity {
	this := ParameterProviderParameterFetchEntity{}
	return &this
}

// NewParameterProviderParameterFetchEntityWithDefaults instantiates a new ParameterProviderParameterFetchEntity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewParameterProviderParameterFetchEntityWithDefaults() *ParameterProviderParameterFetchEntity {
	this := ParameterProviderParameterFetchEntity{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ParameterProviderParameterFetchEntity) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParameterProviderParameterFetchEntity) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ParameterProviderParameterFetchEntity) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ParameterProviderParameterFetchEntity) SetId(v string) {
	o.Id = &v
}

// GetRevision returns the Revision field value if set, zero value otherwise.
func (o *ParameterProviderParameterFetchEntity) GetRevision() RevisionDTO {
	if o == nil || IsNil(o.Revision) {
		var ret RevisionDTO
		return ret
	}
	return *o.Revision
}

// GetRevisionOk returns a tuple with the Revision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParameterProviderParameterFetchEntity) GetRevisionOk() (*RevisionDTO, bool) {
	if o == nil || IsNil(o.Revision) {
		return nil, false
	}
	return o.Revision, true
}

// HasRevision returns a boolean if a field has been set.
func (o *ParameterProviderParameterFetchEntity) HasRevision() bool {
	if o != nil && !IsNil(o.Revision) {
		return true
	}

	return false
}

// SetRevision gets a reference to the given RevisionDTO and assigns it to the Revision field.
func (o *ParameterProviderParameterFetchEntity) SetRevision(v RevisionDTO) {
	o.Revision = &v
}

// GetDisconnectedNodeAcknowledged returns the DisconnectedNodeAcknowledged field value if set, zero value otherwise.
func (o *ParameterProviderParameterFetchEntity) GetDisconnectedNodeAcknowledged() bool {
	if o == nil || IsNil(o.DisconnectedNodeAcknowledged) {
		var ret bool
		return ret
	}
	return *o.DisconnectedNodeAcknowledged
}

// GetDisconnectedNodeAcknowledgedOk returns a tuple with the DisconnectedNodeAcknowledged field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParameterProviderParameterFetchEntity) GetDisconnectedNodeAcknowledgedOk() (*bool, bool) {
	if o == nil || IsNil(o.DisconnectedNodeAcknowledged) {
		return nil, false
	}
	return o.DisconnectedNodeAcknowledged, true
}

// HasDisconnectedNodeAcknowledged returns a boolean if a field has been set.
func (o *ParameterProviderParameterFetchEntity) HasDisconnectedNodeAcknowledged() bool {
	if o != nil && !IsNil(o.DisconnectedNodeAcknowledged) {
		return true
	}

	return false
}

// SetDisconnectedNodeAcknowledged gets a reference to the given bool and assigns it to the DisconnectedNodeAcknowledged field.
func (o *ParameterProviderParameterFetchEntity) SetDisconnectedNodeAcknowledged(v bool) {
	o.DisconnectedNodeAcknowledged = &v
}

func (o ParameterProviderParameterFetchEntity) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ParameterProviderParameterFetchEntity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Revision) {
		toSerialize["revision"] = o.Revision
	}
	if !IsNil(o.DisconnectedNodeAcknowledged) {
		toSerialize["disconnectedNodeAcknowledged"] = o.DisconnectedNodeAcknowledged
	}
	return toSerialize, nil
}

type NullableParameterProviderParameterFetchEntity struct {
	value *ParameterProviderParameterFetchEntity
	isSet bool
}

func (v NullableParameterProviderParameterFetchEntity) Get() *ParameterProviderParameterFetchEntity {
	return v.value
}

func (v *NullableParameterProviderParameterFetchEntity) Set(val *ParameterProviderParameterFetchEntity) {
	v.value = val
	v.isSet = true
}

func (v NullableParameterProviderParameterFetchEntity) IsSet() bool {
	return v.isSet
}

func (v *NullableParameterProviderParameterFetchEntity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParameterProviderParameterFetchEntity(val *ParameterProviderParameterFetchEntity) *NullableParameterProviderParameterFetchEntity {
	return &NullableParameterProviderParameterFetchEntity{value: val, isSet: true}
}

func (v NullableParameterProviderParameterFetchEntity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParameterProviderParameterFetchEntity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


