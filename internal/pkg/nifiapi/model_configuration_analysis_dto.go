/*
NiFi Rest API

The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.

API version: 2.0.0
Contact: dev@nifi.apache.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nifiapi

import (
	"encoding/json"
)

// checks if the ConfigurationAnalysisDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigurationAnalysisDTO{}

// ConfigurationAnalysisDTO struct for ConfigurationAnalysisDTO
type ConfigurationAnalysisDTO struct {
	// The ID of the component
	ComponentId *string `json:"componentId,omitempty"`
	// The configured properties for the component
	Properties *map[string]string `json:"properties,omitempty"`
	// The attributes that are referenced by the properties, mapped to recently used values
	ReferencedAttributes *map[string]string `json:"referencedAttributes,omitempty"`
	// Whether or not the component supports verification
	SupportsVerification *bool `json:"supportsVerification,omitempty"`
}

// NewConfigurationAnalysisDTO instantiates a new ConfigurationAnalysisDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigurationAnalysisDTO() *ConfigurationAnalysisDTO {
	this := ConfigurationAnalysisDTO{}
	return &this
}

// NewConfigurationAnalysisDTOWithDefaults instantiates a new ConfigurationAnalysisDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigurationAnalysisDTOWithDefaults() *ConfigurationAnalysisDTO {
	this := ConfigurationAnalysisDTO{}
	return &this
}

// GetComponentId returns the ComponentId field value if set, zero value otherwise.
func (o *ConfigurationAnalysisDTO) GetComponentId() string {
	if o == nil || IsNil(o.ComponentId) {
		var ret string
		return ret
	}
	return *o.ComponentId
}

// GetComponentIdOk returns a tuple with the ComponentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationAnalysisDTO) GetComponentIdOk() (*string, bool) {
	if o == nil || IsNil(o.ComponentId) {
		return nil, false
	}
	return o.ComponentId, true
}

// HasComponentId returns a boolean if a field has been set.
func (o *ConfigurationAnalysisDTO) HasComponentId() bool {
	if o != nil && !IsNil(o.ComponentId) {
		return true
	}

	return false
}

// SetComponentId gets a reference to the given string and assigns it to the ComponentId field.
func (o *ConfigurationAnalysisDTO) SetComponentId(v string) {
	o.ComponentId = &v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *ConfigurationAnalysisDTO) GetProperties() map[string]string {
	if o == nil || IsNil(o.Properties) {
		var ret map[string]string
		return ret
	}
	return *o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationAnalysisDTO) GetPropertiesOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Properties) {
		return nil, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *ConfigurationAnalysisDTO) HasProperties() bool {
	if o != nil && !IsNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given map[string]string and assigns it to the Properties field.
func (o *ConfigurationAnalysisDTO) SetProperties(v map[string]string) {
	o.Properties = &v
}

// GetReferencedAttributes returns the ReferencedAttributes field value if set, zero value otherwise.
func (o *ConfigurationAnalysisDTO) GetReferencedAttributes() map[string]string {
	if o == nil || IsNil(o.ReferencedAttributes) {
		var ret map[string]string
		return ret
	}
	return *o.ReferencedAttributes
}

// GetReferencedAttributesOk returns a tuple with the ReferencedAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationAnalysisDTO) GetReferencedAttributesOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.ReferencedAttributes) {
		return nil, false
	}
	return o.ReferencedAttributes, true
}

// HasReferencedAttributes returns a boolean if a field has been set.
func (o *ConfigurationAnalysisDTO) HasReferencedAttributes() bool {
	if o != nil && !IsNil(o.ReferencedAttributes) {
		return true
	}

	return false
}

// SetReferencedAttributes gets a reference to the given map[string]string and assigns it to the ReferencedAttributes field.
func (o *ConfigurationAnalysisDTO) SetReferencedAttributes(v map[string]string) {
	o.ReferencedAttributes = &v
}

// GetSupportsVerification returns the SupportsVerification field value if set, zero value otherwise.
func (o *ConfigurationAnalysisDTO) GetSupportsVerification() bool {
	if o == nil || IsNil(o.SupportsVerification) {
		var ret bool
		return ret
	}
	return *o.SupportsVerification
}

// GetSupportsVerificationOk returns a tuple with the SupportsVerification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationAnalysisDTO) GetSupportsVerificationOk() (*bool, bool) {
	if o == nil || IsNil(o.SupportsVerification) {
		return nil, false
	}
	return o.SupportsVerification, true
}

// HasSupportsVerification returns a boolean if a field has been set.
func (o *ConfigurationAnalysisDTO) HasSupportsVerification() bool {
	if o != nil && !IsNil(o.SupportsVerification) {
		return true
	}

	return false
}

// SetSupportsVerification gets a reference to the given bool and assigns it to the SupportsVerification field.
func (o *ConfigurationAnalysisDTO) SetSupportsVerification(v bool) {
	o.SupportsVerification = &v
}

func (o ConfigurationAnalysisDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigurationAnalysisDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ComponentId) {
		toSerialize["componentId"] = o.ComponentId
	}
	if !IsNil(o.Properties) {
		toSerialize["properties"] = o.Properties
	}
	if !IsNil(o.ReferencedAttributes) {
		toSerialize["referencedAttributes"] = o.ReferencedAttributes
	}
	if !IsNil(o.SupportsVerification) {
		toSerialize["supportsVerification"] = o.SupportsVerification
	}
	return toSerialize, nil
}

type NullableConfigurationAnalysisDTO struct {
	value *ConfigurationAnalysisDTO
	isSet bool
}

func (v NullableConfigurationAnalysisDTO) Get() *ConfigurationAnalysisDTO {
	return v.value
}

func (v *NullableConfigurationAnalysisDTO) Set(val *ConfigurationAnalysisDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigurationAnalysisDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigurationAnalysisDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigurationAnalysisDTO(val *ConfigurationAnalysisDTO) *NullableConfigurationAnalysisDTO {
	return &NullableConfigurationAnalysisDTO{value: val, isSet: true}
}

func (v NullableConfigurationAnalysisDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigurationAnalysisDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


