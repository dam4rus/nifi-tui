/*
NiFi Rest API

The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.

API version: 2.0.0
Contact: dev@nifi.apache.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nifiapi

import (
	"encoding/json"
)

// checks if the VersionedProcessGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VersionedProcessGroup{}

// VersionedProcessGroup struct for VersionedProcessGroup
type VersionedProcessGroup struct {
	// The component's unique identifier
	Identifier *string `json:"identifier,omitempty"`
	// The instance ID of an existing component that is described by this VersionedComponent, or null if this is not mapped to an instantiated component
	InstanceIdentifier *string `json:"instanceIdentifier,omitempty"`
	// The component's name
	Name *string `json:"name,omitempty"`
	// The user-supplied comments for the component
	Comments *string `json:"comments,omitempty"`
	Position *Position `json:"position,omitempty"`
	// The child Process Groups
	ProcessGroups []VersionedProcessGroup `json:"processGroups,omitempty"`
	// The Remote Process Groups
	RemoteProcessGroups []VersionedRemoteProcessGroup `json:"remoteProcessGroups,omitempty"`
	// The Processors
	Processors []VersionedProcessor `json:"processors,omitempty"`
	// The Input Ports
	InputPorts []VersionedPort `json:"inputPorts,omitempty"`
	// The Output Ports
	OutputPorts []VersionedPort `json:"outputPorts,omitempty"`
	// The Connections
	Connections []VersionedConnection `json:"connections,omitempty"`
	// The Labels
	Labels []VersionedLabel `json:"labels,omitempty"`
	// The Funnels
	Funnels []VersionedFunnel `json:"funnels,omitempty"`
	// The Controller Services
	ControllerServices []VersionedControllerService `json:"controllerServices,omitempty"`
	VersionedFlowCoordinates *VersionedFlowCoordinates `json:"versionedFlowCoordinates,omitempty"`
	// The Variables in the Variable Registry for this Process Group (not including any ancestor or descendant Process Groups)
	Variables *map[string]string `json:"variables,omitempty"`
	// The name of the parameter context used by this process group
	ParameterContextName *string `json:"parameterContextName,omitempty"`
	// The default FlowFile Expiration for this Process Group.
	DefaultFlowFileExpiration *string `json:"defaultFlowFileExpiration,omitempty"`
	// Default value used in this Process Group for the maximum number of objects that can be queued before back pressure is applied.
	DefaultBackPressureObjectThreshold *int64 `json:"defaultBackPressureObjectThreshold,omitempty"`
	// Default value used in this Process Group for the maximum data size of objects that can be queued before back pressure is applied.
	DefaultBackPressureDataSizeThreshold *string `json:"defaultBackPressureDataSizeThreshold,omitempty"`
	ComponentType *string `json:"componentType,omitempty"`
	// The configured FlowFile Concurrency for the Process Group
	FlowFileConcurrency *string `json:"flowFileConcurrency,omitempty"`
	// The FlowFile Outbound Policy for the Process Group
	FlowFileOutboundPolicy *string `json:"flowFileOutboundPolicy,omitempty"`
	// The ID of the Process Group that this component belongs to
	GroupIdentifier *string `json:"groupIdentifier,omitempty"`
}

// NewVersionedProcessGroup instantiates a new VersionedProcessGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVersionedProcessGroup() *VersionedProcessGroup {
	this := VersionedProcessGroup{}
	return &this
}

// NewVersionedProcessGroupWithDefaults instantiates a new VersionedProcessGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVersionedProcessGroupWithDefaults() *VersionedProcessGroup {
	this := VersionedProcessGroup{}
	return &this
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *VersionedProcessGroup) GetIdentifier() string {
	if o == nil || IsNil(o.Identifier) {
		var ret string
		return ret
	}
	return *o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionedProcessGroup) GetIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.Identifier) {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *VersionedProcessGroup) HasIdentifier() bool {
	if o != nil && !IsNil(o.Identifier) {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given string and assigns it to the Identifier field.
func (o *VersionedProcessGroup) SetIdentifier(v string) {
	o.Identifier = &v
}

// GetInstanceIdentifier returns the InstanceIdentifier field value if set, zero value otherwise.
func (o *VersionedProcessGroup) GetInstanceIdentifier() string {
	if o == nil || IsNil(o.InstanceIdentifier) {
		var ret string
		return ret
	}
	return *o.InstanceIdentifier
}

// GetInstanceIdentifierOk returns a tuple with the InstanceIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionedProcessGroup) GetInstanceIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.InstanceIdentifier) {
		return nil, false
	}
	return o.InstanceIdentifier, true
}

// HasInstanceIdentifier returns a boolean if a field has been set.
func (o *VersionedProcessGroup) HasInstanceIdentifier() bool {
	if o != nil && !IsNil(o.InstanceIdentifier) {
		return true
	}

	return false
}

// SetInstanceIdentifier gets a reference to the given string and assigns it to the InstanceIdentifier field.
func (o *VersionedProcessGroup) SetInstanceIdentifier(v string) {
	o.InstanceIdentifier = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *VersionedProcessGroup) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionedProcessGroup) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *VersionedProcessGroup) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *VersionedProcessGroup) SetName(v string) {
	o.Name = &v
}

// GetComments returns the Comments field value if set, zero value otherwise.
func (o *VersionedProcessGroup) GetComments() string {
	if o == nil || IsNil(o.Comments) {
		var ret string
		return ret
	}
	return *o.Comments
}

// GetCommentsOk returns a tuple with the Comments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionedProcessGroup) GetCommentsOk() (*string, bool) {
	if o == nil || IsNil(o.Comments) {
		return nil, false
	}
	return o.Comments, true
}

// HasComments returns a boolean if a field has been set.
func (o *VersionedProcessGroup) HasComments() bool {
	if o != nil && !IsNil(o.Comments) {
		return true
	}

	return false
}

// SetComments gets a reference to the given string and assigns it to the Comments field.
func (o *VersionedProcessGroup) SetComments(v string) {
	o.Comments = &v
}

// GetPosition returns the Position field value if set, zero value otherwise.
func (o *VersionedProcessGroup) GetPosition() Position {
	if o == nil || IsNil(o.Position) {
		var ret Position
		return ret
	}
	return *o.Position
}

// GetPositionOk returns a tuple with the Position field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionedProcessGroup) GetPositionOk() (*Position, bool) {
	if o == nil || IsNil(o.Position) {
		return nil, false
	}
	return o.Position, true
}

// HasPosition returns a boolean if a field has been set.
func (o *VersionedProcessGroup) HasPosition() bool {
	if o != nil && !IsNil(o.Position) {
		return true
	}

	return false
}

// SetPosition gets a reference to the given Position and assigns it to the Position field.
func (o *VersionedProcessGroup) SetPosition(v Position) {
	o.Position = &v
}

// GetProcessGroups returns the ProcessGroups field value if set, zero value otherwise.
func (o *VersionedProcessGroup) GetProcessGroups() []VersionedProcessGroup {
	if o == nil || IsNil(o.ProcessGroups) {
		var ret []VersionedProcessGroup
		return ret
	}
	return o.ProcessGroups
}

// GetProcessGroupsOk returns a tuple with the ProcessGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionedProcessGroup) GetProcessGroupsOk() ([]VersionedProcessGroup, bool) {
	if o == nil || IsNil(o.ProcessGroups) {
		return nil, false
	}
	return o.ProcessGroups, true
}

// HasProcessGroups returns a boolean if a field has been set.
func (o *VersionedProcessGroup) HasProcessGroups() bool {
	if o != nil && !IsNil(o.ProcessGroups) {
		return true
	}

	return false
}

// SetProcessGroups gets a reference to the given []VersionedProcessGroup and assigns it to the ProcessGroups field.
func (o *VersionedProcessGroup) SetProcessGroups(v []VersionedProcessGroup) {
	o.ProcessGroups = v
}

// GetRemoteProcessGroups returns the RemoteProcessGroups field value if set, zero value otherwise.
func (o *VersionedProcessGroup) GetRemoteProcessGroups() []VersionedRemoteProcessGroup {
	if o == nil || IsNil(o.RemoteProcessGroups) {
		var ret []VersionedRemoteProcessGroup
		return ret
	}
	return o.RemoteProcessGroups
}

// GetRemoteProcessGroupsOk returns a tuple with the RemoteProcessGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionedProcessGroup) GetRemoteProcessGroupsOk() ([]VersionedRemoteProcessGroup, bool) {
	if o == nil || IsNil(o.RemoteProcessGroups) {
		return nil, false
	}
	return o.RemoteProcessGroups, true
}

// HasRemoteProcessGroups returns a boolean if a field has been set.
func (o *VersionedProcessGroup) HasRemoteProcessGroups() bool {
	if o != nil && !IsNil(o.RemoteProcessGroups) {
		return true
	}

	return false
}

// SetRemoteProcessGroups gets a reference to the given []VersionedRemoteProcessGroup and assigns it to the RemoteProcessGroups field.
func (o *VersionedProcessGroup) SetRemoteProcessGroups(v []VersionedRemoteProcessGroup) {
	o.RemoteProcessGroups = v
}

// GetProcessors returns the Processors field value if set, zero value otherwise.
func (o *VersionedProcessGroup) GetProcessors() []VersionedProcessor {
	if o == nil || IsNil(o.Processors) {
		var ret []VersionedProcessor
		return ret
	}
	return o.Processors
}

// GetProcessorsOk returns a tuple with the Processors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionedProcessGroup) GetProcessorsOk() ([]VersionedProcessor, bool) {
	if o == nil || IsNil(o.Processors) {
		return nil, false
	}
	return o.Processors, true
}

// HasProcessors returns a boolean if a field has been set.
func (o *VersionedProcessGroup) HasProcessors() bool {
	if o != nil && !IsNil(o.Processors) {
		return true
	}

	return false
}

// SetProcessors gets a reference to the given []VersionedProcessor and assigns it to the Processors field.
func (o *VersionedProcessGroup) SetProcessors(v []VersionedProcessor) {
	o.Processors = v
}

// GetInputPorts returns the InputPorts field value if set, zero value otherwise.
func (o *VersionedProcessGroup) GetInputPorts() []VersionedPort {
	if o == nil || IsNil(o.InputPorts) {
		var ret []VersionedPort
		return ret
	}
	return o.InputPorts
}

// GetInputPortsOk returns a tuple with the InputPorts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionedProcessGroup) GetInputPortsOk() ([]VersionedPort, bool) {
	if o == nil || IsNil(o.InputPorts) {
		return nil, false
	}
	return o.InputPorts, true
}

// HasInputPorts returns a boolean if a field has been set.
func (o *VersionedProcessGroup) HasInputPorts() bool {
	if o != nil && !IsNil(o.InputPorts) {
		return true
	}

	return false
}

// SetInputPorts gets a reference to the given []VersionedPort and assigns it to the InputPorts field.
func (o *VersionedProcessGroup) SetInputPorts(v []VersionedPort) {
	o.InputPorts = v
}

// GetOutputPorts returns the OutputPorts field value if set, zero value otherwise.
func (o *VersionedProcessGroup) GetOutputPorts() []VersionedPort {
	if o == nil || IsNil(o.OutputPorts) {
		var ret []VersionedPort
		return ret
	}
	return o.OutputPorts
}

// GetOutputPortsOk returns a tuple with the OutputPorts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionedProcessGroup) GetOutputPortsOk() ([]VersionedPort, bool) {
	if o == nil || IsNil(o.OutputPorts) {
		return nil, false
	}
	return o.OutputPorts, true
}

// HasOutputPorts returns a boolean if a field has been set.
func (o *VersionedProcessGroup) HasOutputPorts() bool {
	if o != nil && !IsNil(o.OutputPorts) {
		return true
	}

	return false
}

// SetOutputPorts gets a reference to the given []VersionedPort and assigns it to the OutputPorts field.
func (o *VersionedProcessGroup) SetOutputPorts(v []VersionedPort) {
	o.OutputPorts = v
}

// GetConnections returns the Connections field value if set, zero value otherwise.
func (o *VersionedProcessGroup) GetConnections() []VersionedConnection {
	if o == nil || IsNil(o.Connections) {
		var ret []VersionedConnection
		return ret
	}
	return o.Connections
}

// GetConnectionsOk returns a tuple with the Connections field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionedProcessGroup) GetConnectionsOk() ([]VersionedConnection, bool) {
	if o == nil || IsNil(o.Connections) {
		return nil, false
	}
	return o.Connections, true
}

// HasConnections returns a boolean if a field has been set.
func (o *VersionedProcessGroup) HasConnections() bool {
	if o != nil && !IsNil(o.Connections) {
		return true
	}

	return false
}

// SetConnections gets a reference to the given []VersionedConnection and assigns it to the Connections field.
func (o *VersionedProcessGroup) SetConnections(v []VersionedConnection) {
	o.Connections = v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *VersionedProcessGroup) GetLabels() []VersionedLabel {
	if o == nil || IsNil(o.Labels) {
		var ret []VersionedLabel
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionedProcessGroup) GetLabelsOk() ([]VersionedLabel, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *VersionedProcessGroup) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []VersionedLabel and assigns it to the Labels field.
func (o *VersionedProcessGroup) SetLabels(v []VersionedLabel) {
	o.Labels = v
}

// GetFunnels returns the Funnels field value if set, zero value otherwise.
func (o *VersionedProcessGroup) GetFunnels() []VersionedFunnel {
	if o == nil || IsNil(o.Funnels) {
		var ret []VersionedFunnel
		return ret
	}
	return o.Funnels
}

// GetFunnelsOk returns a tuple with the Funnels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionedProcessGroup) GetFunnelsOk() ([]VersionedFunnel, bool) {
	if o == nil || IsNil(o.Funnels) {
		return nil, false
	}
	return o.Funnels, true
}

// HasFunnels returns a boolean if a field has been set.
func (o *VersionedProcessGroup) HasFunnels() bool {
	if o != nil && !IsNil(o.Funnels) {
		return true
	}

	return false
}

// SetFunnels gets a reference to the given []VersionedFunnel and assigns it to the Funnels field.
func (o *VersionedProcessGroup) SetFunnels(v []VersionedFunnel) {
	o.Funnels = v
}

// GetControllerServices returns the ControllerServices field value if set, zero value otherwise.
func (o *VersionedProcessGroup) GetControllerServices() []VersionedControllerService {
	if o == nil || IsNil(o.ControllerServices) {
		var ret []VersionedControllerService
		return ret
	}
	return o.ControllerServices
}

// GetControllerServicesOk returns a tuple with the ControllerServices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionedProcessGroup) GetControllerServicesOk() ([]VersionedControllerService, bool) {
	if o == nil || IsNil(o.ControllerServices) {
		return nil, false
	}
	return o.ControllerServices, true
}

// HasControllerServices returns a boolean if a field has been set.
func (o *VersionedProcessGroup) HasControllerServices() bool {
	if o != nil && !IsNil(o.ControllerServices) {
		return true
	}

	return false
}

// SetControllerServices gets a reference to the given []VersionedControllerService and assigns it to the ControllerServices field.
func (o *VersionedProcessGroup) SetControllerServices(v []VersionedControllerService) {
	o.ControllerServices = v
}

// GetVersionedFlowCoordinates returns the VersionedFlowCoordinates field value if set, zero value otherwise.
func (o *VersionedProcessGroup) GetVersionedFlowCoordinates() VersionedFlowCoordinates {
	if o == nil || IsNil(o.VersionedFlowCoordinates) {
		var ret VersionedFlowCoordinates
		return ret
	}
	return *o.VersionedFlowCoordinates
}

// GetVersionedFlowCoordinatesOk returns a tuple with the VersionedFlowCoordinates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionedProcessGroup) GetVersionedFlowCoordinatesOk() (*VersionedFlowCoordinates, bool) {
	if o == nil || IsNil(o.VersionedFlowCoordinates) {
		return nil, false
	}
	return o.VersionedFlowCoordinates, true
}

// HasVersionedFlowCoordinates returns a boolean if a field has been set.
func (o *VersionedProcessGroup) HasVersionedFlowCoordinates() bool {
	if o != nil && !IsNil(o.VersionedFlowCoordinates) {
		return true
	}

	return false
}

// SetVersionedFlowCoordinates gets a reference to the given VersionedFlowCoordinates and assigns it to the VersionedFlowCoordinates field.
func (o *VersionedProcessGroup) SetVersionedFlowCoordinates(v VersionedFlowCoordinates) {
	o.VersionedFlowCoordinates = &v
}

// GetVariables returns the Variables field value if set, zero value otherwise.
func (o *VersionedProcessGroup) GetVariables() map[string]string {
	if o == nil || IsNil(o.Variables) {
		var ret map[string]string
		return ret
	}
	return *o.Variables
}

// GetVariablesOk returns a tuple with the Variables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionedProcessGroup) GetVariablesOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Variables) {
		return nil, false
	}
	return o.Variables, true
}

// HasVariables returns a boolean if a field has been set.
func (o *VersionedProcessGroup) HasVariables() bool {
	if o != nil && !IsNil(o.Variables) {
		return true
	}

	return false
}

// SetVariables gets a reference to the given map[string]string and assigns it to the Variables field.
func (o *VersionedProcessGroup) SetVariables(v map[string]string) {
	o.Variables = &v
}

// GetParameterContextName returns the ParameterContextName field value if set, zero value otherwise.
func (o *VersionedProcessGroup) GetParameterContextName() string {
	if o == nil || IsNil(o.ParameterContextName) {
		var ret string
		return ret
	}
	return *o.ParameterContextName
}

// GetParameterContextNameOk returns a tuple with the ParameterContextName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionedProcessGroup) GetParameterContextNameOk() (*string, bool) {
	if o == nil || IsNil(o.ParameterContextName) {
		return nil, false
	}
	return o.ParameterContextName, true
}

// HasParameterContextName returns a boolean if a field has been set.
func (o *VersionedProcessGroup) HasParameterContextName() bool {
	if o != nil && !IsNil(o.ParameterContextName) {
		return true
	}

	return false
}

// SetParameterContextName gets a reference to the given string and assigns it to the ParameterContextName field.
func (o *VersionedProcessGroup) SetParameterContextName(v string) {
	o.ParameterContextName = &v
}

// GetDefaultFlowFileExpiration returns the DefaultFlowFileExpiration field value if set, zero value otherwise.
func (o *VersionedProcessGroup) GetDefaultFlowFileExpiration() string {
	if o == nil || IsNil(o.DefaultFlowFileExpiration) {
		var ret string
		return ret
	}
	return *o.DefaultFlowFileExpiration
}

// GetDefaultFlowFileExpirationOk returns a tuple with the DefaultFlowFileExpiration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionedProcessGroup) GetDefaultFlowFileExpirationOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultFlowFileExpiration) {
		return nil, false
	}
	return o.DefaultFlowFileExpiration, true
}

// HasDefaultFlowFileExpiration returns a boolean if a field has been set.
func (o *VersionedProcessGroup) HasDefaultFlowFileExpiration() bool {
	if o != nil && !IsNil(o.DefaultFlowFileExpiration) {
		return true
	}

	return false
}

// SetDefaultFlowFileExpiration gets a reference to the given string and assigns it to the DefaultFlowFileExpiration field.
func (o *VersionedProcessGroup) SetDefaultFlowFileExpiration(v string) {
	o.DefaultFlowFileExpiration = &v
}

// GetDefaultBackPressureObjectThreshold returns the DefaultBackPressureObjectThreshold field value if set, zero value otherwise.
func (o *VersionedProcessGroup) GetDefaultBackPressureObjectThreshold() int64 {
	if o == nil || IsNil(o.DefaultBackPressureObjectThreshold) {
		var ret int64
		return ret
	}
	return *o.DefaultBackPressureObjectThreshold
}

// GetDefaultBackPressureObjectThresholdOk returns a tuple with the DefaultBackPressureObjectThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionedProcessGroup) GetDefaultBackPressureObjectThresholdOk() (*int64, bool) {
	if o == nil || IsNil(o.DefaultBackPressureObjectThreshold) {
		return nil, false
	}
	return o.DefaultBackPressureObjectThreshold, true
}

// HasDefaultBackPressureObjectThreshold returns a boolean if a field has been set.
func (o *VersionedProcessGroup) HasDefaultBackPressureObjectThreshold() bool {
	if o != nil && !IsNil(o.DefaultBackPressureObjectThreshold) {
		return true
	}

	return false
}

// SetDefaultBackPressureObjectThreshold gets a reference to the given int64 and assigns it to the DefaultBackPressureObjectThreshold field.
func (o *VersionedProcessGroup) SetDefaultBackPressureObjectThreshold(v int64) {
	o.DefaultBackPressureObjectThreshold = &v
}

// GetDefaultBackPressureDataSizeThreshold returns the DefaultBackPressureDataSizeThreshold field value if set, zero value otherwise.
func (o *VersionedProcessGroup) GetDefaultBackPressureDataSizeThreshold() string {
	if o == nil || IsNil(o.DefaultBackPressureDataSizeThreshold) {
		var ret string
		return ret
	}
	return *o.DefaultBackPressureDataSizeThreshold
}

// GetDefaultBackPressureDataSizeThresholdOk returns a tuple with the DefaultBackPressureDataSizeThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionedProcessGroup) GetDefaultBackPressureDataSizeThresholdOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultBackPressureDataSizeThreshold) {
		return nil, false
	}
	return o.DefaultBackPressureDataSizeThreshold, true
}

// HasDefaultBackPressureDataSizeThreshold returns a boolean if a field has been set.
func (o *VersionedProcessGroup) HasDefaultBackPressureDataSizeThreshold() bool {
	if o != nil && !IsNil(o.DefaultBackPressureDataSizeThreshold) {
		return true
	}

	return false
}

// SetDefaultBackPressureDataSizeThreshold gets a reference to the given string and assigns it to the DefaultBackPressureDataSizeThreshold field.
func (o *VersionedProcessGroup) SetDefaultBackPressureDataSizeThreshold(v string) {
	o.DefaultBackPressureDataSizeThreshold = &v
}

// GetComponentType returns the ComponentType field value if set, zero value otherwise.
func (o *VersionedProcessGroup) GetComponentType() string {
	if o == nil || IsNil(o.ComponentType) {
		var ret string
		return ret
	}
	return *o.ComponentType
}

// GetComponentTypeOk returns a tuple with the ComponentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionedProcessGroup) GetComponentTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ComponentType) {
		return nil, false
	}
	return o.ComponentType, true
}

// HasComponentType returns a boolean if a field has been set.
func (o *VersionedProcessGroup) HasComponentType() bool {
	if o != nil && !IsNil(o.ComponentType) {
		return true
	}

	return false
}

// SetComponentType gets a reference to the given string and assigns it to the ComponentType field.
func (o *VersionedProcessGroup) SetComponentType(v string) {
	o.ComponentType = &v
}

// GetFlowFileConcurrency returns the FlowFileConcurrency field value if set, zero value otherwise.
func (o *VersionedProcessGroup) GetFlowFileConcurrency() string {
	if o == nil || IsNil(o.FlowFileConcurrency) {
		var ret string
		return ret
	}
	return *o.FlowFileConcurrency
}

// GetFlowFileConcurrencyOk returns a tuple with the FlowFileConcurrency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionedProcessGroup) GetFlowFileConcurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.FlowFileConcurrency) {
		return nil, false
	}
	return o.FlowFileConcurrency, true
}

// HasFlowFileConcurrency returns a boolean if a field has been set.
func (o *VersionedProcessGroup) HasFlowFileConcurrency() bool {
	if o != nil && !IsNil(o.FlowFileConcurrency) {
		return true
	}

	return false
}

// SetFlowFileConcurrency gets a reference to the given string and assigns it to the FlowFileConcurrency field.
func (o *VersionedProcessGroup) SetFlowFileConcurrency(v string) {
	o.FlowFileConcurrency = &v
}

// GetFlowFileOutboundPolicy returns the FlowFileOutboundPolicy field value if set, zero value otherwise.
func (o *VersionedProcessGroup) GetFlowFileOutboundPolicy() string {
	if o == nil || IsNil(o.FlowFileOutboundPolicy) {
		var ret string
		return ret
	}
	return *o.FlowFileOutboundPolicy
}

// GetFlowFileOutboundPolicyOk returns a tuple with the FlowFileOutboundPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionedProcessGroup) GetFlowFileOutboundPolicyOk() (*string, bool) {
	if o == nil || IsNil(o.FlowFileOutboundPolicy) {
		return nil, false
	}
	return o.FlowFileOutboundPolicy, true
}

// HasFlowFileOutboundPolicy returns a boolean if a field has been set.
func (o *VersionedProcessGroup) HasFlowFileOutboundPolicy() bool {
	if o != nil && !IsNil(o.FlowFileOutboundPolicy) {
		return true
	}

	return false
}

// SetFlowFileOutboundPolicy gets a reference to the given string and assigns it to the FlowFileOutboundPolicy field.
func (o *VersionedProcessGroup) SetFlowFileOutboundPolicy(v string) {
	o.FlowFileOutboundPolicy = &v
}

// GetGroupIdentifier returns the GroupIdentifier field value if set, zero value otherwise.
func (o *VersionedProcessGroup) GetGroupIdentifier() string {
	if o == nil || IsNil(o.GroupIdentifier) {
		var ret string
		return ret
	}
	return *o.GroupIdentifier
}

// GetGroupIdentifierOk returns a tuple with the GroupIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionedProcessGroup) GetGroupIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.GroupIdentifier) {
		return nil, false
	}
	return o.GroupIdentifier, true
}

// HasGroupIdentifier returns a boolean if a field has been set.
func (o *VersionedProcessGroup) HasGroupIdentifier() bool {
	if o != nil && !IsNil(o.GroupIdentifier) {
		return true
	}

	return false
}

// SetGroupIdentifier gets a reference to the given string and assigns it to the GroupIdentifier field.
func (o *VersionedProcessGroup) SetGroupIdentifier(v string) {
	o.GroupIdentifier = &v
}

func (o VersionedProcessGroup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VersionedProcessGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Identifier) {
		toSerialize["identifier"] = o.Identifier
	}
	if !IsNil(o.InstanceIdentifier) {
		toSerialize["instanceIdentifier"] = o.InstanceIdentifier
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Comments) {
		toSerialize["comments"] = o.Comments
	}
	if !IsNil(o.Position) {
		toSerialize["position"] = o.Position
	}
	if !IsNil(o.ProcessGroups) {
		toSerialize["processGroups"] = o.ProcessGroups
	}
	if !IsNil(o.RemoteProcessGroups) {
		toSerialize["remoteProcessGroups"] = o.RemoteProcessGroups
	}
	if !IsNil(o.Processors) {
		toSerialize["processors"] = o.Processors
	}
	if !IsNil(o.InputPorts) {
		toSerialize["inputPorts"] = o.InputPorts
	}
	if !IsNil(o.OutputPorts) {
		toSerialize["outputPorts"] = o.OutputPorts
	}
	if !IsNil(o.Connections) {
		toSerialize["connections"] = o.Connections
	}
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	if !IsNil(o.Funnels) {
		toSerialize["funnels"] = o.Funnels
	}
	if !IsNil(o.ControllerServices) {
		toSerialize["controllerServices"] = o.ControllerServices
	}
	if !IsNil(o.VersionedFlowCoordinates) {
		toSerialize["versionedFlowCoordinates"] = o.VersionedFlowCoordinates
	}
	if !IsNil(o.Variables) {
		toSerialize["variables"] = o.Variables
	}
	if !IsNil(o.ParameterContextName) {
		toSerialize["parameterContextName"] = o.ParameterContextName
	}
	if !IsNil(o.DefaultFlowFileExpiration) {
		toSerialize["defaultFlowFileExpiration"] = o.DefaultFlowFileExpiration
	}
	if !IsNil(o.DefaultBackPressureObjectThreshold) {
		toSerialize["defaultBackPressureObjectThreshold"] = o.DefaultBackPressureObjectThreshold
	}
	if !IsNil(o.DefaultBackPressureDataSizeThreshold) {
		toSerialize["defaultBackPressureDataSizeThreshold"] = o.DefaultBackPressureDataSizeThreshold
	}
	if !IsNil(o.ComponentType) {
		toSerialize["componentType"] = o.ComponentType
	}
	if !IsNil(o.FlowFileConcurrency) {
		toSerialize["flowFileConcurrency"] = o.FlowFileConcurrency
	}
	if !IsNil(o.FlowFileOutboundPolicy) {
		toSerialize["flowFileOutboundPolicy"] = o.FlowFileOutboundPolicy
	}
	if !IsNil(o.GroupIdentifier) {
		toSerialize["groupIdentifier"] = o.GroupIdentifier
	}
	return toSerialize, nil
}

type NullableVersionedProcessGroup struct {
	value *VersionedProcessGroup
	isSet bool
}

func (v NullableVersionedProcessGroup) Get() *VersionedProcessGroup {
	return v.value
}

func (v *NullableVersionedProcessGroup) Set(val *VersionedProcessGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableVersionedProcessGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableVersionedProcessGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVersionedProcessGroup(val *VersionedProcessGroup) *NullableVersionedProcessGroup {
	return &NullableVersionedProcessGroup{value: val, isSet: true}
}

func (v NullableVersionedProcessGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVersionedProcessGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


