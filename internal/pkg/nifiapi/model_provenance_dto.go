/*
NiFi Rest API

The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.

API version: 2.0.0
Contact: dev@nifi.apache.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nifiapi

import (
	"encoding/json"
)

// checks if the ProvenanceDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProvenanceDTO{}

// ProvenanceDTO struct for ProvenanceDTO
type ProvenanceDTO struct {
	// The id of the provenance query.
	Id *string `json:"id,omitempty"`
	// The URI for this query. Used for obtaining/deleting the request at a later time
	Uri *string `json:"uri,omitempty"`
	// The timestamp when the query was submitted.
	SubmissionTime *string `json:"submissionTime,omitempty"`
	// The timestamp when the query will expire.
	Expiration *string `json:"expiration,omitempty"`
	// The current percent complete.
	PercentCompleted *int32 `json:"percentCompleted,omitempty"`
	// Whether the query has finished.
	Finished *bool `json:"finished,omitempty"`
	Request *ProvenanceRequestDTO `json:"request,omitempty"`
	Results *ProvenanceResultsDTO `json:"results,omitempty"`
}

// NewProvenanceDTO instantiates a new ProvenanceDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProvenanceDTO() *ProvenanceDTO {
	this := ProvenanceDTO{}
	return &this
}

// NewProvenanceDTOWithDefaults instantiates a new ProvenanceDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProvenanceDTOWithDefaults() *ProvenanceDTO {
	this := ProvenanceDTO{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ProvenanceDTO) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvenanceDTO) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ProvenanceDTO) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ProvenanceDTO) SetId(v string) {
	o.Id = &v
}

// GetUri returns the Uri field value if set, zero value otherwise.
func (o *ProvenanceDTO) GetUri() string {
	if o == nil || IsNil(o.Uri) {
		var ret string
		return ret
	}
	return *o.Uri
}

// GetUriOk returns a tuple with the Uri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvenanceDTO) GetUriOk() (*string, bool) {
	if o == nil || IsNil(o.Uri) {
		return nil, false
	}
	return o.Uri, true
}

// HasUri returns a boolean if a field has been set.
func (o *ProvenanceDTO) HasUri() bool {
	if o != nil && !IsNil(o.Uri) {
		return true
	}

	return false
}

// SetUri gets a reference to the given string and assigns it to the Uri field.
func (o *ProvenanceDTO) SetUri(v string) {
	o.Uri = &v
}

// GetSubmissionTime returns the SubmissionTime field value if set, zero value otherwise.
func (o *ProvenanceDTO) GetSubmissionTime() string {
	if o == nil || IsNil(o.SubmissionTime) {
		var ret string
		return ret
	}
	return *o.SubmissionTime
}

// GetSubmissionTimeOk returns a tuple with the SubmissionTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvenanceDTO) GetSubmissionTimeOk() (*string, bool) {
	if o == nil || IsNil(o.SubmissionTime) {
		return nil, false
	}
	return o.SubmissionTime, true
}

// HasSubmissionTime returns a boolean if a field has been set.
func (o *ProvenanceDTO) HasSubmissionTime() bool {
	if o != nil && !IsNil(o.SubmissionTime) {
		return true
	}

	return false
}

// SetSubmissionTime gets a reference to the given string and assigns it to the SubmissionTime field.
func (o *ProvenanceDTO) SetSubmissionTime(v string) {
	o.SubmissionTime = &v
}

// GetExpiration returns the Expiration field value if set, zero value otherwise.
func (o *ProvenanceDTO) GetExpiration() string {
	if o == nil || IsNil(o.Expiration) {
		var ret string
		return ret
	}
	return *o.Expiration
}

// GetExpirationOk returns a tuple with the Expiration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvenanceDTO) GetExpirationOk() (*string, bool) {
	if o == nil || IsNil(o.Expiration) {
		return nil, false
	}
	return o.Expiration, true
}

// HasExpiration returns a boolean if a field has been set.
func (o *ProvenanceDTO) HasExpiration() bool {
	if o != nil && !IsNil(o.Expiration) {
		return true
	}

	return false
}

// SetExpiration gets a reference to the given string and assigns it to the Expiration field.
func (o *ProvenanceDTO) SetExpiration(v string) {
	o.Expiration = &v
}

// GetPercentCompleted returns the PercentCompleted field value if set, zero value otherwise.
func (o *ProvenanceDTO) GetPercentCompleted() int32 {
	if o == nil || IsNil(o.PercentCompleted) {
		var ret int32
		return ret
	}
	return *o.PercentCompleted
}

// GetPercentCompletedOk returns a tuple with the PercentCompleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvenanceDTO) GetPercentCompletedOk() (*int32, bool) {
	if o == nil || IsNil(o.PercentCompleted) {
		return nil, false
	}
	return o.PercentCompleted, true
}

// HasPercentCompleted returns a boolean if a field has been set.
func (o *ProvenanceDTO) HasPercentCompleted() bool {
	if o != nil && !IsNil(o.PercentCompleted) {
		return true
	}

	return false
}

// SetPercentCompleted gets a reference to the given int32 and assigns it to the PercentCompleted field.
func (o *ProvenanceDTO) SetPercentCompleted(v int32) {
	o.PercentCompleted = &v
}

// GetFinished returns the Finished field value if set, zero value otherwise.
func (o *ProvenanceDTO) GetFinished() bool {
	if o == nil || IsNil(o.Finished) {
		var ret bool
		return ret
	}
	return *o.Finished
}

// GetFinishedOk returns a tuple with the Finished field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvenanceDTO) GetFinishedOk() (*bool, bool) {
	if o == nil || IsNil(o.Finished) {
		return nil, false
	}
	return o.Finished, true
}

// HasFinished returns a boolean if a field has been set.
func (o *ProvenanceDTO) HasFinished() bool {
	if o != nil && !IsNil(o.Finished) {
		return true
	}

	return false
}

// SetFinished gets a reference to the given bool and assigns it to the Finished field.
func (o *ProvenanceDTO) SetFinished(v bool) {
	o.Finished = &v
}

// GetRequest returns the Request field value if set, zero value otherwise.
func (o *ProvenanceDTO) GetRequest() ProvenanceRequestDTO {
	if o == nil || IsNil(o.Request) {
		var ret ProvenanceRequestDTO
		return ret
	}
	return *o.Request
}

// GetRequestOk returns a tuple with the Request field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvenanceDTO) GetRequestOk() (*ProvenanceRequestDTO, bool) {
	if o == nil || IsNil(o.Request) {
		return nil, false
	}
	return o.Request, true
}

// HasRequest returns a boolean if a field has been set.
func (o *ProvenanceDTO) HasRequest() bool {
	if o != nil && !IsNil(o.Request) {
		return true
	}

	return false
}

// SetRequest gets a reference to the given ProvenanceRequestDTO and assigns it to the Request field.
func (o *ProvenanceDTO) SetRequest(v ProvenanceRequestDTO) {
	o.Request = &v
}

// GetResults returns the Results field value if set, zero value otherwise.
func (o *ProvenanceDTO) GetResults() ProvenanceResultsDTO {
	if o == nil || IsNil(o.Results) {
		var ret ProvenanceResultsDTO
		return ret
	}
	return *o.Results
}

// GetResultsOk returns a tuple with the Results field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvenanceDTO) GetResultsOk() (*ProvenanceResultsDTO, bool) {
	if o == nil || IsNil(o.Results) {
		return nil, false
	}
	return o.Results, true
}

// HasResults returns a boolean if a field has been set.
func (o *ProvenanceDTO) HasResults() bool {
	if o != nil && !IsNil(o.Results) {
		return true
	}

	return false
}

// SetResults gets a reference to the given ProvenanceResultsDTO and assigns it to the Results field.
func (o *ProvenanceDTO) SetResults(v ProvenanceResultsDTO) {
	o.Results = &v
}

func (o ProvenanceDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProvenanceDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Uri) {
		toSerialize["uri"] = o.Uri
	}
	if !IsNil(o.SubmissionTime) {
		toSerialize["submissionTime"] = o.SubmissionTime
	}
	if !IsNil(o.Expiration) {
		toSerialize["expiration"] = o.Expiration
	}
	if !IsNil(o.PercentCompleted) {
		toSerialize["percentCompleted"] = o.PercentCompleted
	}
	if !IsNil(o.Finished) {
		toSerialize["finished"] = o.Finished
	}
	if !IsNil(o.Request) {
		toSerialize["request"] = o.Request
	}
	if !IsNil(o.Results) {
		toSerialize["results"] = o.Results
	}
	return toSerialize, nil
}

type NullableProvenanceDTO struct {
	value *ProvenanceDTO
	isSet bool
}

func (v NullableProvenanceDTO) Get() *ProvenanceDTO {
	return v.value
}

func (v *NullableProvenanceDTO) Set(val *ProvenanceDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableProvenanceDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableProvenanceDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProvenanceDTO(val *ProvenanceDTO) *NullableProvenanceDTO {
	return &NullableProvenanceDTO{value: val, isSet: true}
}

func (v NullableProvenanceDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProvenanceDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


